OBJECT Codeunit 99008900 POS Functions		OBJECT 	7							
{										
OBJECT-PROPERTIES										
{										
Date=28/01/16;										
Time=01:08:35 p.m.;										
Modified=Yes;										
Version List=LSW17.10.01;										
}										
PROPERTIES										
{										
SingleInstance=Yes;										
OnRun=BEGIN										
END;										
										
}										
CODE										
{										
VAR										
Text036@1035 : TextConst 'ENU=It is not allowed to use this tendertype;ESP=No tiene permisos para usar este medio de pago';										
Text037@1036 : TextConst 'ENU=Manager key is required to use this tendertype;ESP=Se requiere la clave de supervisor para usar este	me	dio	d	e p	ago';					
Text038@1037 : TextConst 'ENU=The setup for tendertype is marking only;ESP=Configuraci¢n para este medio pago es S¢lo Marcado';										
Text039@1038 : TextConst 'ENU=Keyboard entry is not allowed for this tendertype;ESP=No se permite la inserci¢n de datos por teclad	o p	ara	e	ste	medio de pago';					
Text040@1039 : TextConst 'ENU=Keyboard entry is required for this tendertype;ESP=Se requiere insertar datos por teclado para este	med	io	de	pa	go';					
Text041@1040 : TextConst 'ENU=Return/minus not allowed for this tendertype;ESP=Devoluci¢n/valor negativo no permitido para este me	dio	de	p	ago	';					
Text042@1041 : TextConst 'ENU=Max. amount allowed for this tendertype is %1;ESP=Valor m x. permitido para este medio de pago %1';										
Text043@1042 : TextConst 'ENU=Max. amount to enter for this tendertype is %1;ESP=Importe M x. a insertar para este medio de pago e	s %	1';								
Text044@1043 : TextConst 'ENU=Min. amount allowed for this tendertype is %1;ESP=Importe M¡n. permitido para este medio de pago es	%1'	;								
Text045@1044 : TextConst 'ENU=Min. amount to enter for this tendertype is %1;ESP=El Importe M¡n. a insertar para este medio de pag	o e	s %	1'	;						
Text046@1045 : TextConst 'ENU=Overtender is not allowed for this tendertype;ESP=No se puede pagar por encima del valor de compra p	ara	es	te	me	dio de pago';					
Text047@1046 : TextConst 'ENU=Overtender max. amount is %1;ESP=El m ximo valor permitido por encima del valor de compra es %1';										
Text048@1047 : TextConst 'ENU=Undertender is not allowed for this tendertype;ESP=No se permite pagar por debajo del valor de compr	a p	ara	e	ste	medio de pago';					
Text049@1048 : TextConst 'ENU=Customer %1 is blocked;ESP=El Cliente %1 est  bloqueado';										
Text050@1049 : TextConst 'ENU=Customer %1 is over credit limit;ESP=El Cliente %1 est  por encima del l¡mite cr‚dito';										
Text051@1100409003 : TextConst 'ENU=Customer %1 is over credit limit. Want to continue?;ESP=El Cliente %1 ha excedido el l¡mite de	cr	‚di	to	. ¨	Quiere continuar?';					
Text055@1051 : TextConst 'ENU=Coupon %1 is not recognized.\Unkonwn %2.;ESP=El Cup¢n %1 no se reconoce.\Diferencia %2.';										
Text056@1052 : TextConst 'ENU=%1 is Blocked;ESP=%1 est  Bloqueado';										
Text057@1053 : TextConst 'ENU=Not enough items to trigger Coupon.;ESP=No hay productos suficientes para lanzar el Cup¢n.';										
Text058@1056 : TextConst 'ENU=Connection to Transaction server failed.\Contact Manager.;ESP=La conexi¢n al Servidor de Transaccion	es	ha	fa	lla	do.\Contacte con el Administrador.';					
PosSetup@1000 : Record 99008900;										
PosTerminal@1004 : Record 99001471;										
StoreSetup@1005 : Record 99001470;										
PosFuncProfile@1006 : Record 99001515;										
LastCouponPOSTransLine@10012009 : TEMPORARY Record 99008981;										
tmpPOSTransLine@10012010 : TEMPORARY Record 99008981;										
POSTransLineTemp@1100409013 : TEMPORARY Record 99008981;										
POSTransLineTemp2@1100409033 : TEMPORARY Record 99008981;										
TSUtil@1100409000 : Codeunit 99008909;										
AppMan@1200070012 : Codeunit 1;										
rboPriceUtil@10012001 : Codeunit 99001462;										
BOUtil@10012000 : Codeunit 99001452;										
POSSESSION@1100409002 : Codeunit 99008919;										
POSGUI@1100409038 : Codeunit 99001575;										
BarcPrice@1007 : Decimal;										
BarcPriceSpec@1200070002 : Boolean;										
BarcQty@1008 : Decimal;										
BarcQtySpec@1200070003 : Boolean;										
BarcItem@1009 : Code[20];										
BarcUOM@1010 : Code[10];										
BarcCoupRef@10012004 : Code[20];										
BarcEANOrg@1011 : Code[13];										
BarcItemGroup@1012 : Code[13];										
BarcDescription@1013 : Text[30];										
BarcCustomer@1014 : Code[20];										
BarcStaff@1015 : Code[10];										
BarcDataEntry@1054 : Code[22];										
Text060@1200070004 : TextConst 'ENU=Transaction Server connection failed;ESP=La conexi¢n con el Servidor de Transacciones ha falla	do'	;								
Text061@1200070005 : TextConst 'ENU=No Record found to correct;ESP=No se han encontrado registros para corregir';										
IniFileName@1200070006 : TextConst 'ENU=LSRETAIL.INI;ESP=LSRETAIL.INI';										
RetailSetup@1200070007 : Record 10000700;										
Text063@10012002 : TextConst 'ENU=The Coupon is not valid in this store;ESP=El Cup¢n no es v lido en esta tienda';										
Text064@10012003 : TextConst 'ENU=The Coupon''s is not valid at this time;ESP=El Cup¢n no es v lido en este momento';										
Text065@10012005 : TextConst 'ENU=Coupon only valid for next/last item line. Item not found.;ESP=Cup¢n v lido £nicamente para la s	igu	ien	te	/ac	tual l¡nea de producto. Producto no encontrado.';					
Text260@1200070010 : TextConst 'ENU=Table %1;ESP=Mesa %1';										
Text261@1200070011 : TextConst 'ENU=Prepayment - %1;ESP=Prepago - %1';										
AmountDisplayFormat@1200070016 : Text[80];										
QtyDisplayFormat@1200070015 : Text[80];										
PriceDisplayFormat@1200070014 : Text[80];										
WeightDisplayFormat@1200070013 : Text[80];										
Text301@1200070019 : TextConst 'ENU=%1 must not be %2 in %3 %4;ESP=%1 no debe ser %2 en %3 %4';										
BarcSerialNo@10012007 : Code[20];										
BarcLotNo@1100409008 : Code[20];										
BarcLineDiscount@10012008 : Decimal;										
BOUtils@10012011 : Codeunit 99001452;										
IniFileSection@1100409006 : Text[80];										
IniFilePath@1100409007 : Text[250];										
ItemTrack@1100409009 : Codeunit 10001415;										
Text305@1100409010 : TextConst 'ENU=Do you want to use the number anyway?;ESP=¨Quiere usar este n£mero de todos modos?';										
"Text308@1100409019 : TextConst 'ENU=""Invoice No. %1 is closed "";ESP=""El No. Factura %1 est  cerrado ""';"										
Text309@1100409018 : TextConst 'ENU=Invoice No %1 cannot be found.;ESP=El No. Factura %1 no puede encontrarse.';										
Text310@1100409015 : TextConst 'ENU=Total Remaining Amount is %1;ESP=El Importe Pendiente Total es %1';										
Text311@1100409021 : TextConst 'ENU=Refund not allowed for Item %1 %2;ESP=Devoluci¢n no permitida para el Producto %1 %2';										
Text312@1100409020 : TextConst 'ENU=Manager key is required for refunding Item %1 %2;ESP=Se necesita la clave de supervisor para p	ode	r d	ev	olv	er el Producto %1 %2';					
Text313@1100409022 : TextConst 'ENU=Item %1 %2 was purchased %3. The refund period is %4 days. Do you want to continue?;ESP=El Pro	duc	to	1%	2%	fue comprado %3. El periodo de devoluci¢n es %4 d¡as. ¨Desea continuar?';					
SkipIncrementSlipno@1100409027 : Boolean;										
POSFuncProfileWebRequest@1100409036 : Record 99008947;										
WebServicesClient@1100409035 : Codeunit 99009513;										
POSMemberMgt@1100409037 : Codeunit 99009006;										
POSScanDataUtils@1100409060 : Codeunit 10000736;										
DiscLedgerMgt@1100409039 : Codeunit 99001569;										
DealPosTransLineTmp@1100409052 : TEMPORARY Record 99008981;										
TmpPosTrInfoEntry@1100409034 : TEMPORARY Record 99008982;										
PaymentState@1100409051 : Boolean;										
Text326@1100409053 : TextConst 'ENU=Deal;ESP=Men£ Promoci¢n';										
TmpPeriodicDiscountLine@1100409055 : TEMPORARY Record 99001454;										
TmpOfferLine@1100409057 : TEMPORARY Record 99001503;										
TmpPreDiscAmountToTrigger@1100409058 : TEMPORARY Record 99001453;										
LSHelper@1100409054 : Codeunit 10000705;										
RetailUser@1100409005 : Record 10000742;										
PosTrGuestInfo1@1100409056 : Record 10012117;										
LastOfferLoadTime@1100409001 : DateTime;										
PText023@1100409023 : TextConst 'ENU=Lookup Serial/Lot Nos.;ESP=Nos. de Lote/Serie';										
PText024@1100409017 : TextConst 'ENU=Enter Serial/Lot No.;ESP=Insertar No. Serie/Lote';										
PText029@1100409016 : TextConst 'ENU=Enter lot number for the item;ESP=Insertar el n£mero de lote para el producto';										
PText030@1100409014 : TextConst 'ENU=Enter serial number for the item;ESP=Inserte n£mero de serie para el producto';										
PText031@1100409012 : TextConst 'ENU=Select lot number for item %1;ESP=Seleccionar el n£mero de lote para el producto %1';										
PText032@1100409011 : TextConst 'ENU=Select serial number for item %1;ESP=Seleccionar n£mero de serie para el producto %1';										
Text020@1100409029 : TextConst 'ENU=Would you like to enter the %1 manually?;ESP=¨Desea insertar el(la) %1 manualmente?';										
Text021@1100409028 : TextConst 'ENU=Serial Number;ESP=N£mero de Serie';										
Text022@1100409026 : TextConst 'ENU=Lot Number;ESP=N£mero de Lote';										
Text023@1100409025 : TextConst 'ENU=Lookup Serial/Lot Nos.;ESP=Nos. de Lote/Serie';										
PreLoadDiscTmp@1100409032 : TEMPORARY Record 99001453;										
PreLoadDiscLineTmp@1100409031 : TEMPORARY Record 99001454;										
ValidationPeriodBuffer@1100409030 : TEMPORARY Record 99001481;										
POSOfferMgt@1100409024 : Codeunit 99008908;										
										
PROCEDURE ReadLocalBaseVar@19(VAR StoreNo@1000 : Code[10];VAR TerminalNo@1001 : Code[10]);										
BEGIN										
//ReadLocalBaseVar										
										
IF ISSERVICETIER THEN										
EXIT;										
										
GetIniFileInfo;										
										
IF RetailUser.GET(USERID) THEN BEGIN										
"StoreNo := RetailUser.""Store No."";"										
"TerminalNo := RetailUser.""POS Terminal"";"										
END;										
END;										
										
PROCEDURE ReadLocalVar@5(VAR LastSlipNo@1000 : Code[20]);										
VAR										
Transaction@1003 : Record 99001472;										
PosTrans@1100409002 : Record 99008980;										
TmpLastSlip@1004 : Text[30];										
FilterFrom@1100409000 : Text[30];										
FilterTo@1100409001 : Text[30];										
ExistingReceiptNo@1100409003 : Code[20];										
BEGIN										
GetIniFileInfo;										
										
LastSlipNo := '0';										
"TmpLastSlip := ZeroPad(POSSESSION.TerminalNo,10) +"										
"ZeroPad(LastSlipNo,9);"										
"Transaction.SETCURRENTKEY(""Receipt No."");"										
										
"FilterFrom := ZeroPad(POSSESSION.TerminalNo,10) + ZeroPad('0',9);"										
"FilterTo := ZeroPad(POSSESSION.TerminalNo,10) + NumberPad('9',9);"										
"Transaction.SETRANGE(""Receipt No."",FilterFrom,FilterTo);"										
										
ExistingReceiptNo := '';										
IF Transaction.FINDLAST THEN										
"IF Transaction.""Receipt No."" > TmpLastSlip THEN"										
"ExistingReceiptNo := Transaction.""Receipt No."";"										
										
PosTrans.RESET;										
"PosTrans.SETRANGE(""Receipt No."",FilterFrom,FilterTo);"										
IF PosTrans.FINDLAST THEN										
"IF PosTrans.""Receipt No."" > TmpLastSlip THEN BEGIN"										
"IF PosTrans.""Receipt No."" > ExistingReceiptNo THEN"										
"ExistingReceiptNo := PosTrans.""Receipt No."";"										
END;										
										
IF ExistingReceiptNo <> '' THEN										
LastSlipNo := ExistingReceiptNo;										
END;										
										
PROCEDURE GetIniFileInfo@1100409007();										
BEGIN										
IF RetailSetup.GET THEN BEGIN										
"IF RetailSetup.""IniFile Section Identifier"" = RetailSetup.""IniFile Section Identifier""::Company_Userid THEN"										
IniFileSection := UPPERCASE(COMPANYNAME+USERID)										
ELSE										
IniFileSection := UPPERCASE(COMPANYNAME);										
										
"IniFilePath := RetailSetup.""IniFile Path""+IniFileName;"										
END										
ELSE										
BEGIN										
IniFileSection := UPPERCASE(COMPANYNAME);										
IniFilePath := IniFileName;										
END;										
END;										
										
PROCEDURE InitPosFunctions@17();										
BEGIN										
//InitPosFunctions										
PosSetup.GET(POSSESSION.HardwareProfileID);										
PosTerminal.GET(POSSESSION.TerminalNo);										
StoreSetup.GET(POSSESSION.StoreNo);										
PosFuncProfile.GET(POSSESSION.FunctionalityProfileID);										
										
//TransServer										
//TSUtil.Initialize;  //LS7.1-07										
IF NOT(TSUtil.Initialize) THEN;  //LS7.1-07										
END;										
										
PROCEDURE CalcInfoCodeDisc@1200070002(Transaction@1200070001 : Record 99008980);										
VAR										
Line@1200070000 : Record 99008981;										
BEGIN										
//CalcInfoCodeDisc										
										
"Line.SETCURRENTKEY(""Receipt No."",""Entry Type"",Number,""Variant Code"");"										
"Line.SETRANGE(""Receipt No."",Transaction.""Receipt No."");"										
"Line.SETRANGE(""Entry Type"",Line.""Entry Type""::Item);"										
IF Line.FIND('-') THEN REPEAT										
"Line.VALIDATE(""Item Disc. Group"");"										
Line.MODIFY;										
UNTIL Line.NEXT = 0;										
END;										
										
PROCEDURE RecalcSlip@11(Transaction@1000 : Record 99008980);										
VAR										
Line@1001 : Record 99008981;										
Item@1006 : Record 27;										
Qty@1002 : Decimal;										
UnitPrice@1003 : Decimal;										
SalesPriceCalcMgt@1005 : Codeunit 7000;										
RetailPriceUtils@1007 : Codeunit 99001462;										
UOM@1200070000 : Code[10];										
POSPriceUtil@1100409001 : Codeunit 99008906;										
DT@1100409002 : Record 99008943;										
CustDiscPer@1100409000 : Decimal;										
UnitPriceToUse@1100409003 : Decimal;										
LineDiscount@1100409004 : Decimal;										
BEGIN										
//RecalcSlip										
IF NOT Transaction.RECORDLEVELLOCKING THEN										
"Transaction.LOCKTABLE(TRUE,TRUE);"										
IF NOT Line.RECORDLEVELLOCKING THEN										
"Line.LOCKTABLE(TRUE,TRUE);"										
										
InitPosFunctions();										
"Line.SETCURRENTKEY(""Receipt No."",""Entry Type"",Number,""Variant Code"");"										
"Line.SETRANGE(""Receipt No."",Transaction.""Receipt No."");"										
"Line.SETRANGE(""Entry Type"",Line.""Entry Type""::Item);"										
										
"Line.SETRANGE(""Entry Status"",Line.""Entry Status""::"" "");"										
										
IF Line.FIND('-') THEN REPEAT										
"Line.VALIDATE(""Item Disc. Group"");"										
Line.MODIFY;										
"IF (Transaction.""Customer No."" <> '') OR (Transaction.""Member Price Group"" <> '')"										
"OR ((Transaction.""Member Card No."" <> '') AND (Transaction.""Customer Disc. Group"" <> ''))"										
THEN BEGIN										
"Line.SETRANGE(Number,Line.Number);"										
"Line.SETRANGE(""Variant Code"",Line.""Variant Code"");"										
"Line.SETRANGE(""Unit of Measure"",Line.""Unit of Measure"");"										
"UOM := Line.""Unit of Measure"";"										
Item.GET(Line.Number);										
"IF (Line.""Unit of Measure"" = '') OR (Line.""Unit of Measure"" = Item.""Sales Unit of Measure"") THEN BEGIN"										
"Line.SETFILTER(""Unit of Measure"",'%1|%2','',Item.""Sales Unit of Measure"");"										
Line.CALCSUMS(Quantity);										
"Line.SETRANGE(""Unit of Measure"",Line.""Unit of Measure"");"										
"UOM := Item.""Sales Unit of Measure"";"										
END ELSE										
Line.CALCSUMS(Quantity);										
Qty := Line.Quantity;										
										
LineDiscount := 0; //LS7.1-13										
"IF Transaction.""Customer No."" <> '' THEN"										
"UnitPrice := SalesPriceCalcMgt.GetStandardPrice(Transaction.""Customer No."",Line.Number,Line.""Variant Code"","										
"UOM,Qty,Transaction.""Trans. Date"","										
"//                                                      Transaction.""Trans. Currency Code"") //LS7.1-13"										
"Transaction.""Trans. Currency Code"",LineDiscount) //LS7.1-13"										
ELSE										
"UnitPrice := SalesPriceCalcMgt.GetStandardMemberPrice(Transaction.""Member Price Group"",Transaction.""Customer Disc. Group"","										
"Line.Number,Line.""Variant Code"","										
"UOM,Qty,Line.""Org. Price Exc. VAT"",Transaction.""Trans. Date"","										
"//                                                            Transaction.""Trans. Currency Code""); //LS7.1-13"										
"Transaction.""Trans. Currency Code"",LineDiscount); //LS7.1-13"										
Item.GET(Line.Number);										
"IF NOT (PosFuncProfile.""No VAT Used"") AND NOT (PosFuncProfile.""Add VAT to Prices"") THEN"										
"UnitPrice := RetailPriceUtils.CalcPriceInclVat(Item,UnitPrice,Line.""Vat Bus. Posting Group"");"										
"UnitPrice := ROUND(UnitPrice,PosFuncProfile.""Amount Rounding to"");"										
Line.FIND('-');										
REPEAT										
"IF Line.""Price Change"" THEN"										
UnitPriceToUse := 0										
ELSE										
UnitPriceToUse := UnitPrice;										
"Line.VALIDATE(""Customer Price"",UnitPriceToUse);"										
"Line.VALIDATE(""Item Disc. Group"");"										
Line.MODIFY(TRUE);										
UNTIL Line.NEXT = 0;										
Line.SETRANGE(Number);										
"Line.SETRANGE(""Variant Code"");"										
"Line.SETRANGE(""Unit of Measure"");"										
END;										
UNTIL Line.NEXT = 0;										
										
"IF (Transaction.""Customer No."" <> '') OR (Transaction.""Member Price Group"" <> '') OR (Transaction.""Customer Disc. Group"" <> '')"										
THEN										
IF Line.FIND('-') THEN REPEAT										
"IF NOT PosFuncProfile.""Disable Customer Prices"" THEN BEGIN"										
										
"POSPriceUtil.GetTransDisc(Line,FALSE,DT.DiscType::""Periodic Disc."");"										
"//IF POSPriceUtil.IsPerDiscType(Line,DT.""Periodic Disc. Type""::""Mix&Match"") AND (Line.""Periodic Disc. %"" <> 0) THEN BEGIN"										
"IF POSPriceUtil.IsPerDiscType(Line,DT.""Periodic Disc. Type""::""Mix&Match"") THEN BEGIN"										
"IF (Line.Quantity > Line.""Quantity Discounted"") AND (Line.""Customer Price"" < Line.Price) AND"										
"(Line.""Customer Price"" <> 0) THEN BEGIN"										
"Line.""Customer Qty Used"" := Line.Quantity - Line.""Quantity Discounted"";"										
										
"CustDiscPer := (1 - Line.""Customer Price"" / Line.Price) * 100 * Line.""Customer Qty Used"" / Line.Quantity;"										
"POSPriceUtil.InsertTransDiscPercent(Line,CustDiscPer,DT.DiscType::Customer,'');"										
										
Line.CalcPrices;										
Line.MODIFY;										
Line.ReCalcTotalDiscount;										
END;										
END										
ELSE BEGIN										
"//        IF (Line.""Customer Price"" <> 0) AND //LS7.1-13"										
"IF ((Line.""Customer Price"" <> 0) OR (LineDiscount = 100)) AND //LS7.1-13"										
"(Line.""Customer Price"" < Line.Price * (100 - Line.""Periodic Disc. %"") / 100) THEN BEGIN"										
"IF Line.""Periodic Disc. %"" <> 0 THEN BEGIN"										
										
"POSPriceUtil.InsertTransDiscPercent(Line,0,DT.DiscType::""Periodic Disc."",'');"										
										
"Line.""Quantity Discounted"" := 0;"										
Line.MODIFY;										
Line.UpdatePerDiscInfoLine;										
END;										
"Line.""Customer Qty Used"" := Line.Quantity;"										
										
"CustDiscPer := (1 - Line.""Customer Price"" / Line.Price) * 100;"										
"POSPriceUtil.InsertTransDiscPercent(Line,CustDiscPer,DT.DiscType::Customer,'');"										
										
Line.CalcPrices;										
Line.MODIFY;										
Line.ReCalcTotalDiscount;										
END;										
END;										
Line.MODIFY;										
END;										
UNTIL Line.NEXT = 0;										
END;										
										
PROCEDURE Suspend@1(VAR SlipNumber@1000 : Code[20];POSTransaction@1001 : Record 99008980;VAR PaymentSlip@1200070004 : Code[20];VAR t	mpP	osI	te	mTr	ansLines@1200070012 : TEMPORARY Record 99008981;VAR LastSlipNo@1100409002 : Code[20]);					
VAR										
POSTransaction2@1002 : Record 99008980;										
SuspPOSTransaction@1003 : Record 99008980;										
TransLine@1004 : Record 99008981;										
SuspTransLine@1005 : Record 99008981;										
InfoEntry@1006 : Record 99008982;										
DataEntry@1200070001 : Record 99001558;										
tmpPaymentTransLine@1200070005 : TEMPORARY Record 99008981;										
tmpInfoEntry@1200070009 : TEMPORARY Record 99008982;										
tmpDataEntry@1200070010 : TEMPORARY Record 99001558;										
SalesType@1200070007 : Record 10001439;										
InfoEntry2@1200070013 : Record 99008982;										
DataEntry2@1200070011 : Record 99001558;										
totAmount@1200070006 : Decimal;										
LineNo@1200070008 : Integer;										
TransLine2@1100409000 : Record 99008981;										
InsertSuspLine@1100409001 : Boolean;										
TrainingActive@1100409003 : Boolean;										
PaymentPOSTransaction@1100409004 : Record 99008980;										
BEGIN										
//Suspend										
ClearTransBenefitBuffer;										
										
TransLine.RESET;										
"TransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",""Entry Status"");"										
"TransLine.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
"TransLine.SETRANGE(""Entry Type"",TransLine.""Entry Type""::Item);"										
"TransLine.SETRANGE(""Entry Status"",TransLine.""Entry Status""::"" "");"										
"TransLine.SETRANGE(""Benefit Item"",TRUE);"										
IF TransLine.FIND('-') THEN										
REPEAT										
"IF TransLine2.GET(POSTransaction.""Receipt No."",TransLine.""Line No."") THEN"										
TransLine2.VoidLine;										
UNTIL TransLine.NEXT = 0;										
										
totAmount := 0;										
tmpPaymentTransLine.DELETEALL;										
tmpInfoEntry.DELETEALL;										
tmpDataEntry.DELETEALL;										
PaymentSlip := '';										
"IF NOT PosFuncProfile.""TS Susp./Retrieve"" THEN BEGIN"										
SuspPOSTransaction.TRANSFERFIELDS(POSTransaction);										
IF SlipNumber <> '' THEN										
"SuspPOSTransaction.""Receipt No."" := SlipNumber"										
ELSE										
"SuspPOSTransaction.""Receipt No."" := POSTransaction.""Receipt No."";"										
"SuspPOSTransaction.""POS Terminal No."" := '0';"										
"SuspPOSTransaction.""Retrieved from Receipt No."" := POSTransaction.""Retrieved from Receipt No."";"										
"SuspPOSTransaction.""Retrieved from Store No."" := POSTransaction.""Retrieved from Store No."";"										
"SuspPOSTransaction.""Retrieved from POS Term. No."" := POSTransaction.""Retrieved from POS Term. No."";"										
"SuspPOSTransaction.""Retrieved from Trans. No."" := POSTransaction.""Retrieved from Trans. No."";"										
"SuspPOSTransaction.""Entry Status"" := SuspPOSTransaction.""Entry Status""::Suspended;"										
										
TransLine.RESET;										
"TransLine.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
IF TransLine.FIND('-') THEN										
REPEAT										
InsertSuspLine := FALSE;										
"IF TransLine.""Entry Type"" <> TransLine.""Entry Type""::Payment THEN BEGIN"										
"SuspTransLine.TRANSFERFIELDS(TransLine,TRUE);"										
"SuspTransLine.""Receipt No."" := SuspPOSTransaction.""Receipt No."";"										
"SuspTransLine.""POS Terminal No."" := SuspPOSTransaction.""POS Terminal No."";"										
InsertSuspLine := TRUE;										
END										
ELSE BEGIN										
tmpPaymentTransLine.TRANSFERFIELDS(TransLine);										
tmpPaymentTransLine.INSERT;										
"IF tmpPaymentTransLine.""Entry Status"" = tmpPaymentTransLine.""Entry Status""::"" "" THEN"										
totAmount += tmpPaymentTransLine.Amount;										
END;										
"IF (TransLine.""Entry Type"" = TransLine.""Entry Type""::Item) OR"										
"((TransLine.""Entry Type"" = TransLine.""Entry Type""::IncomeExpense) AND"										
"(TransLine.""Parent Transaction Doc. No."" <> '')) THEN BEGIN"										
tmpPosItemTransLines := TransLine;										
tmpPosItemTransLines.INSERT;										
END;										
"TransLine2.GET(TransLine.""Receipt No."",TransLine.""Line No."");"										
TransLine2.DELETE;										
IF InsertSuspLine THEN										
SuspTransLine.INSERT;										
UNTIL TransLine.NEXT = 0;										
										
"InfoEntry.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
IF InfoEntry.FIND('-') THEN REPEAT										
"IF tmpPaymentTransLine.GET(POSTransaction.""Receipt No."",InfoEntry.""Line No."") THEN BEGIN"										
tmpInfoEntry := InfoEntry;										
tmpInfoEntry.INSERT;										
InfoEntry.DELETE;										
END;										
UNTIL InfoEntry.NEXT = 0;										
										
"DataEntry.SETCURRENTKEY(""Created by Receipt No."");"										
"DataEntry.SETRANGE(""Created by Receipt No."",POSTransaction.""Receipt No."");"										
IF DataEntry.FIND('-') THEN										
REPEAT										
"IF tmpPaymentTransLine.GET(POSTransaction.""Receipt No."",DataEntry.""Created by Line No."") THEN BEGIN"										
tmpDataEntry := DataEntry;										
tmpDataEntry.INSERT;										
END;										
UNTIL DataEntry.NEXT = 0;										
										
"DataEntry.SETCURRENTKEY(""Applied by Receipt No."");"										
"DataEntry.SETRANGE(""Applied by Receipt No."",POSTransaction.""Receipt No."");"										
IF DataEntry.FIND('-') THEN										
REPEAT										
"IF tmpPaymentTransLine.GET(POSTransaction.""Receipt No."",DataEntry.""Applied by Line No."") THEN BEGIN"										
tmpDataEntry := DataEntry;										
tmpDataEntry.INSERT;										
END;										
UNTIL DataEntry.NEXT = 0;										
										
IF totAmount <> 0 THEN BEGIN										
//Create Payment POS Transaction Header										
"IF POSTransaction.""Entry Status"" = POSTransaction.""Entry Status""::Training THEN"										
TrainingActive := TRUE;										
										
"//LS7.1-03    PaymentSlip := InsertTmpTrans(LastSlipNo,'','',0,TrainingActive);"										
"PaymentSlip := InsertTmpTrans(LastSlipNo,'','',0,TrainingActive,'');  //LS7.1-03"										
SELECTLATESTVERSION;										
PaymentPOSTransaction.GET(PaymentSlip);										
"PaymentPOSTransaction.TRANSFERFIELDS(POSTransaction,FALSE);"										
"PaymentPOSTransaction.""Receipt No."" := PaymentSlip;"										
PaymentPOSTransaction.MODIFY;										
										
"SalesType.GET(SuspPOSTransaction.""Sales Type"");"										
"SuspTransLine.SETRANGE(""Receipt No."",SuspPOSTransaction.""Receipt No."");"										
IF SuspTransLine.FINDLAST THEN;										
SuspTransLine.INIT;										
"SuspTransLine.""Receipt No."" := SuspPOSTransaction.""Receipt No."";"										
"SuspTransLine.""Line No."" += 10000;"										
"SuspTransLine.""Parent Line"" := SuspTransLine.""Line No."";"										
"SuspTransLine.""Store No."" := SuspPOSTransaction.""Store No."";"										
"SuspTransLine.""POS Terminal No."" := SuspPOSTransaction.""POS Terminal No."";"										
"SuspTransLine.""Entry Type"" := SuspTransLine.""Entry Type""::IncomeExpense;"										
"SuspTransLine.VALIDATE(Number,SalesType.""Prepayment Account No."");"										
"SuspTransLine.VALIDATE(Amount,-totAmount);"										
SuspTransLine.InsertLine;										
"SuspTransLine.Description := STRSUBSTNO(Text261,TODAY);"										
"SuspTransLine.""Parent Transaction Doc. No."" := POSTransaction.""Receipt No."";"										
SuspTransLine.MODIFY;										
										
tmpPosItemTransLines := SuspTransLine;										
tmpPosItemTransLines.INSERT;										
										
LineNo := 10000;										
TransLine.INIT;										
"TransLine.""Receipt No."" := PaymentSlip;"										
"TransLine.""Line No."" := LineNo;"										
"TransLine.""Parent Line"" := LineNo;"										
"TransLine.""Store No."" := POSTransaction.""Store No."";"										
"TransLine.""POS Terminal No."" := POSTransaction.""POS Terminal No."";"										
"TransLine.""Entry Type"" := TransLine.""Entry Type""::IncomeExpense;"										
"TransLine.VALIDATE(Number,SalesType.""Prepayment Account No."");"										
"TransLine.VALIDATE(Amount,totAmount);"										
TransLine.InsertLine;										
"TransLine.Description := STRSUBSTNO(Text261,TODAY);"										
TransLine.MODIFY;										
IF tmpPaymentTransLine.FINDSET THEN REPEAT										
LineNo += 10000;										
TransLine := tmpPaymentTransLine;										
"TransLine.""Receipt No."" := PaymentSlip;"										
"TransLine.""Line No."" := LineNo;"										
"TransLine.""Parent Line"" := LineNo;"										
TransLine.INSERT;										
										
InfoEntry.RESET;										
"tmpInfoEntry.SETRANGE(""Line No."",tmpPaymentTransLine.""Line No."");"										
IF tmpInfoEntry.FIND('-') THEN REPEAT										
InfoEntry := tmpInfoEntry;										
"InfoEntry.""Receipt No."" := PaymentSlip;"										
"InfoEntry.""Line No."" := TransLine.""Line No."";"										
InfoEntry.INSERT;										
UNTIL tmpInfoEntry.NEXT = 0;										
										
DataEntry.RESET;										
"tmpDataEntry.SETRANGE(""Created by Line No."",tmpPaymentTransLine.""Line No."");"										
IF tmpDataEntry.FINDSET THEN REPEAT										
DataEntry := tmpDataEntry;										
"DataEntry2.""Created by Receipt No."" := PaymentSlip;"										
"DataEntry.""Created by Line No."" := TransLine.""Line No."";"										
DataEntry.MODIFY;										
UNTIL tmpDataEntry.NEXT = 0;										
										
DataEntry.RESET;										
"tmpDataEntry.SETRANGE(""Applied by Line No."",tmpPaymentTransLine.""Line No."");"										
IF tmpDataEntry.FINDSET THEN REPEAT										
DataEntry := tmpDataEntry;										
"DataEntry2.""Applied by Receipt No."" := PaymentSlip;"										
"DataEntry.""Applied by Line No."" := TransLine.""Line No."";"										
DataEntry.MODIFY;										
UNTIL tmpDataEntry.NEXT = 0;										
UNTIL tmpPaymentTransLine.NEXT = 0;										
END;										
POSTransaction.DELETE;										
SuspPOSTransaction.INSERT;										
"SlipNumber := SuspPOSTransaction.""Receipt No."";"										
END										
ELSE BEGIN										
//Transaction Server.										
TransLine.RESET;										
"TransLine.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
"TransLine.SETRANGE(""Entry Type"",TransLine.""Entry Type""::Payment);"										
IF TransLine.FIND('-') THEN										
REPEAT										
"IF TransLine.""Entry Type"" = TransLine.""Entry Type""::Payment THEN BEGIN"										
tmpPaymentTransLine.TRANSFERFIELDS(TransLine);										
tmpPaymentTransLine.INSERT;										
"IF tmpPaymentTransLine.""Entry Status"" = tmpPaymentTransLine.""Entry Status""::"" "" THEN"										
totAmount += tmpPaymentTransLine.Amount;										
END;										
"IF (TransLine.""Entry Type"" = TransLine.""Entry Type""::Item) OR"										
"((TransLine.""Entry Type"" = TransLine.""Entry Type""::IncomeExpense) AND (TransLine.""Parent Transaction Doc. No."""										
<> '')) THEN BEGIN										
tmpPosItemTransLines := TransLine;										
tmpPosItemTransLines.INSERT;										
END;										
UNTIL TransLine.NEXT = 0;										
										
IF totAmount <> 0 THEN BEGIN										
TransLine.DELETEALL;										
"SalesType.GET(POSTransaction.""Sales Type"");"										
"TransLine.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
IF TransLine.FIND('+') THEN;										
TransLine.INIT;										
"TransLine.""Line No."" += 10000;"										
"TransLine.""Parent Line"" := TransLine.""Line No."";"										
"TransLine.""Store No."" := POSTransaction.""Store No."";"										
"TransLine.""POS Terminal No."" := POSTransaction.""POS Terminal No."";"										
"TransLine.""Entry Type"" := TransLine.""Entry Type""::IncomeExpense;"										
"TransLine.VALIDATE(Number,SalesType.""Prepayment Account No."");"										
"TransLine.VALIDATE(Amount,-totAmount);"										
TransLine.InsertLine;										
"TransLine.Description := STRSUBSTNO(Text261,TODAY);"										
"TransLine.""Parent Transaction Doc. No."" := LastSlipNo;"										
TransLine.MODIFY;										
tmpPosItemTransLines := TransLine;										
tmpPosItemTransLines.INSERT;										
										
POSTransaction2 := POSTransaction;										
"IF POSTransaction.""Suspend Sales Type"" <> '' THEN BEGIN  //not first time suspend with sales type"										
"POSTransaction2.""Receipt No."" := LastSlipNo;"										
LastSlipNo := INCSTR(LastSlipNo);										
END										
ELSE BEGIN										
"POSTransaction2.""Receipt No."" := INCSTR(POSTransaction2.""Receipt No."");"										
"LastSlipNo := POSTransaction2.""Receipt No."";"										
END;										
POSTransaction2.INSERT;										
LineNo := 10000;										
TransLine.RESET;										
"TransLine.""Receipt No."" := POSTransaction2.""Receipt No."";"										
"TransLine.""Line No."" := LineNo;"										
"TransLine.""Parent Line"" := LineNo;"										
"TransLine.""Store No."" := POSTransaction2.""Store No."";"										
"TransLine.""POS Terminal No."" := POSTransaction2.""POS Terminal No."";"										
"TransLine.""Entry Type"" := TransLine.""Entry Type""::IncomeExpense;"										
"TransLine.VALIDATE(Number,SalesType.""Prepayment Account No."");"										
"TransLine.VALIDATE(Amount,totAmount);"										
TransLine.InsertLine;										
"TransLine.Description := STRSUBSTNO(Text261,TODAY);"										
TransLine.MODIFY;										
IF tmpPaymentTransLine.FIND('-') THEN REPEAT										
LineNo += 10000;										
TransLine := tmpPaymentTransLine;										
"TransLine.""Receipt No."" := POSTransaction2.""Receipt No."";"										
"TransLine.""Line No."" := LineNo;"										
"TransLine.""Parent Line"" := LineNo;"										
TransLine.INSERT;										
										
InfoEntry.RESET;										
"InfoEntry.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
"InfoEntry.SETRANGE(""Line No."",tmpPaymentTransLine.""Line No."");"										
IF InfoEntry.FIND('-') THEN REPEAT										
InfoEntry2 := InfoEntry;										
"InfoEntry2.""Receipt No."" := POSTransaction2.""Receipt No."";"										
"InfoEntry2.""Line No."" := TransLine.""Line No."";"										
InfoEntry2.INSERT;										
UNTIL InfoEntry.NEXT = 0;										
InfoEntry.DELETEALL;										
										
DataEntry.RESET;										
"DataEntry.SETCURRENTKEY(""Created by Receipt No."");"										
"DataEntry.SETRANGE(""Created by Receipt No."",POSTransaction.""Receipt No."");"										
"DataEntry.SETRANGE(""Created by Line No."",tmpPaymentTransLine.""Line No."");"										
IF DataEntry.FIND('-') THEN REPEAT										
DataEntry2 := DataEntry;										
"DataEntry2.""Created by Receipt No."" := POSTransaction2.""Receipt No."";"										
"DataEntry2.""Created by Line No."" := TransLine.""Line No."";"										
DataEntry2.MODIFY;										
UNTIL DataEntry.NEXT = 0;										
										
"DataEntry.SETCURRENTKEY(""Applied by Receipt No."");"										
"DataEntry.SETRANGE(""Applied by Receipt No."",POSTransaction.""Receipt No."");"										
"DataEntry.SETRANGE(""Applied by Line No."",tmpPaymentTransLine.""Line No."");"										
IF DataEntry.FIND('-') THEN REPEAT										
DataEntry2 := DataEntry;										
"DataEntry2.""Applied by Receipt No."" := POSTransaction2.""Receipt No."";"										
"DataEntry2.""Applied by Line No."" := TransLine.""Line No."";"										
DataEntry2.MODIFY;										
UNTIL DataEntry.NEXT = 0;										
UNTIL tmpPaymentTransLine.NEXT = 0;										
"PaymentSlip := POSTransaction2.""Receipt No."";"										
END;										
										
"POSTransaction.""Entry Status"" := POSTransaction.""Entry Status""::Suspended;"										
POSTransaction.MODIFY;										
"IF POSTransaction2.""Receipt No."" <> '' THEN"										
"SlipNumber := POSTransaction2.""Receipt No."""										
ELSE										
"SlipNumber := POSTransaction.""Receipt No."";"										
										
COMMIT;										
"IF TSUtil.SendPOSTrans(POSTransaction,PosFuncProfile.""Susp./Retr. Transaction"",'SEND_POSTRANS_SUSP') THEN BEGIN"										
POSTransaction.DELETE(TRUE);										
POSTransaction.INSERT;										
END;										
END;										
END;										
										
PROCEDURE RetrieveSusp@2(SlipNumber@1000 : Code[20];VAR POSTransaction@1001 : Record 99008980;VAR TSErr@1200070000 : Integer) : Bool	ean	;								
VAR										
SuspPosTransaction@1002 : Record 99008980;										
SuspTransLine@1005 : Record 99008981;										
ModifyOk@1100409000 : Boolean;										
ProcessError@1100409004 : Boolean;										
ErrorText@1100409003 : Text[1024];										
BEGIN										
//RetrieveSusp										
COMMIT;										
										
CURRENTTRANSACTIONTYPE(TRANSACTIONTYPE::Update);										
"IF PosFuncProfile.""TS Susp./Retrieve"" THEN BEGIN"										
"IF POSFuncProfileWebRequest.WebRequestActive(PosFuncProfile.""Profile ID"",'GET_POSTRANS_SUSP') THEN BEGIN"										
WebServicesClient.SetPosFuncProfile(PosFuncProfile);										
"IF NOT WebServicesClient.GetPosTrans('GET_POSTRANS_SUSP',SlipNumber,ProcessError,ErrorText) THEN"										
IF ProcessError THEN										
EXIT(FALSE);										
END ELSE BEGIN										
{  //LS7.1-07										
IF NOT SuspPosTransaction.GET(SlipNumber) THEN										
"TSUtil.GetPOSTrans(SuspPosTransaction,SlipNumber,TSErr);"										
IF TSErr = 0 THEN										
"TSUtil.GetPOSTransLines(SlipNumber,TSErr);"										
IF TSErr <> 0 THEN										
EXIT;										
}  //LS7.1-07										
//LS7.1-07-										
TSErr := 0;										
IF NOT(SuspPosTransaction.GET(SlipNumber)) THEN BEGIN										
"IF NOT(TSUtil.GetPOSTrans(SuspPosTransaction,SlipNumber,TSErr)) THEN"										
EXIT(FALSE);										
"IF NOT(TSUtil.GetPOSTransLines(SlipNumber,TSErr)) THEN"										
EXIT(FALSE);										
END;										
//LS7.1-07+										
END;										
END;										
										
IF NOT SuspPosTransaction.GET(SlipNumber) THEN										
EXIT(FALSE);										
										
"IF (TSErr <> 0) AND (POSTransaction.""POS Terminal No."" <> SuspPosTransaction.""POS Terminal No."") THEN"										
EXIT(FALSE);										
										
POSTransaction := SuspPosTransaction;										
"POSTransaction.""Trans. Date"" := TODAY;"										
"POSTransaction.""Trans Time"" := TIME;"										
"POSTransaction.""Entry Status"" := POSTransaction.""Entry Status""::"" "";"										
"IF (StoreSetup.""Store Open After Midnight"") AND (POSTransaction.""Trans Time"" <= StoreSetup.""Store Open to"") THEN"										
"POSTransaction.""Trans. Date"" := CALCDATE('<-1D>',POSTransaction.""Trans. Date"");"										
										
"POSTransaction.""Store No."" := POSSESSION.StoreNo;"										
"POSTransaction.""POS Terminal No."" := POSSESSION.TerminalNo;"										
"POSTransaction.""Staff ID"" := POSSESSION.StaffID;"										
										
POSTransaction.MODIFY;										
										
SuspTransLine.RESET;										
"SuspTransLine.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
IF SuspTransLine.FIND('-') THEN BEGIN										
REPEAT										
ModifyOk := FALSE;										
"IF (SuspTransLine.""Store No."" <> POSSESSION.StoreNo) THEN BEGIN"										
"SuspTransLine.""Store No."" := POSSESSION.StoreNo;"										
ModifyOk := TRUE;										
END;										
"IF (SuspTransLine.""POS Terminal No."" <> POSSESSION.TerminalNo) THEN BEGIN"										
"SuspTransLine.""POS Terminal No."" := POSSESSION.TerminalNo;"										
ModifyOk := TRUE;										
END;										
IF ModifyOk THEN										
SuspTransLine.MODIFY;										
										
UNTIL SuspTransLine.NEXT = 0;										
END;										
										
"IF PosFuncProfile.""TS Susp./Retrieve"" THEN"										
TSUtil.DeletePOSTrans(SlipNumber);										
										
"IF POSTransaction.""Member Card No."" <> '' THEN"										
"IF NOT LoadMemberInfo(POSTransaction.""Member Card No."") THEN"										
EXIT(FALSE);										
										
SkipIncrementSlipno := TRUE;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE CopyToVoidedTrans@28(SlipHeader@1000 : Record 99008980);										
VAR										
SlipLine@1005 : Record 99008981;										
InfoCodeEntry@1004 : Record 99008982;										
VoidedHeader@1003 : Record 99008990;										
VoidedLine@1002 : Record 99008991;										
VoidedInfoCodeEntry@1001 : Record 99008992;										
BEGIN										
//CopyToVoidedTrans										
"SlipHeader.GET(SlipHeader.""Receipt No."");"										
VoidedHeader.TRANSFERFIELDS(SlipHeader);										
VoidedHeader.INSERT(TRUE);										
"SlipLine.SETRANGE(""Receipt No."",SlipHeader.""Receipt No."");"										
"SlipLine.SETRANGE(""Entry Status"",SlipLine.""Entry Status""::"" "");"										
IF SlipLine.FIND('-') THEN REPEAT										
SlipLine.CALCFIELDS(Picture);										
VoidedLine.TRANSFERFIELDS(SlipLine);										
VoidedLine.INSERT(TRUE);										
SlipLine.VoidApplInfo(FALSE);										
UNTIL SlipLine.NEXT = 0;										
										
"InfoCodeEntry.SETRANGE(""Receipt No."",SlipHeader.""Receipt No."");"										
IF InfoCodeEntry.FIND('-') THEN REPEAT										
VoidedInfoCodeEntry.TRANSFERFIELDS(InfoCodeEntry);										
VoidedInfoCodeEntry.INSERT(TRUE);										
UNTIL InfoCodeEntry.NEXT = 0;										
END;										
										
PROCEDURE LoadItem@3(VAR Line@1000 : Record 99008981) : Boolean;										
VAR										
Barcode@1001 : Record 99001451;										
Item@1100409001 : Record 27;										
BarcodeMask@1100409000 : Record 99001459;										
BcUtil@1100409002 : Codeunit 99001450;										
POSPriceUtil@1100409003 : Codeunit 99008906;										
DT@1100409004 : Record 99008943;										
ItemStatusLink@1100409005 : Record 10001404;										
BEGIN										
//LoadItem										
IF Barcode.GET(Line.Number) THEN BEGIN										
"IF Item.GET(Barcode.""Item No."") THEN BEGIN"										
"Line.""Barcode No."" := Line.Number;"										
"Line.Number := Barcode.""Item No."";"										
"Line.""Variant Code"" := Barcode.""Variant Code"";"										
"Line.""Unit of Measure"" := Barcode.""Unit of Measure Code"";"										
"Line.""Scale Item"" := Item.""Scale Item"";"										
"Line.""System-Block Manual Discount"" := Item.""No Discount Allowed"";"										
Line.Description := Barcode.Description;										
"IF BOUtil.IsBlockManualDiscount(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Block Manual Discount"" := TRUE;"										
"IF BOUtil.IsBlockPromotionDiscount(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Block Promotion Price"" := TRUE;"										
"IF BOUtil.IsBlockOfferDiscount(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Exclude from Offers"" := TRUE;"										
"IF BOUtil.IsBlockManualPriceChange(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Unchangable Price"" := TRUE;"										
EXIT(TRUE)										
END ELSE										
EXIT(FALSE);										
END ELSE										
IF NOT Item.GET(Line.Number) THEN BEGIN										
"IF BcUtil.FindBarcodeMask(Line.Number,BarcodeMask) AND"										
(BarcodeMask.Type = BarcodeMask.Type::Item) THEN BEGIN										
BarcodeMask.CALCFIELDS(Length);										
IF (STRLEN(Line.Number) = (BarcodeMask.Length + STRLEN(BarcodeMask.Prefix))) THEN BEGIN										
"ProcessMaskSegments(Line.Number,BarcodeMask);"										
IF BarcItem ='' THEN										
EXIT(FALSE);										
Item.GET(BarcItem);										
"Line.""Barcode No."" := Line.Number;"										
Line.Number := BarcItem;										
IF BarcUOM = '' THEN										
"BarcUOM := Item.""Sales Unit of Measure"";"										
"Line.""Unit of Measure"" := BarcUOM;"										
IF BarcQty <> 0 THEN BEGIN										
Line.Quantity := BarcQty;										
"Line.""Quantity in Barcode"" := TRUE;"										
END;										
IF BarcPrice <> 0 THEN BEGIN										
Line.Amount := BarcPrice;										
"Line.""Price in Barcode"" := TRUE;"										
END;										
IF BarcLineDiscount <> 0 THEN BEGIN										
										
"POSPriceUtil.InsertTransDiscPercent(Line,BarcLineDiscount,DT.DiscType::Line,'');"										
END;										
										
IF BarcSerialNo <> '' THEN										
"Line.""Serial No."" := BarcSerialNo;"										
IF BarcLotNo <> '' THEN										
"Line.""Lot No."" := BarcLotNo;"										
END ELSE										
EXIT(FALSE);										
END ELSE										
EXIT(FALSE);										
END;										
										
"IF Item.""Scale Item"" THEN BEGIN"										
"Line.""Scale Item"" := Item.""Scale Item"";"										
"Line.""Unit of Measure"" := Item.""Sales Unit of Measure"";"										
END;										
										
"Line.""System-Block Manual Discount"" := Item.""No Discount Allowed"";"										
"IF BOUtil.IsBlockManualDiscount(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Block Manual Discount"" := TRUE;"										
"IF BOUtil.IsBlockPromotionDiscount(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Block Promotion Price"" := TRUE;"										
"IF BOUtil.IsBlockOfferDiscount(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Exclude from Offers"" := TRUE;"										
"IF BOUtil.IsBlockManualPriceChange(Item.""No."",'',Line.""Variant Code"",StoreSetup.""No."",StoreSetup.""Location Code"",TODAY,"										
ItemStatusLink) THEN										
"Line.""System-Unchangable Price"" := TRUE;"										
EXIT(TRUE);										
END;										
										
PROCEDURE FindVariant@12(VAR PosVariant@1000 : Record 5401;VAR ItemNo@1001 : Code[20]) : Integer;										
BEGIN										
//FindVariant										
"PosVariant.SETCURRENTKEY(""Item No."");"										
"PosVariant.SETRANGE(""Item No."",ItemNo);"										
IF PosVariant.FIND('-') THEN;										
EXIT(PosVariant.COUNT);										
END;										
										
PROCEDURE ProcessMaskSegments@22(Barcode@1000 : Text[22];Mask@1001 : Record 99001459) : Boolean;										
VAR										
Segment@1002 : Record 99001480;										
BarcodeRec@1100409004 : Record 99001451;										
Item@1100409003 : Record 27;										
Customer@1100409002 : Record 18;										
Staff@1100409001 : Record 99001461;										
lDataEntry@1100409000 : Record 99001557;										
tmpInt@1009 : Integer;										
Chk@1011 : Integer;										
Char@1012 : Text[1];										
Pos@1100409006 : Integer;										
tmpCode@1100409005 : Code[22];										
BEGIN										
//ProcessMaskSegments										
CLEAR(BarcQty);										
CLEAR(BarcPrice);										
CLEAR(BarcItem);										
CLEAR(BarcUOM);										
CLEAR(BarcEANOrg);										
CLEAR(BarcCustomer);										
CLEAR(BarcQtySpec);										
CLEAR(BarcPriceSpec);										
CLEAR(BarcCoupRef);										
CLEAR(BarcSerialNo);										
CLEAR(BarcLotNo);										
CLEAR(BarcLineDiscount);										
Pos := STRLEN(Mask.Prefix) + 1;										
"Segment.SETRANGE(Segment.""Mask Entry No."",Mask.""Entry No."");"										
IF Segment.FIND('-') THEN REPEAT										
CASE Segment.Type OF										
Segment.Type::Quantity :										
BEGIN										
"IF EVALUATE(BarcQty,COPYSTR(Barcode,Pos,Segment.Length)) THEN"										
BEGIN										
"BarcQty := BarcQty / POWER(10,Segment.Decimals);"										
BarcQtySpec := TRUE;										
END;										
END;										
Segment.Type::Price :										
BEGIN										
"IF EVALUATE(BarcPrice,COPYSTR(Barcode,Pos,Segment.Length)) THEN"										
BEGIN										
"BarcPrice := BarcPrice / POWER(10,Segment.Decimals);"										
BarcPriceSpec := TRUE;										
END;										
END;										
"Segment.Type::""Lot No."" :"										
BEGIN										
"BarcLotNo := COPYSTR(Barcode,Pos,Segment.Length);"										
END;										
"Segment.Type::""Serial No."" :"										
BEGIN										
"BarcSerialNo := COPYSTR(Barcode,Pos,Segment.Length);"										
END;										
"Segment.Type::""Item No."", Segment.Type::""Number Series"" :"										
BEGIN										
"tmpCode := COPYSTR(COPYSTR(Barcode,1,Pos + Segment.Length - 1)+'0000000000000000000000',1,STRLEN(Mask.Prefix)+Mask.Length)"										
;										
IF NOT BarcodeRec.GET(tmpCode) THEN BEGIN										
IF STRLEN(tmpCode) = 13 THEN BEGIN										
"tmpCode := COPYSTR(tmpCode,1,12);"										
"Chk := 1 + STRCHECKSUM(COPYSTR(tmpCode,1,12),'131313131313');"										
"Char := SELECTSTR(Chk,'0,1,2,3,4,5,6,7,8,9');"										
tmpCode := tmpCode + Char;										
IF NOT BarcodeRec.GET(tmpCode) THEN										
CLEAR(BarcodeRec);										
END ELSE										
CLEAR(BarcodeRec);										
END;										
"IF Item.GET(BarcodeRec.""Item No."") AND NOT BarcodeRec.Blocked THEN BEGIN"										
"BarcItem := Item.""No."";"										
"BarcUOM := BarcodeRec.""Unit of Measure Code"";"										
"BarcItemGroup := COPYSTR(Barcode,Pos,Segment.Length);"										
BarcDescription := BarcodeRec.Description;										
"BarcLineDiscount := BarcodeRec.""Discount %"";"										
END;										
END;										
"Segment.Type::""EAN License No."" :"										
"BarcEANOrg := COPYSTR(Barcode,Pos,Segment.Length);"										
"Segment.Type::""Coupon reference"" :"										
"BarcCoupRef := COPYSTR(Barcode,Pos,Segment.Length);"										
Segment.Type::Customer :										
BEGIN										
"tmpCode := COPYSTR(Barcode,Pos,Segment.Length);"										
"IF Customer.GET(tmpCode) OR (EVALUATE(tmpInt,tmpCode) AND Customer.GET(FORMAT(tmpInt))) THEN"										
"BarcCustomer := Customer.""No."";"										
END;										
Segment.Type::Employee :										
BEGIN										
"tmpCode := COPYSTR(Barcode,Pos,Segment.Length);"										
IF Staff.GET(tmpCode) THEN										
BarcStaff := Staff.ID										
ELSE										
"IF Staff.GET(DELCHR(tmpCode,'<','0')) THEN"										
BarcStaff := Staff.ID;										
END;										
"Segment.Type::""Data Entry"" :"										
"//BarcDataEntry := DELCHR(COPYSTR(Barcode,Pos,Segment.Length),'<','0');  //LS7.1-09"										
//LS7.1-09 -										
BEGIN										
"BarcDataEntry := COPYSTR(Barcode,Pos,Segment.Length);"										
"lDataEntry.SETRANGE(""Barcode Mask Entry No"",Mask.""Entry No."");"										
IF lDataEntry.FINDFIRST THEN										
IF lDataEntry.Numbering = lDataEntry.Numbering::Automatic THEN										
"BarcDataEntry := DELCHR(COPYSTR(Barcode,Pos,Segment.Length),'<','0');"										
END;										
//LS7.1-09 +										
END;										
Pos := Pos + Segment.Length;										
UNTIL Segment.NEXT = 0;										
END;										
										
PROCEDURE LoadCoupon@23(VAR Line@1000 : Record 99008981;Barcode@1001 : Code[22];VAR CouponCode@10012001 : Code[22]) : Boolean;										
VAR										
BarcodeMask@1100409001 : Record 99001459;										
CouponHeader@10012000 : Record 99001621;										
PosTrans@10012002 : Record 99008980;										
BcUtil@1100409000 : Codeunit 99001450;										
BEGIN										
//LoadCoupon										
"IF BcUtil.FindBarcodeMask(Barcode,BarcodeMask) AND"										
(BarcodeMask.Type = BarcodeMask.Type::Coupon) THEN BEGIN										
										
"ProcessMaskSegments(Barcode,BarcodeMask);"										
"CouponHeader.SETCURRENTKEY(""Coupon Issuer"",""Coupon Reference No."");"										
"CouponHeader.SETRANGE(""Coupon Issuer"",BarcEANOrg);"										
"CouponHeader.SETRANGE(""Coupon Reference No."",BarcCoupRef);"										
IF NOT CouponHeader.FINDFIRST THEN										
EXIT(FALSE);										
"IF CouponHeader.Affects = CouponHeader.Affects::""Next Item Line"" THEN BEGIN"										
IF CouponCode = '' THEN BEGIN										
CouponCode := Barcode;										
EXIT(TRUE);										
END;										
CouponCode := '';										
END;										
"IF CouponHeader.""Discount Value"" <> 0 THEN"										
"BarcPrice := CouponHeader.""Discount Value"";"										
										
END ELSE BEGIN										
IF STRLEN(Barcode) > 10 THEN										
EXIT(FALSE);										
										
IF CouponHeader.GET(Barcode) THEN BEGIN										
"IF CouponHeader.Affects = CouponHeader.Affects::""Next Item Line"" THEN BEGIN"										
IF CouponCode = '' THEN BEGIN										
CouponCode := CouponHeader.Code;										
EXIT(TRUE);										
END;										
CouponCode := '';										
END;										
										
"BarcPrice := CouponHeader.""Discount Value"";"										
"BarcEANOrg := CouponHeader.""Coupon Issuer"";"										
END ELSE										
EXIT(FALSE);										
END;										
										
"IF CouponHeader.""Multiply Value"" <> 0 THEN BEGIN"										
"PosTrans.GET(Line.""Receipt No."");"										
"IF rboPriceUtil.DiscValPerValid(CouponHeader.""Multiply Value Period ID"",PosTrans.""Trans. Date"",PosTrans.""Trans Time"") THEN"										
"BarcPrice := BarcPrice * CouponHeader.""Multiply Value"";"										
END;										
										
IF (BarcPrice <> 0) THEN BEGIN										
"Line.""Barcode No."" := Barcode;"										
"Line.""Card/Customer/Coup.Item No"" := CouponHeader.""Coupon Reference No."";"										
"Line.""Coupon EAN Org."" := CouponHeader.""Coupon Issuer"";"										
"Line.""Entry Type"" := Line.""Entry Type""::Payment;"										
Line.Amount := BarcPrice;										
Line.Description := CouponHeader.Description;										
EXIT(TRUE);										
END;										
										
EXIT(FALSE);										
END;										
										
PROCEDURE GetBarcCustomer@25(Barcode@1000 : Code[22];Mask@1001 : Record 99001459) : Code[20];										
BEGIN										
//GetBarcCustomer										
"ProcessMaskSegments(Barcode,Mask);"										
EXIT(BarcCustomer);										
END;										
										
PROCEDURE GetBarcStaff@26(Barcode@1000 : Code[22];Mask@1001 : Record 99001459) : Code[20];										
BEGIN										
//GetBarcStaff										
"ProcessMaskSegments(Barcode,Mask);"										
EXIT(BarcStaff);										
END;										
										
PROCEDURE PermissionTender@21(TenderType@1000 : Record 99001462;MgrKey@1001 : Boolean;VAR MessageTxt@1002 : Text[50]) : Boolean;										
BEGIN										
//PermissionTender										
"IF NOT TenderType.""May Be Used"" THEN BEGIN"										
MessageTxt := Text036;										
EXIT(FALSE);										
END;										
"IF TenderType.""Manager Key Control"" AND NOT MgrKey THEN BEGIN"										
MessageTxt := Text037;										
EXIT(FALSE);										
END;										
EXIT(TRUE);										
END;										
										
PROCEDURE ValidateTender@20(TenderType@1000 : Record 99001462;Total@1001 : Decimal;Balance@1002 : Decimal;Payment@1003 : Decimal;Ref	und	Sal	e@	100	4 : Boolean;ManualInput@1005 : Boolean;VAR MessageTxt@1100409000 : Text) : Boolean;					
VAR										
Sign@1007 : Decimal;										
BEGIN										
//ValidateTender										
IF RefundSale THEN										
Sign := -1										
ELSE										
Sign := 1;										
"IF TenderType.""Marking Only"" AND (Payment <> 0) THEN BEGIN"										
MessageTxt := Text038;										
EXIT(FALSE);										
END;										
"IF ManualInput AND NOT TenderType.""Keyboard Entry Allowed"" THEN BEGIN"										
MessageTxt := Text039;										
EXIT(FALSE);										
END;										
"IF NOT ManualInput AND TenderType.""Keyboard Entry Required"" THEN BEGIN"										
MessageTxt := Text040;										
EXIT(FALSE);										
END;										
"IF NOT TenderType.""Return/Minus Allowed"" THEN BEGIN"										
IF Payment * Sign < 0 THEN BEGIN										
MessageTxt := Text041;										
EXIT(FALSE);										
END;										
END;										
"IF TenderType.""Max. Amount Allowed"" <> 0 THEN"										
"IF ABS(Payment) > TenderType.""Max. Amount Allowed"" THEN BEGIN"										
"MessageTxt := STRSUBSTNO(Text042,TenderType.""Max. Amount Allowed"");"										
EXIT(FALSE);										
END;										
"IF ManualInput AND (TenderType.""Max. Amount Entered"" <> 0) THEN"										
"IF ABS(Payment) > TenderType.""Max. Amount Entered"" THEN BEGIN"										
"MessageTxt := STRSUBSTNO(Text043,TenderType.""Max. Amount Entered"");"										
EXIT(FALSE);										
END;										
"IF TenderType.""Min. Amount Allowed"" <> 0 THEN"										
"IF ABS(Payment) < TenderType.""Min. Amount Allowed"" THEN BEGIN"										
"MessageTxt := STRSUBSTNO(Text044,TenderType.""Min. Amount Allowed"");"										
EXIT(FALSE);										
END;										
"IF ManualInput AND (TenderType.""Min. Amount Entered"" <> 0) THEN"										
"IF ABS(Payment) < TenderType.""Min. Amount Entered"" THEN BEGIN"										
"MessageTxt := STRSUBSTNO(Text045,TenderType.""Min. Amount Entered"");"										
EXIT(FALSE);										
END;										
IF Balance < Payment THEN BEGIN										
"IF NOT TenderType.""Overtender Allowed"" THEN BEGIN"										
MessageTxt := Text046;										
EXIT(FALSE);										
END;										
"IF TenderType.""Overtender Max. Amt."" <> 0 THEN"										
"IF TenderType.""Overtender Max. Amt."" < (Payment - Balance) THEN BEGIN"										
"MessageTxt := STRSUBSTNO(Text047,TenderType.""Overtender Max. Amt."");"										
EXIT(FALSE);										
END;										
END;										
IF Balance > Payment THEN										
"IF NOT TenderType.""Undertender Allowed"" THEN BEGIN"										
MessageTxt := Text048;										
EXIT(FALSE);										
END;										
EXIT(TRUE);										
END;										
										
PROCEDURE ValidateCustomer@9(Customer@1000 : Record 18;MgrKey@1001 : Boolean;RefundSale@1002 : Boolean;Payment@1003 : Decimal;VAR Me	ssa	geT	xt	@11	00409000 : Text) : Boolean;					
VAR										
Sign@1005 : Decimal;										
tmpCustomer@1006 : TEMPORARY Record 18;										
TsErr@1007 : Integer;										
BillToCustomer@10012000 : Record 18;										
cBalanceOverLimit@1100409001 : Decimal;										
BEGIN										
//ValidateCustomer										
"IF PosFuncProfile.""TS Customer"" THEN BEGIN"										
"IF TSUtil.GetCustomer(tmpCustomer,Customer.""No."",TsErr) THEN"										
Customer := tmpCustomer										
ELSE										
IF (TsErr <> 0) AND NOT MgrKey THEN BEGIN										
MessageTxt := Text058;										
EXIT(FALSE);										
END;										
END ELSE BEGIN										
"Customer.CALCFIELDS(""Amt. Charged On POS"");"										
"Customer.CALCFIELDS(""Amt. Charged Posted"");"										
"Customer.CALCFIELDS(""Balance (LCY)"");"										
END;										
										
"IF Customer.""Bill-to Customer No."" <> '' THEN BEGIN"										
"IF PosFuncProfile.""TS Customer"" THEN BEGIN"										
"IF TSUtil.GetCustomer(tmpCustomer,Customer.""Bill-to Customer No."",TsErr) THEN"										
BillToCustomer := tmpCustomer										
ELSE										
IF (TsErr <> 0) AND NOT MgrKey THEN BEGIN										
MessageTxt := Text058;										
EXIT(FALSE);										
END;										
END ELSE BEGIN										
"BillToCustomer.GET(Customer.""Bill-to Customer No."");"										
"BillToCustomer.CALCFIELDS(""Amt. Charged On POS"",""Amt. Charged Posted"",""Balance (LCY)"");"										
END;										
"Customer.""Other Tender in Finalizing"" := BillToCustomer.""Other Tender in Finalizing"";"										
IF BillToCustomer.Blocked <> 0 THEN BEGIN										
"MessageTxt := STRSUBSTNO(Text049,BillToCustomer.""No."");"										
EXIT(FALSE);										
END;										
//LS7.1-16  IF MgrKey THEN										
//LS7.1-16    EXIT(TRUE);										
IF RefundSale THEN										
Sign := -1										
ELSE										
Sign := 1;										
IF (Payment * Sign) <= 0 THEN										
EXIT(TRUE);										
"IF (BillToCustomer.""Credit Limit (LCY)"" <> 0) THEN BEGIN"										
{ //LS7.1-16										
"IF (BillToCustomer.""Balance (LCY)"" + Customer.""Amt. Charged On POS"" +"										
"BillToCustomer.""Amt. Charged On POS"" - Customer.""Amt. Charged Posted"" -"										
"BillToCustomer.""Amt. Charged Posted"" + Payment) > BillToCustomer.""Credit Limit (LCY)"" THEN BEGIN"										
} //LS7.1-16										
//LS7.1-16 -										
"cBalanceOverLimit := (BillToCustomer.""Balance (LCY)"" + Customer.""Amt. Charged On POS"" +"										
"BillToCustomer.""Amt. Charged On POS"" - Customer.""Amt. Charged Posted"" -"										
"BillToCustomer.""Amt. Charged Posted"" + Payment) - BillToCustomer.""Credit Limit (LCY)"";"										
IF cBalanceOverLimit > 0 THEN BEGIN										
IF NOT MgrKey THEN BEGIN										
"MessageTxt := STRSUBSTNO(Text050,Customer.""Bill-to Customer No."");"										
EXIT(FALSE);										
END;										
"//IF NOT POSGUI.PosConfirm(STRSUBSTNO(Text051,Customer.""Bill-to Customer No."",cBalanceOverLimit),FALSE) THEN BEGIN //LS7.1-2"	2									
"IF NOT POSGUI.PosConfirm(STRSUBSTNO(Text051,Customer.""Bill-to Customer No.""),FALSE) THEN BEGIN //LS7.1-22"										
"MessageTxt := STRSUBSTNO(Text050,Customer.""Bill-to Customer No."");"										
EXIT(FALSE);										
END;										
//LS7.1-16 +										
"//LS7.1-16      MessageTxt := STRSUBSTNO(Text050,Customer.""No."");"										
//LS7.1-16      EXIT(FALSE);										
END;										
END;										
EXIT(TRUE);										
END;										
										
IF Customer.Blocked <> 0 THEN BEGIN										
"MessageTxt := STRSUBSTNO(Text049,Customer.""No."");"										
EXIT(FALSE);										
END;										
//LS7.1-16 IF MgrKey THEN										
//LS7.1-16  EXIT(TRUE);										
IF RefundSale THEN										
Sign := -1										
ELSE										
Sign := 1;										
IF (Payment * Sign) <= 0 THEN										
EXIT(TRUE);										
"IF (Customer.""Credit Limit (LCY)"" <> 0) THEN BEGIN"										
"//LS7.1-16  IF (Customer.""Balance (LCY)"" + Customer.""Amt. Charged On POS"" - Customer.""Amt. Charged Posted"" + Payment)"										
"//LS7.1-16          > Customer.""Credit Limit (LCY)"" THEN BEGIN"										
//LS7.1-16 -										
"cBalanceOverLimit := (Customer.""Balance (LCY)"" + Customer.""Amt. Charged On POS"" - Customer.""Amt. Charged Posted"" + Payment) - Cu"	sto	mer	"."""	Cre	"dit Limit (LCY)"";"					
IF cBalanceOverLimit > 0 THEN BEGIN										
IF NOT MgrKey THEN BEGIN										
"MessageTxt := STRSUBSTNO(Text050,Customer.""No."");"										
EXIT(FALSE);										
END;										
"IF NOT POSGUI.PosConfirm(STRSUBSTNO(Text051,Customer.""No."",cBalanceOverLimit),FALSE) THEN BEGIN"										
"MessageTxt := STRSUBSTNO(Text050,Customer.""No."");"										
EXIT(FALSE);										
END;										
//LS7.1-16 +										
"//LS7.1-16     MessageTxt := STRSUBSTNO(Text050,Customer.""No."");"										
//LS7.1-16     EXIT(FALSE);										
END;										
END;										
//POSGUI.POSMessage('Cliente no tiene credito');										
EXIT(TRUE);										
END;										
										
PROCEDURE ZeroPad@8(Str@1000 : Text[30];Len@1001 : Integer) : Text[30];										
VAR										
WrkString@1100409000 : Text[250];										
BEGIN										
//ZeroPad										
"WrkString := PADSTR('0',Len,'0') + Str;"										
"Str := COPYSTR(WrkString,STRLEN(WrkString) - Len + 1,Len);"										
EXIT(Str);										
END;										
										
PROCEDURE IsPurgeOverDue@16() : Boolean;										
VAR										
Trans@1000 : Record 99001472;										
RefDate@1003 : Date;										
PosTrans@1200070000 : Record 99008980;										
SaleType@1200070001 : Record 10001439;										
BEGIN										
//IsPurgeOverDue										
										
"SaleType.SETFILTER(""Days Open Trans. Exist"",'>%1',0);"										
//IF SaleType.FINDSET THEN										
IF SaleType.FIND('-') THEN										
REPEAT										
"PosTrans.SETCURRENTKEY(""Store No."",""Sales Type"",""Table No."",""Transaction Type"",""Trans. Date"");"										
"PosTrans.SETRANGE(""Store No."",POSSESSION.StoreNo);"										
"PosTrans.SETRANGE(""Sales Type"",SaleType.Code);"										
"PosTrans.SETRANGE(""Trans. Date"",0D,TODAY-SaleType.""Days Open Trans. Exist""-SaleType.""Trans. Delete Reminder"");"										
"PosTrans.SETRANGE(""Transaction Type"",PosTrans.""Transaction Type""::Sales);"										
IF PosTrans.FINDFIRST THEN										
EXIT(TRUE);										
UNTIL SaleType.NEXT()=0;										
										
"IF PosFuncProfile.""Days Transactions Exists"" <> 0 THEN BEGIN"										
										
RefDate := TODAY;										
Trans.RESET;										
"Trans.SETCURRENTKEY(""Store No."",Date);"										
"Trans.SETRANGE(""Store No."",POSSESSION.StoreNo);"										
"Trans.SETRANGE(Date,0D,RefDate-PosFuncProfile.""Days Transactions Exists""-PosFuncProfile.""Trans. Delete Reminder"");"										
EXIT(Trans.FINDFIRST);										
END;										
END;										
										
PROCEDURE Purge@15();										
VAR										
Trans@1000 : Record 99001472;										
VoidedTrans@1001 : Record 99008990;										
CardEntries@1002 : Record 99008987;										
RefDate@1003 : Date;										
POSLog@1200070000 : Record 99008945;										
PosTrans@1200070002 : Record 99008980;										
SaleType@1200070001 : Record 10001439;										
BEGIN										
//Purge										
										
"SaleType.SETFILTER(""Days Open Trans. Exist"",'>%1',0);"										
										
//IF SaleType.FINDSET THEN										
IF SaleType.FIND('-') THEN										
REPEAT										
"PosTrans.SETCURRENTKEY(""Store No."",""Sales Type"",""Table No."",""Transaction Type"",""Trans. Date"");"										
"PosTrans.SETRANGE(""Store No."",POSSESSION.StoreNo);"										
"PosTrans.SETRANGE(""Sales Type"",SaleType.Code);"										
"PosTrans.SETRANGE(""Trans. Date"",0D,TODAY-SaleType.""Days Open Trans. Exist"");"										
"PosTrans.SETRANGE(""Transaction Type"",PosTrans.""Transaction Type""::Sales);"										
IF PosTrans.FIND('-') THEN										
REPEAT										
PosTrans.CALCFIELDS(PosTrans.Payment);										
IF PosTrans.Payment = 0 THEN										
PosTrans.DELETE(TRUE);										
UNTIL PosTrans.NEXT() = 0;										
UNTIL SaleType.NEXT()=0;										
										
										
"IF PosFuncProfile.""Days Transactions Exists"" > 0 THEN BEGIN"										
										
RefDate := TODAY;										
Trans.RESET;										
"Trans.SETCURRENTKEY(""Store No."",Date);"										
"Trans.SETRANGE(""Store No."",POSSESSION.StoreNo);"										
"Trans.SETRANGE(Date,0D,RefDate - PosFuncProfile.""Days Transactions Exists"");"										
Trans.DELETEALL(TRUE);										
										
"VoidedTrans.SETCURRENTKEY(Replicated,""Trans. Date"");"										
"VoidedTrans.SETRANGE(""Trans. Date"",0D,RefDate - PosFuncProfile.""Days Transactions Exists"");"										
VoidedTrans.DELETEALL(TRUE);										
										
"CardEntries.SETCURRENTKEY(Replicated,Date);"										
"CardEntries.SETRANGE(Date,0D,RefDate - PosFuncProfile.""Days Transactions Exists"");"										
CardEntries.DELETEALL(TRUE);										
										
POSLog.RESET;										
"POSLog.SETRANGE(""Entry Date"",0D,RefDate - PosFuncProfile.""Days Transactions Exists"");"										
"POSLog.SETRANGE(""Store No."",StoreSetup.""No."");"										
"POSLog.SETRANGE(""Terminal No."",PosTerminal.""No."");"										
POSLog.DELETEALL(TRUE);										
END;										
										
COMMIT;										
END;										
										
PROCEDURE RunObject@7(ObjSetup@1000 : Record 99008926;Source@1001 : Code[10];Data1@1002 : Text[30];Data2@1003 : Text[30]);										
BEGIN										
//RunObject										
"POSSESSION.SetValue('RUNOBJ_SRC',Source);"										
"POSSESSION.SetValue('RUNOBJ_DATA1',Data1);"										
"POSSESSION.SetValue('RUNOBJ_DATA2',Data2);"										
										
IF ObjSetup.Modal THEN										
"CASE ObjSetup.""Object Type"" OF"										
"ObjSetup.""Object Type""::Page :"										
"PAGE.RUNMODAL(ObjSetup.""Object ID"");"										
"ObjSetup.""Object Type""::Report :"										
"REPORT.RUNMODAL(ObjSetup.""Object ID"");"										
"ObjSetup.""Object Type""::XMLport :"										
"XMLPORT.RUN(ObjSetup.""Object ID"");"										
"ObjSetup.""Object Type""::Codeunit :"										
"CODEUNIT.RUN(ObjSetup.""Object ID"");"										
END ELSE										
"CASE ObjSetup.""Object Type"" OF"										
"ObjSetup.""Object Type""::Page :"										
"PAGE.RUN(ObjSetup.""Object ID"");"										
"ObjSetup.""Object Type""::Report :"										
"REPORT.RUN(ObjSetup.""Object ID"");"										
"ObjSetup.""Object Type""::XMLport :"										
"XMLPORT.RUN(ObjSetup.""Object ID"");"										
"ObjSetup.""Object Type""::Codeunit :"										
"CODEUNIT.RUN(ObjSetup.""Object ID"");"										
END;										
END;										
										
PROCEDURE RoundAmount@29(Dec@1000 : Decimal) : Decimal;										
BEGIN										
//RoundAmount										
"EXIT(ROUND(Dec,PosFuncProfile.""Amount Rounding to""));"										
END;										
										
PROCEDURE RoundTender@31(TenderType@1000 : Record 99001462;Amount@1001 : Decimal) : Decimal;										
BEGIN										
//RoundTender										
IF (TenderType.Rounding <> TenderType.Rounding::None) AND										
"(TenderType.""Rounding To"" <> 0) THEN BEGIN"										
IF Amount < 0 THEN										
IF TenderType.Rounding = TenderType.Rounding::Up THEN										
TenderType.Rounding := TenderType.Rounding::Down										
ELSE										
IF TenderType.Rounding = TenderType.Rounding::Down THEN										
TenderType.Rounding := TenderType.Rounding::Up;										
"EXIT(ROUND(Amount,TenderType.""Rounding To"",SELECTSTR(TenderType.Rounding,'=,>,<')));"										
END;										
EXIT(RoundAmount(Amount));										
END;										
										
PROCEDURE FormatAmount@57(Dec@1000 : Decimal) : Text[30];										
BEGIN										
//FormatAmount										
IF AmountDisplayFormat ='' THEN										
"AmountDisplayFormat := AppMan.AutoFormatTranslate(99001451,StoreSetup.""No."");"										
"EXIT(FORMAT(Dec,0,AmountDisplayFormat));"										
END;										
										
PROCEDURE FormatPrice@49(Dec@1000 : Decimal) : Text[30];										
BEGIN										
//FormatPrice										
IF PriceDisplayFormat ='' THEN										
"PriceDisplayFormat := AppMan.AutoFormatTranslate(99001452,StoreSetup.""No."");"										
"EXIT(FORMAT(Dec,0,PriceDisplayFormat));"										
END;										
										
PROCEDURE FormatQty@66(Dec@1000 : Decimal) : Text[30];										
BEGIN										
//FormatQty										
IF QtyDisplayFormat ='' THEN										
"QtyDisplayFormat := AppMan.AutoFormatTranslate(99001450,'');"										
"EXIT(FORMAT(Dec,0,QtyDisplayFormat));"										
END;										
										
PROCEDURE FormatWeight@67(Dec@1000 : Decimal;UOM@1001 : Code[10]) : Text[30];										
BEGIN										
//FormatWeight										
IF WeightDisplayFormat ='' THEN										
"WeightDisplayFormat := AppMan.AutoFormatTranslate(99001450,UOM);"										
"EXIT(FORMAT(Dec,0,WeightDisplayFormat) + LOWERCASE(UOM));"										
END;										
										
PROCEDURE FormatPricePrUnit@68(Dec@1000 : Decimal;UOM@1001 : Code[10]) : Text[30];										
BEGIN										
//FormatPricePrUnit										
IF POSSESSION.PlacementOfLCYInWeightAfterAmount THEN										
EXIT(FormatPrice(Dec) + POSSESSION.GetValue('CURRSYM') + '/' + LOWERCASE(UOM))										
ELSE										
EXIT(POSSESSION.GetValue('CURRSYM') + FormatPrice(Dec) + '/' + LOWERCASE(UOM));										
END;										
										
PROCEDURE FormatCurrency@27(Value@1000 : Decimal;CurrCode@1001 : Code[10]) : Text[30];										
VAR										
Applman@1002 : Codeunit 1;										
BEGIN										
//FormatCurrency										
"EXIT(FORMAT(Value,0,Applman.AutoFormatTranslate(1,CurrCode)));"										
END;										
										
PROCEDURE AdjustAmount@32(VAR Value@1000 : Decimal);										
BEGIN										
//AdjustAmount										
"IF PosSetup.""Decimals in Entry"" > 0 THEN"										
"Value := ROUND(Value * POWER(10,-PosSetup.""Decimals in Entry""));"										
END;										
										
PROCEDURE ValidateCoupon@24(VAR Line@1000 : Record 99008981;CouponTenderType@1001 : Code[10];VAR Description@1002 : Text[30]) : Bool	ean	;								
VAR										
CouponHeader@10012000 : Record 99001621;										
CouponLine@10012001 : Record 99001622;										
POSTransLine@10012005 : Record 99008981;										
CouponIssuer@10012003 : Record 99001585;										
PosTrans@10012008 : Record 99008980;										
QtyNeeded@10012006 : Decimal;										
LineQty@10012007 : Decimal;										
found@10012002 : Boolean;										
LineNo@10012009 : Integer;										
totAmount@10012010 : Decimal;										
BEGIN										
//ValidateCoupon										
InitPosFunctions;										
"IF (Line.""Coupon EAN Org."" <> '') AND NOT CouponIssuer.GET(Line.""Coupon EAN Org."") THEN BEGIN"										
"Description := STRSUBSTNO(Text055,Line.""Barcode No."",Line.FIELDCAPTION(""Coupon EAN Org.""));"										
EXIT(FALSE);										
END;										
IF CouponIssuer.Blocked THEN BEGIN										
"Description := STRSUBSTNO(Text056,CouponIssuer.TABLECAPTION);"										
EXIT(FALSE);										
END;										
"CouponHeader.SETCURRENTKEY(CouponHeader.""Coupon Issuer"",CouponHeader.""Coupon Reference No."");"										
"CouponHeader.SETRANGE(""Coupon Issuer"",Line.""Coupon EAN Org."");"										
"CouponHeader.SETRANGE(""Coupon Reference No."",Line.""Card/Customer/Coup.Item No"");"										
IF NOT CouponHeader.FINDFIRST THEN BEGIN										
"Description := STRSUBSTNO(Text055,Line.""Barcode No."",CouponHeader.FIELDCAPTION(""Coupon Reference No.""));"										
EXIT(FALSE);										
END;										
IF CouponHeader.Status = CouponHeader.Status::Disabled THEN BEGIN										
"Description := STRSUBSTNO(Text056,CouponHeader.TABLECAPTION);"										
EXIT(FALSE);										
END;										
"IF NOT BOUtil.PriceGroupValidInStore2(CouponHeader.""Price Group"",Line.""Store No."") THEN BEGIN"										
Description := STRSUBSTNO(Text063);										
EXIT(FALSE);										
END;										
"PosTrans.GET(Line.""Receipt No."");"										
"IF NOT rboPriceUtil.DiscValPerValid(CouponHeader.""Validation Period ID"",PosTrans.""Trans. Date"",PosTrans.""Trans Time"") THEN"										
BEGIN										
Description := STRSUBSTNO(Text064);										
EXIT(FALSE);										
END;										
										
"IF CouponHeader.Type = CouponHeader.Type::""Return Coupon"" THEN"										
EXIT(TRUE);										
										
LineNo := 0;										
										
"IF (CouponHeader.Affects <> CouponHeader.Affects::""Any Item Line"") AND"										
(CouponHeader.Handling = CouponHeader.Handling::Discount)										
THEN BEGIN										
										
"POSTransLine.SETRANGE(""Receipt No."",Line.""Receipt No."");"										
IF POSTransLine.FINDLAST THEN REPEAT										
"found := (POSTransLine.""Entry Type"" = Line.""Entry Type""::Item) AND (NOT POSTransLine.""Linked No. not Orig."");"										
"LineNo := POSTransLine.""Line No."";"										
UNTIL (POSTransLine.NEXT(-1) = 0) OR found;										
IF NOT found THEN BEGIN										
Description := Text065;										
EXIT(FALSE);										
END;										
END;										
										
tmpPOSTransLine.DELETEALL;										
"CouponLine.SETRANGE(""Coupon Code"",CouponHeader.Code);"										
"QtyNeeded := CouponHeader.""No. of Items to Trigger"";"										
IF CouponLine.FINDFIRST THEN REPEAT										
POSTransLine.RESET;										
CASE CouponLine.Type OF										
CouponLine.Type::Item :										
BEGIN										
"POSTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",Number);"										
"POSTransLine.SETRANGE(""Receipt No."",Line.""Receipt No."");"										
"POSTransLine.SETRANGE(""Entry Type"",POSTransLine.""Entry Type""::Item);"										
"POSTransLine.SETRANGE(Number,CouponLine.""No."");"										
END;										
										
"CouponLine.Type::""Product Group"" :"										
BEGIN										
"POSTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",""Item Category Code"",""Product Group Code"");"										
"POSTransLine.SETRANGE(""Receipt No."",Line.""Receipt No."");"										
"POSTransLine.SETRANGE(""Entry Type"",POSTransLine.""Entry Type""::Item);"										
"//POSTransLine.SETRANGE(""Item Category Code"",CouponLine.""Prod. Group Category""); ****************"										
"POSTransLine.SETRANGE(""Product Group Code"",CouponLine.""No."");"										
END;										
										
"CouponLine.Type::""Item Category""  :"										
BEGIN										
"POSTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",""Item Category Code"",""Product Group Code"");"										
"POSTransLine.SETRANGE(""Receipt No."",Line.""Receipt No."");"										
"POSTransLine.SETRANGE(""Entry Type"",POSTransLine.""Entry Type""::Item);"										
"POSTransLine.SETRANGE(""Item Category Code"",CouponLine.""No."");"										
END;										
										
"CouponLine.Type::""Special Group"" :"										
BEGIN										
"POSTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",""Entry Status"");"										
"POSTransLine.SETRANGE(""Receipt No."",Line.""Receipt No."");"										
"POSTransLine.SETRANGE(""Entry Type"",POSTransLine.""Entry Type""::Item);"										
"POSTransLine.SETRANGE(""Entry Status"",POSTransLine.""Entry Status""::"" "");"										
END;										
										
END;										
										
IF LineNo <> 0 THEN										
"POSTransLine.SETRANGE(""Line No."",LineNo);"										
totAmount := 0;										
IF POSTransLine.FINDFIRST THEN REPEAT										
"IF (POSTransLine.""Entry Status"" = POSTransLine.""Entry Status""::"" "") THEN BEGIN"										
"IF POSTransLine.""Scale Item"" OR POSTransLine.""Price in Barcode"" THEN"										
LineQty := 1										
ELSE										
"LineQty := POSTransLine.Quantity - POSTransLine.""Coupon Qty Used"";"										
										
IF LineQty > 0 THEN										
IF LineQty >= QtyNeeded THEN BEGIN										
"IF POSTransLine.""Scale Item"" OR POSTransLine.""Price in Barcode"" THEN"										
QtyNeeded := POSTransLine.Quantity;										
"POSTransLine.""Coupon Qty Used"" += QtyNeeded;"										
POSTransLine.MODIFY;										
LastCouponPOSTransLine := POSTransLine;										
"LastCouponPOSTransLine.""Coupon Qty Used"" := QtyNeeded;"										
LastCouponPOSTransLine.Amount := Line.Amount;										
"LastCouponPOSTransLine.""Parent Line"" := LineNo;"										
totAmount += QtyNeeded * POSTransLine.Price;										
IF tmpPOSTransLine.FIND('-') THEN REPEAT										
"POSTransLine.GET(tmpPOSTransLine.""Receipt No."",tmpPOSTransLine.""Line No."");"										
"POSTransLine.""Coupon Qty Used"" := POSTransLine.Quantity;"										
POSTransLine.MODIFY;										
UNTIL tmpPOSTransLine.NEXT = 0;										
"IF CouponHeader.""Discount Type"" = CouponHeader.""Discount Type""::""Discount %"" THEN BEGIN"										
Line.Amount := RoundAmount(totAmount * BarcPrice / 100);										
"IF CouponHeader.""Multiply Value"" <> 0 THEN"										
"IF rboPriceUtil.DiscValPerValid(CouponHeader.""Multiply Value Period ID"","										
"PosTrans.""Trans. Date"",PosTrans.""Trans Time"") THEN"										
"Line.Amount := RoundAmount(Line.Amount * CouponHeader.""Multiply Value"");"										
END;										
IF LineNo <> 0 THEN BEGIN										
"POSTransLine.""Coupon Discount Amount"" += Line.Amount;"										
"POSTransLine.""Coupon Amt. For Printing"" += Line.Amount;"										
POSTransLine.MODIFY;										
END;										
EXIT(TRUE);										
END ELSE BEGIN										
"IF NOT tmpPOSTransLine.GET(POSTransLine.""Receipt No."",POSTransLine.""Line No."") THEN BEGIN"										
tmpPOSTransLine := POSTransLine;										
tmpPOSTransLine.INSERT;										
QtyNeeded := QtyNeeded - LineQty;										
"IF POSTransLine.""Scale Item"" OR POSTransLine.""Price in Barcode"" THEN"										
totAmount += POSTransLine.Quantity * POSTransLine.Price										
ELSE										
totAmount += LineQty * POSTransLine.Price;										
END;										
END;										
END;										
UNTIL POSTransLine.NEXT = 0;										
										
UNTIL CouponLine.NEXT = 0;										
										
IF LineNo = 0 THEN										
Description := Text057										
ELSE										
Description := Text065;										
EXIT(FALSE);										
END;										
										
PROCEDURE GetBarcItemInfo@6(Barcode@1000 : Code[22];Mask@1001 : Record 99001459;VAR ItemNo@1002 : Code[20];VAR PriceInBarcode@1003 :	Bo	ole	an	;VA	R QtyInBarcode@1004 : Boolean;VAR UOM@1005 : Code[10]);					
BEGIN										
//GetBarcStaff										
"ProcessMaskSegments(Barcode,Mask);"										
ItemNo := BarcItem;										
UOM := BarcUOM;										
PriceInBarcode := BarcPriceSpec ;										
QtyInBarcode := BarcQtySpec;										
END;										
										
PROCEDURE GetBarcDataEntryCode@13(Barcode@1000 : Code[22];Mask@1001 : Record 99001459) : Code[20];										
BEGIN										
//GetBarcDataEntryCode										
"ProcessMaskSegments(Barcode,Mask);"										
EXIT(BarcDataEntry);										
END;										
										
PROCEDURE SplitAmt@102(Amt@1000 : Decimal;Rnd@1001 : Decimal;Cnt@1002 : Integer;Iter@1003 : Integer) : Decimal;										
VAR										
Res@1004 : Decimal;										
BEGIN										
//SplitAmt *HOSP										
"Res := ROUND(Amt / Cnt,Rnd);"										
IF Cnt = Iter THEN										
Res := Amt - (Res * (Cnt - 1));										
EXIT(Res);										
END;										
										
PROCEDURE CopyMarkedLines@100(VAR srcPosTrans@1200070000 : Record 99008980;VAR dstPosTrans@1200070001 : Record 99008980;delLines@120	7	0	2	: B	oolean;SetCoverNo@10012000 : Integer;CopyMarked@1100409000 : Boolean);					
VAR										
srcTransLine@1000 : Record 99008981;										
tmpLine@1001 : Record 99008981;										
LineOfs@1003 : Integer;										
RoundNo@1004 : Integer;										
InfoEntry@1200070008 : Record 99008982;										
tmpInfoEntry@1200070007 : Record 99008982;										
DataEntry@1200070006 : Record 99001558;										
tmpDataEntry@1200070005 : Record 99001558;										
OfferPosCalc@1200070004 : Record 99001561;										
tmpOfferPosCalc@1200070003 : Record 99001561;										
PosMixMatchEntry@1100409003 : Record 99008983;										
PosMixMatchEntry2@1100409005 : Record 99008983;										
PosTrPerDisc@1100409004 : Record 99008943;										
PosTrPerDisc2@1100409006 : Record 99008943;										
MaxCoverNo@1100409002 : Integer;										
GuestTransfers@1100409001 : ARRAY [150] OF Integer;										
PosTrGuestInfo2@1100409007 : Record 10012117;										
VoucherEntries@1100409008 : Record 99001467;										
VoucherEntries2@1100409009 : Record 99001467;										
PosTrLineDisplStatRouting@1100409010 : Record 10012154;										
PosTrLineDisplStatRouting2@1100409011 : Record 10012154;										
BEGIN										
//CopyMarkedLines *HOSP										
CLEAR(GuestTransfers);										
CLEAR(PosTrGuestInfo2);										
										
"srcTransLine.SETRANGE(""Receipt No."",srcPosTrans.""Receipt No."");"										
IF CopyMarked THEN										
"srcTransLine.SETRANGE(Marked,TRUE);"										
IF NOT srcTransLine.FIND('-') THEN										
EXIT;										
										
"tmpLine.SETRANGE(""Receipt No."",dstPosTrans.""Receipt No."");"										
MaxCoverNo := 0;										
LineOfs := 0;										
IF tmpLine.FIND('-') THEN BEGIN										
REPEAT										
"IF MaxCoverNo < tmpLine.""Guest/Seat No."" THEN"										
"MaxCoverNo := tmpLine.""Guest/Seat No."";"										
UNTIL tmpLine.NEXT = 0;										
"LineOfs := tmpLine.""Line No."";"										
{//LS7.1-17										
END ELSE BEGIN										
"IF PosTrGuestInfo2.GET(dstPosTrans.""Receipt No."",0) THEN BEGIN"										
"PosTrGuestInfo2.""Table No."" := dstPosTrans.""Table No."";"										
"PosTrGuestInfo2.""Split from Receipt No."" := srcPosTrans.""Receipt No."";"										
IF SetCoverNo > 0 THEN										
"PosTrGuestInfo2.""Transfer from Table No."" := srcPosTrans.""Table No."";"										
PosTrGuestInfo2.MODIFY;										
END;										
} //LS7.1-17										
END;										
										
"RoundNo := tmpLine.""Round No."" + 1;"										
IF srcTransLine.FINDSET THEN BEGIN										
REPEAT										
tmpLine.TRANSFERFIELDS(srcTransLine);										
"tmpLine.""Round No."" := RoundNo;"										
CASE SetCoverNo OF										
"0 : tmpLine.""Guest/Seat No."" := 0;"										
"1 : tmpLine.""Guest/Seat No."" := srcTransLine.""Guest/Seat No."";  //already set"										
{//LS7.1-17										
1:00										
BEGIN										
"tmpLine.""Guest/Seat No."" := srcTransLine.""Guest/Seat No."";  //already set"										
"IF tmpLine.""Guest/Seat No."" > 0 THEN BEGIN"										
PosTrGuestInfo2.INIT;										
"PosTrGuestInfo2.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"PosTrGuestInfo2.""Guest/Seat No."" := tmpLine.""Guest/Seat No."";"										
"PosTrGuestInfo2.""Pre-receipt Counter"" := 0;"										
"PosTrGuestInfo2.""Table No."" := dstPosTrans.""Table No."";"										
"PosTrGuestInfo2.""Transfer from Table No."" := srcPosTrans.""Table No."";"										
"PosTrGuestInfo2.""Split from Receipt No."" := srcPosTrans.""Receipt No."";"										
IF PosTrGuestInfo2.INSERT(TRUE) THEN;										
END;										
END;										
2 : //as new guest										
BEGIN										
"IF srcTransLine.""Guest/Seat No."" > 0 THEN BEGIN"										
"IF GuestTransfers[srcTransLine.""Guest/Seat No."" + 1] = 0 THEN BEGIN"										
"GuestTransfers[srcTransLine.""Guest/Seat No."" + 1] := MaxCoverNo + 1;"										
MaxCoverNo := MaxCoverNo + 1;										
END;										
"tmpLine.""Guest/Seat No."" := GuestTransfers[srcTransLine.""Guest/Seat No."" + 1];"										
PosTrGuestInfo2.INIT;										
"PosTrGuestInfo2.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"PosTrGuestInfo2.""Guest/Seat No."" := tmpLine.""Guest/Seat No."";"										
"PosTrGuestInfo2.""Pre-receipt Counter"" := 0;"										
"PosTrGuestInfo2.""Table No."" := dstPosTrans.""Table No."";"										
"PosTrGuestInfo2.""Transfer from Table No."" := srcPosTrans.""Table No."";"										
"PosTrGuestInfo2.""Split from Receipt No."" := srcPosTrans.""Receipt No."";"										
IF PosTrGuestInfo2.INSERT(TRUE) THEN;										
END ELSE										
"tmpLine.""Guest/Seat No."" := 0;"										
END;										
} //LS7.1-17										
END;										
										
										
"tmpLine.""Line No."" := srcTransLine.""Line No."" + LineOfs;"										
"IF srcTransLine.""Parent Line"" <> 0 THEN"										
"tmpLine.""Parent Line"" := srcTransLine.""Parent Line"" + LineOfs;"										
"IF srcTransLine.""Disc. Info Line No."" <> 0 THEN"										
"tmpLine.""Disc. Info Line No."" := srcTransLine.""Disc. Info Line No."" + LineOfs;"										
"IF srcTransLine.""Split Origin Line No."" <> 0 THEN"										
"tmpLine.""Split Origin Line No."" := srcTransLine.""Split Origin Line No."" + LineOfs;"										
"IF srcTransLine.""Mix & Match Line No."" <> 0 THEN"										
"tmpLine.""Mix & Match Line No."" := srcTransLine.""Mix & Match Line No."" + LineOfs;"										
										
"IF srcTransLine.""Tot. Disc Info Line No."" <> 0 THEN BEGIN"										
IF CopyMarked THEN										
"tmpLine.""Tot. Disc Info Line No."" := 0"										
ELSE										
"tmpLine.""Tot. Disc Info Line No."" := srcTransLine.""Tot. Disc Info Line No."" + LineOfs;"										
END;										
										
"tmpLine.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"tmpLine.""POS Terminal No."" := dstPosTrans.""POS Terminal No."";"										
"tmpLine.""Store No."" := dstPosTrans.""Store No."";"										
tmpLine.Marked := FALSE;										
tmpLine.INSERT;										
										
"//LS7.1-18    IF delLines AND (srcTransLine.""Entry Type"" = srcTransLine.""Entry Type""::Item) THEN BEGIN"										
"//LS7.1-18      CopyPrintedAndHospStation(srcTransLine,tmpLine);"										
//LS7.1-18    END;										
//LS7.1-17-										
IF delLines THEN BEGIN										
PosTrLineDisplStatRouting.RESET;										
"PosTrLineDisplStatRouting.SETRANGE(""Receipt No."",srcTransLine.""Receipt No."");"										
"PosTrLineDisplStatRouting.SETRANGE(""Pos Trans. Line No."",srcTransLine.""Line No."");"										
IF PosTrLineDisplStatRouting.FINDSET THEN BEGIN										
REPEAT										
"PosTrLineDisplStatRouting2.TRANSFERFIELDS(PosTrLineDisplStatRouting,TRUE);"										
"PosTrLineDisplStatRouting2.""Receipt No."" := tmpLine.""Receipt No."";"										
"PosTrLineDisplStatRouting2.""Pos Trans. Line No."" += LineOfs;"										
PosTrLineDisplStatRouting2.INSERT;										
UNTIL PosTrLineDisplStatRouting.NEXT = 0;										
PosTrLineDisplStatRouting.DELETEALL;										
END;										
END;										
										
//LS7.1-17+										
										
IF NOT CopyMarked THEN BEGIN  //all lines are copied										
InfoEntry.RESET;										
"InfoEntry.SETRANGE(""Receipt No."",srcPosTrans.""Receipt No."");"										
"InfoEntry.SETRANGE(""Transaction Type"",InfoEntry.""Transaction Type""::Header);"										
IF InfoEntry.FINDSET THEN										
REPEAT										
tmpInfoEntry := InfoEntry;										
"tmpInfoEntry.""Receipt No."" := dstPosTrans.""Receipt No."";"										
tmpInfoEntry.INSERT;										
UNTIL InfoEntry.NEXT = 0;										
InfoEntry.DELETEALL;										
END;										
										
InfoEntry.RESET;										
"InfoEntry.SETRANGE(""Receipt No."",srcPosTrans.""Receipt No."");"										
"InfoEntry.SETRANGE(""Line No."", srcTransLine.""Line No."");"										
IF InfoEntry.FINDSET THEN										
REPEAT										
tmpInfoEntry := InfoEntry;										
"tmpInfoEntry.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"tmpInfoEntry.""Line No."" += LineOfs;"										
tmpInfoEntry.INSERT;										
UNTIL InfoEntry.NEXT = 0;										
InfoEntry.DELETEALL;										
										
DataEntry.RESET;										
"DataEntry.SETCURRENTKEY(""Created by Receipt No."", ""Created by Line No."");"										
"DataEntry.SETRANGE(""Created by Receipt No."",srcPosTrans.""Receipt No."");"										
"DataEntry.SETRANGE(""Created by Line No."",srcTransLine.""Line No."");"										
IF DataEntry.FINDSET THEN										
REPEAT										
tmpDataEntry.TRANSFERFIELDS(DataEntry);										
"tmpDataEntry.""Created by Receipt No."" := dstPosTrans.""Receipt No."";"										
"tmpDataEntry.""Created by Line No."" += LineOfs;"										
tmpDataEntry.MODIFY;										
UNTIL DataEntry.NEXT = 0;										
										
DataEntry.RESET;										
"DataEntry.SETCURRENTKEY(""Applied by Receipt No."", ""Applied by Line No."");"										
"DataEntry.SETRANGE(""Applied by Receipt No."",srcPosTrans.""Receipt No."");"										
"DataEntry.SETRANGE(""Applied by Line No."",srcTransLine.""Line No."");"										
IF DataEntry.FINDSET THEN										
REPEAT										
tmpDataEntry.TRANSFERFIELDS(DataEntry);										
"tmpDataEntry.""Applied by Receipt No."" := dstPosTrans.""Receipt No."";"										
"tmpDataEntry.""Applied by Line No."" += LineOfs;"										
tmpDataEntry.MODIFY;										
UNTIL DataEntry.NEXT = 0;										
										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",srcPosTrans.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Trans. Line No."",srcTransLine.""Line No."");"										
IF OfferPosCalc.FINDSET THEN										
REPEAT										
tmpOfferPosCalc := OfferPosCalc;										
"tmpOfferPosCalc.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"tmpOfferPosCalc.""Trans. Line No."" += LineOfs;"										
tmpOfferPosCalc.INSERT;										
UNTIL OfferPosCalc.NEXT = 0;										
OfferPosCalc.DELETEALL;										
										
PosMixMatchEntry.RESET;										
"PosMixMatchEntry.SETRANGE(""Receipt No."",srcPosTrans.""Receipt No."");"										
"PosMixMatchEntry.SETRANGE(PosMixMatchEntry.""Line No."",srcTransLine.""Line No."");"										
IF PosMixMatchEntry.FINDSET THEN										
REPEAT										
PosMixMatchEntry2 := PosMixMatchEntry;										
"PosMixMatchEntry2.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"PosMixMatchEntry2.""Line No."" += LineOfs;"										
PosMixMatchEntry2.INSERT;										
UNTIL PosMixMatchEntry.NEXT = 0;										
PosMixMatchEntry.DELETEALL;										
										
PosTrPerDisc.RESET;										
"PosTrPerDisc.SETRANGE(""Receipt No."",srcPosTrans.""Receipt No."");"										
"PosTrPerDisc.SETRANGE(""Line No."",srcTransLine.""Line No."");"										
IF PosTrPerDisc.FINDSET THEN										
REPEAT										
PosTrPerDisc2 := PosTrPerDisc;										
"PosTrPerDisc2.""Receipt No."" := dstPosTrans.""Receipt No."";"										
"PosTrPerDisc2.""Line No."" += LineOfs;"										
PosTrPerDisc2.INSERT;										
UNTIL PosTrPerDisc.NEXT() = 0;										
PosTrPerDisc.DELETEALL;										
VoucherEntries.RESET;										
"VoucherEntries.SETRANGE(""Receipt Number"",srcPosTrans.""Receipt No."");"										
IF VoucherEntries.FINDSET THEN BEGIN										
VoucherEntries2 := VoucherEntries;										
VoucherEntries.DELETE;										
"VoucherEntries2.""Receipt Number"" := dstPosTrans.""Receipt No."";"										
VoucherEntries2.INSERT;										
END;										
"srcTransLine.""Entry Status"" := srcTransLine.""Entry Status""::Voided;"										
UNTIL srcTransLine.NEXT = 0;										
END;										
										
IF srcTransLine.FINDSET THEN BEGIN										
REPEAT										
IF delLines THEN										
srcTransLine.DELETE(TRUE)										
ELSE BEGIN										
IF CopyMarked THEN BEGIN										
srcTransLine.Marked := FALSE;										
srcTransLine.MODIFY;										
END;										
END;										
UNTIL srcTransLine.NEXT = 0;										
END;										
END;										
										
PROCEDURE FindLastTrans@1002(VAR Trans@1000 : Record 99001472) : Boolean;										
BEGIN										
//FindLastTrans										
Trans.RESET;										
"Trans.SETCURRENTKEY(""POS Terminal No."",""Transaction Type"",Date,""Entry Status"");"										
"Trans.SETRANGE(""POS Terminal No."",PosTerminal.""No."");"										
"Trans.SETRANGE(""Transaction Type"",Trans.""Transaction Type""::Sales);"										
"Trans.SETRANGE(""Entry Status"",Trans.""Entry Status""::"" "");"										
EXIT(Trans.FINDLAST);										
END;										
										
PROCEDURE GetStatementCode@1200070000() : Code[20];										
BEGIN										
//GetStatementCode										
"IF NOT PosTerminal.""Terminal Statement"" THEN"										
"PosTerminal.""Statement Method"" := StoreSetup.""Statement Method"";"										
"CASE PosTerminal.""Statement Method"" OF"										
"PosTerminal.""Statement Method""::Staff          : EXIT(POSSESSION.StaffID);"										
"PosTerminal.""Statement Method""::""POS Terminal"" : EXIT(PosTerminal.""No."");"										
"PosTerminal.""Statement Method""::Total          : EXIT('');"										
END;										
END;										
										
PROCEDURE ChangeVATBusOnLine@1200070001(POSTransaction@1200070000 : Record 99008980);										
VAR										
POSTransLine@1200070001 : Record 99008981;										
tmpPOSTransLineOfferUpd@1200070002 : TEMPORARY Record 99008981;										
VatSetup@1200070003 : Record 325;										
Item@1200070004 : Record 27;										
rboPriceUtil@1200070007 : Codeunit 99001462;										
PosPrice@1200070008 : Codeunit 99008906;										
UOM@1200070005 : Code[10];										
Price@1200070006 : Decimal;										
DT@1100409000 : Record 99008943;										
BEGIN										
//ChangeVATBusOnLine										
										
tmpPOSTransLineOfferUpd.DELETEALL;										
"POSTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",Number,""Variant Code"");"										
"POSTransLine.SETRANGE(""Receipt No."",POSTransaction.""Receipt No."");"										
"POSTransLine.SETRANGE(""Entry Type"",POSTransLine.""Entry Type""::Item);"										
IF POSTransLine.FIND('-') THEN BEGIN										
"IF POSTransLine.""Vat Bus. Posting Group"" = POSTransaction.""VAT Bus.Posting Group"" THEN"										
EXIT;										
REPEAT										
"POSTransLine.""Vat Bus. Posting Group"" := POSTransaction.""VAT Bus.Posting Group"";"										
"VatSetup.GET(POSTransLine.""Vat Bus. Posting Group"",POSTransLine.""Vat Prod. Posting Group"");"										
"POSTransLine.""VAT Code"" := VatSetup.""POS Terminal VAT Code"";"										
POSTransLine.MODIFY;										
Item.GET(POSTransLine.Number);										
"IF POSTransLine.""Unit of Measure"" <> '' THEN"										
"UOM := POSTransLine.""Unit of Measure"""										
ELSE										
"UOM := Item.""Sales Unit of Measure"";"										
//LS7.1-15 -										
"IF POSTransLine.""Price Change"" THEN"										
Price := POSTransLine.Price										
ELSE										
//LS7.1-15 +										
"Price := rboPriceUtil.GetValidRetailPrice2Trans(POSTransLine.""Store No."",POSTransLine.Number,"										
"POSTransaction.""Trans. Date"",POSTransaction.""Trans Time"",UOM,POSTransLine.""Variant Code"","										
"POSTransLine.""Vat Bus. Posting Group"",POSTransaction.""Trans. Currency Code"","										
"POSTransLine.""Price Group Code"",POSTransLine.""Sales Type"",POSTransaction.""Customer Disc. Group"","										
POSTransLine);										
"IF (POSTransLine.Price <> Price) OR (POSTransLine.""VAT %"" <> VatSetup.""VAT %"") THEN BEGIN"										
										
"IF PosPrice.IsPerDiscType(POSTransLine,DT.""Periodic Disc. Type""::""Mix&Match"") AND"										
"(POSTransLine.""Quantity Discounted"" <> 0) THEN BEGIN"										
										
tmpPOSTransLineOfferUpd := POSTransLine;										
tmpPOSTransLineOfferUpd.INSERT;										
END;										
POSTransLine.Price := Price;										
"IF VatSetup.""VAT Calculation Type"" = VatSetup.""VAT Calculation Type""::""Normal VAT"" THEN"										
"POSTransLine.""VAT %"" := VatSetup.""VAT %"""										
ELSE										
"POSTransLine.""VAT %"" := 0;"										
"POSTransLine.""Net Price"" := ROUND(POSTransLine.Price / (1 + POSTransLine.""VAT %"" / 100));"										
POSTransLine.CalcPrices;										
POSTransLine.MODIFY;										
END;										
UNTIL POSTransLine.NEXT = 0;										
END;										
										
IF tmpPOSTransLineOfferUpd.FIND('-') THEN REPEAT										
"POSTransLine.GET(tmpPOSTransLineOfferUpd.""Receipt No."",tmpPOSTransLineOfferUpd.""Line No."");"										
"PosPrice.CalcPeriodicDisc(POSTransLine,FALSE);"										
UNTIL tmpPOSTransLineOfferUpd.NEXT = 0;										
END;										
										
PROCEDURE LogStaffInOut@1200070003(StaffID@1200070000 : Code[20];ActionInt@1200070002 : Integer;VAR Msg@1200070001 : Text[120]);										
VAR										
TimeEntry@1200070006 : Record 99001547;										
TimeRegUtils@1200070003 : Codeunit 99001464;										
bool@1200070005 : Boolean;										
beginEntry@1200070007 : Integer;										
ErrorCode@1200070008 : Integer;										
BEGIN										
//LogStaffInOut										
										
InitPosFunctions();										
"IF NOT PosFuncProfile.""TS Login Staff"" THEN BEGIN"										
"TimeRegUtils.PosLogInOut(StaffID,ActionInt,Msg);"										
EXIT;										
END;										
										
"TimeEntry.SETRANGE(""Staff ID"",StaffID);"										
IF TimeEntry.FIND('+') THEN										
"beginEntry := TimeEntry.""Entry No."""										
ELSE										
beginEntry := 0;										
										
"TSUtil.GetTimeReg(StaffID,ErrorCode);"										
IF ErrorCode <> 0 THEN BEGIN										
Msg := Text060;										
EXIT;										
END;										
										
										
"bool := TimeRegUtils.PosLogInOut(StaffID,ActionInt,Msg);"										
										
"TimeEntry.SETFILTER(""Entry No."",'>=%1',beginEntry);"										
IF bool THEN										
IF NOT TSUtil.UpdateTimeReg(TimeEntry) THEN										
Msg := Text060;										
										
"TimeEntry.SETFILTER(""Entry No."",'>%1',beginEntry);"										
TimeEntry.DELETEALL;										
END;										
										
PROCEDURE CorrectStaffTimeReg@1200070004(StaffID@1200070002 : Code[20];VAR Msg@1200070000 : Text[120]);										
VAR										
TimeEntry@1200070001 : Record 99001547;										
tmpTimeEntry@1200070003 : TEMPORARY Record 99001547;										
beginEntry@1200070004 : Integer;										
ErrorCode@1200070005 : Integer;										
BEGIN										
//CorrectStaffTimeReg										
										
"TimeEntry.SETRANGE(""Staff ID"",StaffID);"										
InitPosFunctions();										
"IF PosFuncProfile.""TS Login Staff"" THEN BEGIN"										
IF TimeEntry.FIND('+') THEN										
"beginEntry := TimeEntry.""Entry No."""										
ELSE										
beginEntry := 0;										
"TSUtil.GetTimeReg(StaffID,ErrorCode);"										
IF ErrorCode <> 0 THEN BEGIN										
Msg := Text060;										
EXIT;										
END;										
END;										
										
IF TimeEntry.FIND('+') THEN BEGIN										
tmpTimeEntry := TimeEntry;										
tmpTimeEntry.INSERT;										
COMMIT;										
"PAGE.RUNMODAL(99001684,tmpTimeEntry);"										
"tmpTimeEntry.GET(tmpTimeEntry.""Staff ID"",tmpTimeEntry.""Entry No."");"										
TimeEntry := tmpTimeEntry;										
TimeEntry.MODIFY;										
END ELSE										
Msg := Text061;										
										
"IF PosFuncProfile.""TS Login Staff"" THEN BEGIN"										
"TimeEntry.SETFILTER(""Entry No."",'=%1',TimeEntry.""Entry No."");"										
IF NOT TSUtil.UpdateTimeReg(TimeEntry) THEN										
Msg := Text060;										
"TimeEntry.SETFILTER(""Entry No."",'>%1',beginEntry);"										
TimeEntry.DELETEALL;										
END;										
END;										
										
PROCEDURE RetBarcPriceAndQty@1100409000(VAR RetBarcPrice@1100409000 : Decimal;VAR RetBarcQty@1100409001 : Decimal);										
BEGIN										
//RetBarcPriceAndQty										
RetBarcPrice := BarcPrice;										
RetBarcQty := BarcQty;										
END;										
										
PROCEDURE POSlog@1200070005(VAR MenuLine@1200070000 : Record 99008906;CurrReceipt@1200070001 : Code[20]);										
VAR										
"""Pos Log""@1200070003 : Record 99008945;"										
NextSeq@1200070002 : Integer;										
BEGIN										
										
"""Pos Log"".SETRANGE(""Pos Log"".""Entry Date"",TODAY);"										
"""Pos Log"".SETRANGE(""Pos Log"".""Entry Time"",TIME());"										
"""Pos Log"".SETRANGE(""Store No."",PosTerminal.""Store No."");"										
"""Pos Log"".SETRANGE(""Pos Log"".""Terminal No."",PosTerminal.""No."");"										
"""Pos Log"".SETRANGE(""Pos Log"".""Staff ID"",POSSESSION.StaffID);"										
"""Pos Log"".SETRANGE(""Pos Log"".""Receipt No."",CurrReceipt);"										
										
										
"IF ""Pos Log"".FIND('+') THEN"										
"NextSeq := ""Pos Log"".Sequence + 1"										
ELSE										
NextSeq := 1;										
										
"""Pos Log"".INIT;"										
"""Pos Log"".""Entry Date""   := TODAY();"										
"""Pos Log"".""Entry Time""   := TIME();"										
"""Pos Log"".""Terminal No."" := POSSESSION.TerminalNo;"										
"""Pos Log"".""Staff ID""     := POSSESSION.StaffID;"										
"""Pos Log"".""Receipt No.""  := CurrReceipt;"										
"""Pos Log"".""Store No.""    := PosTerminal.""Store No."";"										
"""Pos Log"".Sequence       := NextSeq;"										
										
"""Pos Log"".""Menu ID""       := MenuLine.""Menu ID"";"										
"""Pos Log"".""POS Command""   := MenuLine.Command;"										
"""Pos Log"".""POS Parameter"" := MenuLine.Parameter;"										
										
"""Pos Log"".INSERT(TRUE);"										
END;										
										
PROCEDURE FindTransaction@1200070007(OnTable@1200070000 : Integer) : Code[20];										
VAR										
TmpTrans@1200070001 : Record 99008980;										
FilterFrom@1100409000 : Code[20];										
FilterTo@1100409001 : Code[20];										
BEGIN										
//FindTransaction										
"TmpTrans.SETRANGE(""Store No."",POSSESSION.StoreNo);"										
IF OnTable <> 0 THEN BEGIN										
"TmpTrans.SETRANGE(""Table No."",OnTable);"										
END										
ELSE BEGIN										
"IF PosFuncProfile.""Operator Owned Trans."" THEN BEGIN"										
"TmpTrans.SETRANGE(""Created by Staff ID"", POSSESSION.StaffID);"										
"TmpTrans.SETFILTER(""POS Terminal No."",'<>%1','0'); //<>suspended"										
END										
ELSE BEGIN										
"FilterFrom := ZeroPad(POSSESSION.TerminalNo,10)+ZeroPad('0',9);"										
"FilterTo := ZeroPad(POSSESSION.TerminalNo,10)+ZeroPad('9',9);"										
"TmpTrans.SETRANGE(""Receipt No."",FilterFrom,FilterTo);"										
END;										
"TmpTrans.SETRANGE(""Active Table No."",0);"										
END;										
IF NOT TmpTrans.FIND('-') THEN										
CLEAR(TmpTrans);										
"EXIT(TmpTrans.""Receipt No."");"										
END;										
										
PROCEDURE InsertTmpTrans@1200070008(VAR LastSlipNo@1200070001 : Code[20];ShiftNo@1200070002 : Code[1];SetSalesType@1200070003 : Code	[20	];T	ab	leN	o@1200070004 : Integer;TrainingActive@1200070005 : Boolean;TableDescr@1100409000 : Text) NewSlipNo : Code[20];					
VAR										
TmpTrans@1200070000 : Record 99008980;										
SalesTypes@1200070006 : Record 10001439;										
Seq@10012000 : Integer;										
InsertOK@1100409002 : Boolean;										
LoopCount@1100409001 : Integer;										
BEGIN										
//InsertTmpTrans										
IF NOT(SkipIncrementSlipno) THEN										
LastSlipNo := INCSTR(LastSlipNo);										
										
SkipIncrementSlipno := FALSE;										
										
IF NOT TmpTrans.RECORDLEVELLOCKING THEN										
"TmpTrans.LOCKTABLE(TRUE,TRUE);"										
										
"TmpTrans.""Receipt No."" := ZeroPad(POSSESSION.TerminalNo,10)+"										
"ZeroPad(LastSlipNo,9);"										
"TmpTrans.""New Transaction"" := TRUE;"										
"TmpTrans.""Store No."" := POSSESSION.StoreNo;"										
"TmpTrans.""POS Terminal No."" := POSSESSION.TerminalNo;"										
"TmpTrans.""Created on POS Terminal"" := POSSESSION.TerminalNo;"										
"TmpTrans.""Staff ID"" := POSSESSION.StaffID;"										
"TmpTrans.""Shift No."" := ShiftNo;"										
"TmpTrans.""VAT Bus.Posting Group"" := StoreSetup.""Store VAT Bus. Post. Gr."";"										
"TmpTrans.""Sale Is Return Sale"" := FALSE;"										
"TmpTrans.""Sales Type"" := SetSalesType;"										
										
"TmpTrans.""Table No.""  := TableNo;"										
IF TableNo <> 0 THEN										
"TmpTrans.Comment := STRSUBSTNO(Text260,FORMAT(TableNo));"										
"TmpTrans.""Dining Tbl. Description"" := TableDescr;  //LS7.1-03"										
										
										
IF TrainingActive THEN										
"TmpTrans.""Entry Status"" := TmpTrans.""Entry Status""::Training"										
ELSE										
"TmpTrans.""Entry Status"" := TmpTrans.""Entry Status""::"" "";"										
										
IF SetSalesType <> '' THEN										
IF SalesTypes.GET(SetSalesType) THEN BEGIN										
"IF SalesTypes.""VAT Bus. Posting Group"" <> '' THEN"										
"TmpTrans.VALIDATE(""VAT Bus.Posting Group"",SalesTypes.""VAT Bus. Posting Group"");"										
"IF SalesTypes.""Price Group"" <> '' THEN"										
"TmpTrans.VALIDATE(TmpTrans.""Price Group Code"",SalesTypes.""Price Group"");"										
END;										
										
"TmpTrans.""Hosp. Type Sequence"" := 0;"										
"IF EVALUATE(Seq,POSSESSION.GetValue('HOSTYPSEQ')) THEN"										
"TmpTrans.""Hosp. Type Sequence"" := Seq;"										
										
//LS7.1-06 TmpTrans.INSERT;										
//LS7.1-06-										
LoopCount := 0;										
InsertOK := FALSE;										
										
IF NOT TmpTrans.INSERT THEN BEGIN										
WHILE (NOT InsertOK) AND (LoopCount < 2) DO BEGIN										
LoopCount += 1;										
SLEEP(100);										
										
LastSlipNo := INCSTR(LastSlipNo);										
"TmpTrans.""Receipt No."" :="										
"ZeroPad(POSSESSION.TerminalNo,10) +"										
"ZeroPad(LastSlipNo,9);"										
IF TmpTrans.INSERT THEN										
InsertOK := TRUE;										
END;										
END ELSE										
InsertOK := TRUE;										
										
IF NOT InsertOK THEN										
TmpTrans.INSERT;										
										
COMMIT;										
//LS7.1-06+										
										
"IF (TableNo > 0) OR PosFuncProfile.""Print Copy No. on Pre-Receipt"" THEN BEGIN"										
CLEAR(PosTrGuestInfo1);										
"IF PosTrGuestInfo1.GET(TmpTrans.""Receipt No."",0) THEN BEGIN"										
"PosTrGuestInfo1.""Table No."" := TableNo;"										
PosTrGuestInfo1.MODIFY;										
END ELSE BEGIN										
PosTrGuestInfo1.INIT;										
"PosTrGuestInfo1.""Receipt No."" := TmpTrans.""Receipt No."";"										
"PosTrGuestInfo1.""Table No."" := TableNo;"										
PosTrGuestInfo1.INSERT(TRUE);										
END;										
END;										
										
COMMIT;										
//WriteLocalVar(LastSlipNo);										
										
"EXIT(TmpTrans.""Receipt No."");"										
END;										
										
PROCEDURE InitReusedTrans@1100409029(VAR ExistingPosTrans@1200070001 : Record 99008980;ShiftNo@1200070002 : Code[1];SetSalesType@120	7	0	3	: C	ode[20];TableNo@1200070004 : Integer;TrainingActive@1200070005 : Boolean;TableDescr@1100409000 : Text) NewSlipNo : Code[20];					
VAR										
SalesTypes@1200070006 : Record 10001439;										
Seq@10012000 : Integer;										
BEGIN										
IF NOT ExistingPosTrans.RECORDLEVELLOCKING THEN										
"ExistingPosTrans.LOCKTABLE(TRUE,TRUE);"										
										
"ExistingPosTrans.""New Transaction"" := TRUE;"										
"ExistingPosTrans.""Store No."" := POSSESSION.StoreNo;"										
"ExistingPosTrans.""POS Terminal No."" := POSSESSION.TerminalNo;"										
"ExistingPosTrans.""Created on POS Terminal"" := POSSESSION.TerminalNo;"										
"ExistingPosTrans.""Staff ID"" := POSSESSION.StaffID;"										
"ExistingPosTrans.""Shift No."" := ShiftNo;"										
"ExistingPosTrans.""VAT Bus.Posting Group"" := StoreSetup.""Store VAT Bus. Post. Gr."";"										
"ExistingPosTrans.""Sale Is Return Sale"" := FALSE;"										
"ExistingPosTrans.""Sales Type"" := SetSalesType;"										
										
"ExistingPosTrans.""Table No.""  := TableNo;"										
IF TableNo <> 0 THEN										
"ExistingPosTrans.Comment := STRSUBSTNO(Text260,FORMAT(TableNo));"										
"ExistingPosTrans.""Dining Tbl. Description"" := TableDescr;  //LS7.1-03"										
										
										
IF TrainingActive THEN										
"ExistingPosTrans.""Entry Status"" := ExistingPosTrans.""Entry Status""::Training"										
ELSE										
"ExistingPosTrans.""Entry Status"" := ExistingPosTrans.""Entry Status""::"" "";"										
										
IF SetSalesType <> '' THEN										
IF SalesTypes.GET(SetSalesType) THEN BEGIN										
"IF SalesTypes.""VAT Bus. Posting Group"" <> '' THEN"										
"ExistingPosTrans.VALIDATE(""VAT Bus.Posting Group"",SalesTypes.""VAT Bus. Posting Group"");"										
"IF SalesTypes.""Price Group"" <> '' THEN"										
"ExistingPosTrans.VALIDATE(ExistingPosTrans.""Price Group Code"",SalesTypes.""Price Group"");"										
END;										
										
"ExistingPosTrans.""Hosp. Type Sequence"" := 0;"										
"IF EVALUATE(Seq,POSSESSION.GetValue('HOSTYPSEQ')) THEN"										
"ExistingPosTrans.""Hosp. Type Sequence"" := Seq;"										
										
ExistingPosTrans.MODIFY;										
										
COMMIT;										
END;										
										
PROCEDURE GetContact@1200070010(pContactNo@1200070003 : Code[20];VAR pContact@1200070001 : Record 5050;VAR pReturnTxt@1200070000 : T	ext	[10	0]	) :	Boolean;					
VAR										
TsErr@1200070007 : Integer;										
TSRead@1200070006 : Boolean;										
TSLog@1200070005 : Boolean;										
ContactBusRelation@1200070004 : Record 5054;										
ContactBusRelationTmp@1200070002 : TEMPORARY Record 5054;										
BEGIN										
//GetContact										
//Function to read (get) Contact locally or through TS.										
										
pReturnTxt := '';										
"IF PosFuncProfile.""TS Member"" THEN BEGIN"										
"GetTSReadAndLogSettings(DATABASE::Contact,pContactNo,TSRead,TSLog);"										
IF NOT TSRead THEN BEGIN										
IF pContact.GET(pContactNo) THEN BEGIN										
EXIT(TRUE);										
END ELSE BEGIN										
TSRead := TRUE;										
END;										
END;										
IF TSRead THEN BEGIN										
"IF TSUtil.GetContact(pContactNo,pContact,TsErr) THEN BEGIN"										
IF NOT pContact.INSERT() THEN										
pContact.MODIFY();										
IF TSLog THEN										
"SetTSReadLog(DATABASE::Contact,pContactNo);"										
ContactBusRelationTmp.RESET();										
ContactBusRelationTmp.DELETEALL();										
"IF TSUtil.GetContactBusRelation(pContactNo,ContactBusRelationTmp,TsErr) THEN BEGIN"										
ContactBusRelationTmp.RESET();										
IF ContactBusRelationTmp.FIND('-') THEN										
REPEAT										
ContactBusRelation.INIT();										
ContactBusRelation := ContactBusRelationTmp;										
IF NOT ContactBusRelation.INSERT() THEN										
ContactBusRelation.MODIFY();										
UNTIL ContactBusRelationTmp.NEXT() = 0;										
END ELSE BEGIN										
IF TsErr <> 0 THEN BEGIN										
pReturnTxt := Text058;										
EXIT(FALSE);										
END;										
END;										
EXIT(TRUE);										
END ELSE BEGIN										
IF TsErr <> 0 THEN										
pReturnTxt := Text058;										
EXIT(FALSE);										
END;										
END;										
END ELSE BEGIN										
IF pContact.GET(pContactNo) THEN BEGIN										
EXIT(TRUE);										
END ELSE BEGIN										
EXIT(FALSE);										
END;										
END;										
END;										
										
PROCEDURE GetMSRCard@1200070011(pCardNo@1200070003 : Text[100];VAR pMSRCard@1200070001 : Record 10000729;VAR pReturnTxt@1200070000 :	Te	xt[	10	0])	: Boolean;					
VAR										
TsErr@1200070005 : Integer;										
TSRead@1200070004 : Boolean;										
TSLog@1200070002 : Boolean;										
BEGIN										
//GetContact										
										
pReturnTxt := '';										
"IF PosFuncProfile.""TS Member"" THEN BEGIN"										
"GetTSReadAndLogSettings(DATABASE::""MSR Card Link Setup"",pCardNo,TSRead,TSLog);"										
IF NOT TSRead THEN BEGIN										
IF pMSRCard.GET(pCardNo) THEN BEGIN										
EXIT(TRUE);										
END ELSE BEGIN										
TSRead := TRUE;										
END;										
END;										
IF TSRead THEN BEGIN										
"IF TSUtil.GetMSRCard(pCardNo,pMSRCard,TsErr) THEN BEGIN"										
IF NOT pMSRCard.INSERT() THEN										
pMSRCard.MODIFY();										
IF TSLog THEN										
"SetTSReadLog(DATABASE::""MSR Card Link Setup"",pCardNo);"										
EXIT(TRUE);										
END ELSE BEGIN										
IF TsErr <> 0 THEN										
pReturnTxt := Text058;										
EXIT(FALSE);										
END;										
END;										
END ELSE BEGIN										
IF pMSRCard.GET(pCardNo) THEN BEGIN										
EXIT(TRUE);										
END ELSE BEGIN										
EXIT(FALSE);										
END;										
END;										
END;										
										
PROCEDURE AdjustAmountToShow@1200070012(VAR Value@1000 : Decimal);										
BEGIN										
//AdjustAmountToShow										
//Function to adjust amount to show on pop-up tender/qty form on the POS										
										
"IF PosSetup.""Decimals in Entry"" > 0 THEN"										
"Value := ROUND(Value * POWER(10,PosSetup.""Decimals in Entry""));"										
END;										
										
PROCEDURE FormatAmountToShow@1200070014(Value@1000 : Decimal) : Text[30];										
VAR										
xAmount@1200070000 : Decimal;										
xAmountTxt@1200070002 : Text[30];										
xThousandToken@1200070001 : Text[1];										
BEGIN										
//FormatAmountToShow										
//Function to format amount to show on pop-up tender/qty form on the POS										
										
"IF PosSetup.""Decimals in Entry"" > 0 THEN BEGIN"										
xAmount := 1000;										
xAmountTxt := FORMAT(xAmount);										
"xThousandToken := DELCHR(xAmountTxt,'=','0123456789');"										
"EXIT(DELCHR(FORMAT(Value),'=',xThousandToken))"										
END ELSE BEGIN										
EXIT(FORMAT(Value));										
END;										
END;										
										
PROCEDURE GetTSReadAndLogSettings@1200070015(pTableNo@1200070000 : Integer;pKey@1200070001 : Text[200];VAR pRead@1200070003 : Boolea	n;V	AR	pL	ogR	ead@1200070002 : Boolean);					
VAR										
TransServerTableSetup@1200070005 : Record 99001457;										
TransServerTableLog@1200070004 : Record 99001458;										
BEGIN										
//GetTSReadAndLogSettings										
//Function to find TS settings for Read and Log.										
										
"IF NOT TransServerTableSetup.GET(PosFuncProfile.""Profile ID"",pTableNo) THEN BEGIN"										
pRead := TRUE;										
pLogRead := FALSE;										
EXIT;										
END;										
										
"CASE TransServerTableSetup.""Lookup Type"" OF"										
"TransServerTableSetup.""Lookup Type""::Never:"										
BEGIN										
pRead := FALSE;										
pLogRead := FALSE;										
END;										
"TransServerTableSetup.""Lookup Type""::Always:"										
BEGIN										
pRead := TRUE;										
pLogRead := FALSE;										
END;										
"TransServerTableSetup.""Lookup Type""::Regular:"										
BEGIN										
"IF NOT TransServerTableLog.GET(pTableNo,pKey) THEN BEGIN"										
pRead := TRUE;										
pLogRead := TRUE;										
END ELSE BEGIN										
"CASE TransServerTableSetup.""Regular Frequency"" OF"										
"TransServerTableSetup.""Regular Frequency""::Daily:"										
"IF TransServerTableLog.""Last Lookup"" = TODAY() THEN BEGIN"										
pRead := FALSE;										
pLogRead := TRUE;										
END ELSE BEGIN										
pRead := TRUE;										
pLogRead := TRUE;										
END;										
"TransServerTableSetup.""Regular Frequency""::Weekly:"										
"IF (DATE2DWY(TransServerTableLog.""Last Lookup"",2) = DATE2DWY(TODAY(),2)) AND"										
"(DATE2DWY(TransServerTableLog.""Last Lookup"",3) = DATE2DWY(TODAY(),3)) THEN BEGIN"										
pRead := FALSE;										
pLogRead := TRUE;										
END ELSE BEGIN										
pRead := TRUE;										
pLogRead := TRUE;										
END;										
"TransServerTableSetup.""Regular Frequency""::Monthly:"										
"IF (DATE2DMY(TransServerTableLog.""Last Lookup"",2) = DATE2DMY(TODAY(),2)) AND"										
"(DATE2DMY(TransServerTableLog.""Last Lookup"",3) = DATE2DMY(TODAY(),3)) THEN BEGIN"										
pRead := FALSE;										
pLogRead := TRUE;										
END ELSE BEGIN										
pRead := TRUE;										
pLogRead := TRUE;										
END;										
ELSE BEGIN										
pRead := TRUE;										
pLogRead := TRUE;										
END;										
END;										
END;										
END;										
"TransServerTableSetup.""Lookup Type""::Expiration:"										
BEGIN										
"IF NOT TransServerTableLog.GET(pTableNo,pKey) THEN BEGIN"										
pRead := TRUE;										
pLogRead := TRUE;										
END ELSE BEGIN										
"IF CALCDATE(TransServerTableSetup.""Expiration Calculation"",TransServerTableLog.""Last Lookup"") <= TODAY() THEN BEGIN"										
pRead := TRUE;										
pLogRead := TRUE;										
END ELSE BEGIN										
pRead := FALSE;										
pLogRead := TRUE;										
END;										
END;										
END;										
END;										
END;										
										
PROCEDURE SetTSReadLog@1200070013(pTableNo@1200070000 : Integer;pKey@1200070001 : Text[200]);										
VAR										
TransServerTableLog@1200070004 : Record 99001458;										
BEGIN										
//SetTSReadLog										
//Function to set a TS Read Log for a given table and record (primary key).										
										
"IF NOT TransServerTableLog.GET(pTableNo,pKey) THEN BEGIN"										
TransServerTableLog.INIT();										
"TransServerTableLog.""Table No."" := pTableNo;"										
TransServerTableLog.Key := pKey;										
"TransServerTableLog.""Last Lookup"" := TODAY();"										
TransServerTableLog.INSERT();										
END ELSE BEGIN										
"TransServerTableLog.""Last Lookup"" := TODAY();"										
TransServerTableLog.MODIFY();										
END;										
END;										
										
PROCEDURE ProcessMSRStaffLogin@1200070017(pMSRTrack@1200070000 : Text;VAR pStaffID@1100409000 : Text) : Boolean;										
VAR										
msrCards@1200070001 : Record 10000729;										
BEGIN										
"IF NOT PosFuncProfile.""Allow MSR Cards"" THEN BEGIN"										
POSGUI.PosMessage(										
STRSUBSTNO(										
"Text301,PosFuncProfile.FIELDCAPTION(""Allow MSR Cards""),PosFuncProfile.""Allow MSR Cards"","										
"PosFuncProfile.TABLECAPTION,PosFuncProfile.""Profile ID""));"										
END										
ELSE BEGIN										
"IF PosSetup.""Use Non-Payment Track Handling"" THEN"										
pMSRTrack := PosSetup.EditNonPaymentTrack(pMSRTrack);										
										
IF STRLEN(pMSRTrack) <= 100 THEN										
IF msrCards.GET(pMSRTrack) THEN BEGIN										
"IF msrCards.""Link Type"" = msrCards.""Link Type""::Cashier THEN BEGIN"										
"pStaffID := msrCards.""Link No."";"										
EXIT(TRUE);										
END;										
END;										
END;										
										
EXIT(FALSE);										
END;										
										
PROCEDURE GetSuggestedQty@10012000(VAR Item@10012000 : Record 27) : Decimal;										
VAR										
ItemCategory@10012002 : Record 5722;										
ProductGroup@10012003 : Record 5723;										
SuggestedQty@10012004 : Decimal;										
BEGIN										
//GetSuggestedQty										
										
"SuggestedQty := Item.""Suggested Qty. on POS"";"										
										
IF SuggestedQty = 0 THEN										
"IF (Item.""Item Category Code"" <> '') AND (Item.""Product Group Code"" <> '') THEN"										
"IF ProductGroup.GET(Item.""Item Category Code"",Item.""Product Group Code"") THEN"										
"SuggestedQty := ProductGroup.""Suggested Qty. on POS"";"										
										
IF SuggestedQty = 0 THEN										
"IF Item.""Item Category Code"" <> '' THEN"										
"IF ItemCategory.GET(Item.""Item Category Code"") THEN"										
"SuggestedQty := ItemCategory.""Suggested Qty. on POS"";"										
										
EXIT(SuggestedQty);										
END;										
										
PROCEDURE GetTransInUseOnPos@10012001(ReceiptNo@10012000 : Code[20]) : Code[20];										
VAR										
TableInUseOnPos@10012001 : Record 10001214;										
BEGIN										
//GetTableInUseOnPos										
IF NOT BOUtils.IsHospitalityPermitted THEN										
EXIT('');										
										
IF TableInUseOnPos.GET(ReceiptNo) THEN										
"EXIT(TableInUseOnPos.""In Use on POS Terminal"");"										
										
EXIT('');										
END;										
										
PROCEDURE InsertTransInUseOnPos@10012002(ReceiptNo@10012001 : Code[20];InUseOnPos@10012000 : Code[10];CommitOk@10012003 : Boolean;Lo	ck@	110	4	90	00 : Boolean) : Boolean;					
VAR										
TableInUseOnPos@10012002 : Record 10001214;										
BEGIN										
//InsertTableInUseOnPos										
IF NOT BOUtils.IsHospitalityPermitted THEN										
//LS7.1-11-										
EXIT(FALSE);										
IF InUseOnPos = '' THEN										
EXIT(FALSE);										
										
IF Lock THEN BEGIN										
IF TableInUseOnPos.GET(ReceiptNo) THEN BEGIN										
"IF (TableInUseOnPos.""In Use on POS Terminal"" <> '') THEN"										
"IF (TableInUseOnPos.""In Use on POS Terminal"" <> InUseOnPos) THEN  //already locked, cannot lock"										
EXIT(FALSE);										
"IF (TableInUseOnPos.""In Use on POS Terminal"" <> InUseOnPos) THEN BEGIN"										
"TableInUseOnPos.""In Use on POS Terminal"" := InUseOnPos;"										
TableInUseOnPos.MODIFY;										
END;										
END ELSE BEGIN										
"TableInUseOnPos.""Receipt No."" := ReceiptNo;"										
"TableInUseOnPos.""In Use on POS Terminal"" := InUseOnPos;"										
TableInUseOnPos.INSERT;										
IF CommitOk THEN										
COMMIT;										
END;										
END ELSE BEGIN										
IF TableInUseOnPos.GET(ReceiptNo) THEN BEGIN										
"IF TableInUseOnPos.""In Use on POS Terminal"" = InUseOnPos THEN BEGIN  //unlock only if locked by this terminal"										
"TableInUseOnPos.""In Use on POS Terminal"" := '';"										
TableInUseOnPos.MODIFY;										
END;										
END;										
END;										
EXIT(TRUE);										
//LS7.1-11+										
										
{//LS7.1-11										
IF NOT TableInUseOnPos.RECORDLEVELLOCKING THEN										
TableInUseOnPos.LOCKTABLE(TRUE);										
										
IF TableInUseOnPos.GET(ReceiptNo) THEN BEGIN										
"IF (TableInUseOnPos.""In Use on POS Terminal"" <> InUseOnPos) THEN BEGIN"										
"TableInUseOnPos.""In Use on POS Terminal"" := InUseOnPos;"										
TableInUseOnPos.MODIFY();										
IF CommitOk THEN										
COMMIT;										
END;										
END ELSE BEGIN										
IF (InUseOnPos <> '') THEN BEGIN										
"TableInUseOnPos.""Receipt No."" := ReceiptNo;"										
"TableInUseOnPos.""In Use on POS Terminal"" := InUseOnPos;"										
TableInUseOnPos.INSERT();										
IF CommitOk THEN										
COMMIT;										
END;										
END;										
}//LS7.1-11										
END;										
										
PROCEDURE UpdateTransPrices@10012014(PosTrans@10012000 : Record 99008980);										
VAR										
PosSL@1006 : Record 99008981;										
PosPriceUtil@1200070000 : Codeunit 99008906;										
BEGIN										
//UpdateTransPrices										
PosSL.RESET;										
"PosSL.SETRANGE(""Receipt No."",PosTrans.""Receipt No."");"										
"PosSL.SETRANGE(""Entry Type"",PosSL.""Entry Type""::Item);"										
										
"IF PosSL.FINDSET(TRUE,FALSE) THEN REPEAT"										
PosPriceUtil.UpdatePrice(PosSL);										
PosSL.CalcPrices;										
"PosPriceUtil.CalcPeriodicDisc(PosSL,TRUE);"										
PosSL.MODIFY;										
UNTIL PosSL.NEXT = 0;										
										
PosPriceUtil.CalcPeriodicOnTotalPressed(PosTrans);										
RecalcSlip(PosTrans);										
END;										
										
PROCEDURE CopyItemsFromPostTrans@10012016(VAR PosTr@10012000 : Record 99008980;TransHdr@10012002 : Record 99001472);										
VAR										
PosTrLine@10012001 : Record 99008981;										
ParentPosTrLine@1100409008 : Record 99008981;										
TransSalesEntry@10012003 : Record 99001473;										
PosTrInfocodeEntry@1100409009 : Record 99008982;										
ParentTransInfoEntry@1100409010 : Record 99001478;										
PosVariant@1100409014 : Record 5401;										
DealModItem@1100409015 : Record 99001651;										
BomComp@1100409016 : Record 90;										
PosPriceUtil@10012004 : Codeunit 99008906;										
PopUpFunctions@1100409001 : Codeunit 10000735;										
UnitOfMeasureMgt@1100409017 : Codeunit 5402;										
UOMFactor@1100409006 : Decimal;										
LinkedParentNo@10012005 : Integer;										
Item@10012006 : Record 27;										
InfoSubcode@1100409000 : Record 99001483;										
ItemPrice@1100409002 : Decimal;										
SetPrice@1100409003 : Boolean;										
ItemQty@1100409004 : Decimal;										
ItemUOM@1100409005 : Code[10];										
CurrParentLine@1100409011 : Integer;										
SkipLine@1100409012 : Boolean;										
PriceUpdated@1100409013 : Boolean;										
TransDate@1100409018 : Date;										
TransTime@1100409007 : Time;										
BEGIN										
//CopyItemsFromPostTrans										
//LS7.1-06-										
PosTrLine.RESET;										
CurrParentLine := 0;										
CLEAR(DealPosTransLineTmp);										
DealPosTransLineTmp.DELETEALL;										
CLEAR(POSTransLineTemp);										
POSTransLineTemp.DELETEALL;										
CLEAR(POSTransLineTemp2);										
POSTransLineTemp2.DELETEALL;										
CLEAR(TmpPosTrInfoEntry);										
TmpPosTrInfoEntry.DELETEALL;										
										
TransDate := TODAY;										
TransTime := TIME;										
										
"TransSalesEntry.SETRANGE(""Store No."",TransHdr.""Store No."");"										
"TransSalesEntry.SETRANGE(""POS Terminal No."",TransHdr.""POS Terminal No."");"										
"TransSalesEntry.SETRANGE(""Transaction No."",TransHdr.""Transaction No."");"										
IF TransSalesEntry.FIND('-') THEN BEGIN										
REPEAT										
POSTransLineTemp.INIT;										
"POSTransLineTemp.""Receipt No."" := PosTr.""Receipt No."";"										
"POSTransLineTemp.""Store No."" := PosTr.""Store No."";"										
"POSTransLineTemp.""POS Terminal No."" := PosTr.""POS Terminal No."";"										
"POSTransLineTemp.""Entry Type"" := PosTrLine.""Entry Type""::Item;"										
"POSTransLineTemp.""Line No."" := TransSalesEntry.""Line No."";"										
"POSTransLineTemp.""Parent Line"" := TransSalesEntry.""Line No."";"										
"POSTransLineTemp.""Barcode No."" := TransSalesEntry.""Barcode No."";"										
"POSTransLineTemp.""Entry Status"" := 0;"										
"POSTransLineTemp.""Sales Type"" := PosTr.""Sales Type"";"										
"IF Item.GET(TransSalesEntry.""Item No."") THEN BEGIN"										
"POSTransLineTemp.VALIDATE(Number,TransSalesEntry.""Item No."");"										
"POSTransLineTemp.""Variant Code"" := TransSalesEntry.""Variant Code"";"										
"IF PosVariant.GET(POSTransLineTemp.Number,POSTransLineTemp.""Variant Code"") THEN"										
POSTransLineTemp.Description :=										
COPYSTR(										
"PosVariant.Description + ' ' + PosVariant.""Description 2"",1,MAXSTRLEN(POSTransLineTemp.Description));"										
										
"IF TransSalesEntry.""Unit of Measure"" <> Item.""Base Unit of Measure"" THEN BEGIN"										
"IF TransSalesEntry.""Unit of Measure"" <> Item.""Sales Unit of Measure"" THEN BEGIN"										
"POSTransLineTemp.VALIDATE(""Unit of Measure"",TransSalesEntry.""Unit of Measure"");"										
"POSTransLineTemp.VALIDATE(Quantity,-TransSalesEntry.""UOM Quantity"");"										
END ELSE BEGIN										
"UOMFactor := UnitOfMeasureMgt.GetQtyPerUnitOfMeasure(Item,TransSalesEntry.""Unit of Measure"");"										
IF UOMFactor <> 0 THEN										
"POSTransLineTemp.VALIDATE(Quantity,ROUND(-TransSalesEntry.Quantity / UOMFactor,0.00001))"										
ELSE										
"POSTransLineTemp.VALIDATE(Quantity,-TransSalesEntry.Quantity);"										
END;										
END ELSE										
"POSTransLineTemp.VALIDATE(Quantity,-TransSalesEntry.Quantity);"										
"IF (TransSalesEntry.""Orig. of a Linked Item List"" = TRUE) THEN BEGIN"										
"POSTransLineTemp.""Orig. of a Linked Item List"" := TRUE;"										
"LinkedParentNo := TransSalesEntry.""Line No."";"										
END;										
"IF (TransSalesEntry.""Linked No. not Orig."" = TRUE) THEN BEGIN"										
"POSTransLineTemp.""Linked No. not Orig."" := TRUE;"										
"POSTransLineTemp.""Parent Line"" := LinkedParentNo;"										
END;										
"IF Item.""Qty. Becomes Negative"" THEN"										
"POSTransLineTemp.""Item/Dept. Negative"" := TRUE;"										
SkipLine := FALSE;										
PriceUpdated := FALSE;										
										
"IF TransSalesEntry.""Deal Line"" AND (TransSalesEntry.""Promotion No."" <> '') THEN BEGIN"										
"IF NOT CheckIfDealValid(TransSalesEntry,POSTransLineTemp) THEN"										
SkipLine := TRUE										
ELSE BEGIN										
"POSTransLineTemp.""Disc. Info Line No."" := TransSalesEntry.""Deal Header Line No."";"										
"POSTransLineTemp.""Deal Line"" := TRUE;"										
"POSTransLineTemp.""Deal Modifier Line No."" := TransSalesEntry.""Deal Modifier Line No."";"										
"POSTransLineTemp.""Deal Line No."" := TransSalesEntry.""Deal Line No."";"										
PosPriceUtil.UpdatePrice(POSTransLineTemp);										
PriceUpdated := TRUE;										
"POSTransLineTemp.""Promotion No."" := TransSalesEntry.""Promotion No."";"										
"POSTransLineTemp.""Parent Line"" := TransSalesEntry.""Deal Header Line No."";"										
"IF DealModItem.GET(POSTransLineTemp.""Promotion No."",POSTransLineTemp.""Deal Line No."",POSTransLineTemp.""Deal Modifier Lin"	e N	"o."""	)	THE	N					
"POSTransLineTemp.""Deal Added Amount"" := DealModItem.""Added Amount"" * POSTransLineTemp.Quantity;"										
END;										
END;										
										
SetPrice := FALSE;										
ItemPrice := 0;										
"IF TransSalesEntry.""Excluded BOM Line No."" <> 0 THEN BEGIN"										
"IF NOT BomComp.GET(TransSalesEntry.""Parent Item No."",TransSalesEntry.""Excluded BOM Line No."") THEN"										
SkipLine := TRUE										
ELSE BEGIN										
"IF BomComp.""No."" <> TransSalesEntry.""Item No."" THEN"										
SkipLine := TRUE										
ELSE BEGIN										
"IF BomComp.Exclusion = BomComp.Exclusion::""Price Reduces"" THEN BEGIN"										
"IF BomComp.""Price on Exclusion"" = 0 THEN BEGIN"										
IF TransSalesEntry.Price = 0 THEN BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END ELSE										
SetPrice := FALSE;										
END ELSE BEGIN										
IF TransSalesEntry.Price = 0 THEN BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END ELSE BEGIN										
SetPrice := TRUE;										
"ItemPrice := BomComp.""Price on Exclusion"" / BomComp.""Quantity per"";"										
END;										
END;										
END ELSE BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END;										
IF SetPrice THEN BEGIN										
"POSTransLineTemp.VALIDATE(Price,ItemPrice);"										
PriceUpdated := TRUE;										
END;										
END;										
END;										
END;										
										
SetPrice := FALSE;										
ItemPrice := 0;										
"IF TransSalesEntry.""Orig. from Infocode"" <> '' THEN BEGIN"										
"IF InfoSubcode.GET(TransSalesEntry.""Orig. from Infocode"",TransSalesEntry.""Orig. from Subcode"") THEN BEGIN"										
"IF CurrParentLine <> TransSalesEntry.""Parent Line No."" THEN BEGIN"										
"POSTransLineTemp2.GET(PosTr.""Receipt No."",TransSalesEntry.""Parent Line No."");"										
"CurrParentLine := TransSalesEntry.""Parent Line No."";"										
ItemPrice := POSTransLineTemp2.Price;										
END;										
IF NOT ParentTransInfoEntry.GET(										
"TransSalesEntry.""Store No."",TransSalesEntry.""POS Terminal No."",TransSalesEntry.""Transaction No."","										
"ParentTransInfoEntry.""Transaction Type""::""Sales Entry"",TransSalesEntry.""Parent Line No."","										
"TransSalesEntry.""Orig. from Infocode"",TransSalesEntry.""Infocode Entry Line No."")"										
THEN										
SkipLine := TRUE;										
IF NOT SkipLine THEN BEGIN										
SetPrice := FALSE;										
"PopUpFunctions.ItemSubcodeItemInfo(InfoSubcode,ItemPrice,SetPrice,ItemQty,ItemUOM);"										
IF TransSalesEntry.Price = 0 THEN BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END;										
TmpPosTrInfoEntry.INIT;										
"TmpPosTrInfoEntry.""Receipt No."" := PosTr.""Receipt No."";"										
"TmpPosTrInfoEntry.""Transaction Type"" := TmpPosTrInfoEntry.""Transaction Type""::""Sales Entry"";"										
"TmpPosTrInfoEntry.""Line No."" := POSTransLineTemp2.""Line No."";"										
TmpPosTrInfoEntry.Infocode := ParentTransInfoEntry.Infocode;										
"TmpPosTrInfoEntry.""Entry Line No."" := ParentTransInfoEntry.""Entry Line No."";"										
"TmpPosTrInfoEntry.""Store No."" := PosTr.""Store No."";"										
TmpPosTrInfoEntry.Information := ParentTransInfoEntry.Information;										
"TmpPosTrInfoEntry.""Info. Amt."" := ParentTransInfoEntry.""Info. Amt."";"										
TmpPosTrInfoEntry.Date := TransDate;										
TmpPosTrInfoEntry.Time := TransTime;										
"TmpPosTrInfoEntry.""POS Terminal No."" := PosTr.""POS Terminal No."";"										
"TmpPosTrInfoEntry.""Staff ID"" := PosTr.""Staff ID"";"										
"TmpPosTrInfoEntry.""No."" := ParentTransInfoEntry.""No."";"										
"TmpPosTrInfoEntry.""Variant Code"" := ParentTransInfoEntry.""Variant Code"";"										
TmpPosTrInfoEntry.Amount := ParentTransInfoEntry.Amount;										
"TmpPosTrInfoEntry.""Type of Input"" := ParentTransInfoEntry.""Type of Input"";"										
TmpPosTrInfoEntry.Subcode := ParentTransInfoEntry.Subcode;										
"TmpPosTrInfoEntry.""Entry Variant Code"" := ParentTransInfoEntry.""Entry Variant Code"";"										
"TmpPosTrInfoEntry.""Entry Trigger Function"" := ParentTransInfoEntry.""Entry Trigger Function"";"										
"TmpPosTrInfoEntry.""Entry Trigger Code"" := ParentTransInfoEntry.""Entry Trigger Code"";"										
"TmpPosTrInfoEntry.""Source Code"" := ParentTransInfoEntry.""Source Code"";"										
"TmpPosTrInfoEntry.""Selected Quantity"" := ParentTransInfoEntry.""Selected Quantity"";"										
TmpPosTrInfoEntry.Counter := ParentTransInfoEntry.Counter;										
TmpPosTrInfoEntry.Status := TmpPosTrInfoEntry.Status::Processed;										
"TmpPosTrInfoEntry.""Set Price"" := SetPrice;"										
"TmpPosTrInfoEntry.""New Price"" := ItemPrice;"										
"TmpPosTrInfoEntry.""Skip Posting to Info. Entry"" := FALSE;"										
"TmpPosTrInfoEntry.""Line Inserted and Linked"" :=  TRUE;"										
"TmpPosTrInfoEntry.""Sel. Qty. (Set Price)"" := 0;"										
TmpPosTrInfoEntry.INSERT;										
END;										
END ELSE										
SkipLine := TRUE;										
										
IF NOT SkipLine THEN BEGIN										
IF ItemUOM <> '' THEN										
"POSTransLineTemp.VALIDATE(""Unit of Measure"",ItemUOM);"										
IF SetPrice THEN										
"POSTransLineTemp.VALIDATE(Price,ItemPrice)"										
ELSE										
PosPriceUtil.UpdatePrice(POSTransLineTemp);										
PriceUpdated := TRUE;										
"POSTransLineTemp.""Parent Line"" := TransSalesEntry.""Parent Line No."";"										
"POSTransLineTemp.""Orig. from Infocode"" := TransSalesEntry.""Orig. from Infocode"";"										
"POSTransLineTemp.""Orig. from Subcode"" := TransSalesEntry.""Orig. from Subcode"";"										
"POSTransLineTemp.""Infocode Entry Line No."" := TransSalesEntry.""Infocode Entry Line No."";"										
"POSTransLineTemp.""Infocode Selected Qty."" := TransSalesEntry.""Infocode Selected Qty."";"										
END;										
END;										
										
IF NOT PriceUpdated THEN										
PosPriceUtil.UpdatePrice(POSTransLineTemp);										
										
IF NOT SkipLine THEN BEGIN										
POSTransLineTemp.CalcPrices;										
POSTransLineTemp.INSERT;										
POSTransLineTemp2 := POSTransLineTemp;										
POSTransLineTemp2.INSERT;										
END;										
END;										
UNTIL TransSalesEntry.NEXT = 0;										
										
"PosTr.GET(PosTr.""Receipt No."");"										
"PosTr.""Trans. Date"" := TransDate;"										
"PosTr.""Original Date"" := TransDate;"										
"PosTr.""Trans Time"" := TransTime;"										
PosTr.MODIFY;										
										
POSTransLineTemp.RESET;										
IF POSTransLineTemp.FIND('-') THEN										
REPEAT										
PosTrLine.INIT;										
PosTrLine := POSTransLineTemp;										
PosTrLine.INSERT;										
"PosPriceUtil.CalcPeriodicDisc(PosTrLine,TRUE);"										
UNTIL POSTransLineTemp.NEXT = 0;										
										
PosTrLine.RESET;										
"PosTrLine.SETRANGE(""Receipt No."",PosTr.""Receipt No."");"										
"PosTrLine.SETRANGE(""Text Type"",PosTrLine.""Text Type""::""Deal Header"");"										
IF PosTrLine.FINDSET THEN										
REPEAT										
PosPriceUtil.RegisterDeal(PosTrLine);										
UNTIL PosTrLine.NEXT = 0;										
PosPriceUtil.CalcPeriodicOnTotalPressed(PosTr);										
										
TmpPosTrInfoEntry.RESET;										
IF TmpPosTrInfoEntry.FIND('-') THEN										
REPEAT										
PosTrInfocodeEntry.INIT;										
PosTrInfocodeEntry := TmpPosTrInfoEntry;										
PosTrInfocodeEntry.INSERT;										
UNTIL TmpPosTrInfoEntry.NEXT = 0;										
END;										
//LS7.1-06+										
										
{//LS7.1-06										
"PosTr.""Trans. Date"" := TODAY;"										
"PosTr.""Original Date"" := TODAY;"										
"PosTr.""Trans Time"" := TIME;"										
PosTr.MODIFY;										
										
PosTrLine.RESET;										
CurrParentLine := 0;										
CLEAR(DealPosTransLineTmp);										
DealPosTransLineTmp.DELETEALL;										
										
"TransSalesEntry.SETRANGE(""Store No."",TransHdr.""Store No."");"										
"TransSalesEntry.SETRANGE(""POS Terminal No."",TransHdr.""POS Terminal No."");"										
"TransSalesEntry.SETRANGE(""Transaction No."",TransHdr.""Transaction No."");"										
IF TransSalesEntry.FIND('-') THEN BEGIN										
REPEAT										
PosTrLine.INIT;										
"PosTrLine.""Receipt No."" := PosTr.""Receipt No."";"										
"PosTrLine.""Store No."" := PosTr.""Store No."";"										
"PosTrLine.""POS Terminal No."" := PosTr.""POS Terminal No."";"										
"PosTrLine.""Entry Type"" := PosTrLine.""Entry Type""::Item;"										
"PosTrLine.""Line No."" := TransSalesEntry.""Line No."";"										
"PosTrLine.""Parent Line"" := TransSalesEntry.""Line No."";"										
"PosTrLine.""Barcode No."" := TransSalesEntry.""Barcode No."";"										
"PosTrLine.""Entry Status"" := 0;"										
"PosTrLine.""Sales Type"" := PosTr.""Sales Type"";"										
"IF Item.GET(TransSalesEntry.""Item No."") THEN BEGIN"										
"PosTrLine.VALIDATE(Number,TransSalesEntry.""Item No."");"										
"PosTrLine.""Variant Code"" := TransSalesEntry.""Variant Code"";"										
"IF PosVariant.GET(PosTrLine.Number,PosTrLine.""Variant Code"") THEN"										
PosTrLine.Description :=										
COPYSTR(										
"PosVariant.Description + ' ' + PosVariant.""Description 2"",1,MAXSTRLEN(PosTrLine.Description));"										
										
"IF TransSalesEntry.""Unit of Measure"" <> Item.""Base Unit of Measure"" THEN BEGIN"										
"IF TransSalesEntry.""Unit of Measure"" <> Item.""Sales Unit of Measure"" THEN BEGIN"										
"PosTrLine.VALIDATE(""Unit of Measure"",TransSalesEntry.""Unit of Measure"");"										
"PosTrLine.VALIDATE(Quantity,-TransSalesEntry.""UOM Quantity"");"										
END ELSE BEGIN										
"UOMFactor := UnitOfMeasureMgt.GetQtyPerUnitOfMeasure(Item,TransSalesEntry.""Unit of Measure"");"										
IF UOMFactor <> 0 THEN										
"PosTrLine.VALIDATE(Quantity,ROUND(-TransSalesEntry.Quantity / UOMFactor,0.00001))"										
ELSE										
"PosTrLine.VALIDATE(Quantity,-TransSalesEntry.Quantity);"										
END;										
END ELSE										
"PosTrLine.VALIDATE(Quantity,-TransSalesEntry.Quantity);"										
"IF (TransSalesEntry.""Orig. of a Linked Item List"" = TRUE) THEN BEGIN"										
"PosTrLine.""Orig. of a Linked Item List"" := TRUE;"										
"LinkedParentNo := TransSalesEntry.""Line No."";"										
END;										
"IF (TransSalesEntry.""Linked No. not Orig."" = TRUE) THEN BEGIN"										
"PosTrLine.""Linked No. not Orig."" := TRUE;"										
"PosTrLine.""Parent Line"" := LinkedParentNo;"										
END;										
"IF Item.""Qty. Becomes Negative"" THEN"										
"PosTrLine.""Item/Dept. Negative"" := TRUE;"										
SkipLine := FALSE;										
PriceUpdated := FALSE;										
										
"IF TransSalesEntry.""Deal Line"" AND (TransSalesEntry.""Promotion No."" <> '') THEN BEGIN"										
"IF NOT CheckIfDealValid(TransSalesEntry,PosTrLine) THEN"										
SkipLine := TRUE										
ELSE BEGIN										
"PosTrLine.""Disc. Info Line No."" := TransSalesEntry.""Deal Header Line No."";"										
"PosTrLine.""Deal Line"" := TRUE;"										
"PosTrLine.""Deal Modifier Line No."" := TransSalesEntry.""Deal Modifier Line No."";"										
"PosTrLine.""Deal Line No."" := TransSalesEntry.""Deal Line No."";"										
PosPriceUtil.UpdatePrice(PosTrLine);										
PriceUpdated := TRUE;										
"PosTrLine.""Promotion No."" := TransSalesEntry.""Promotion No."";"										
"PosTrLine.""Parent Line"" := TransSalesEntry.""Deal Header Line No."";"										
"IF DealModItem.GET(PosTrLine.""Promotion No."",PosTrLine.""Deal Line No."",PosTrLine.""Deal Modifier Line No."") THEN"										
"PosTrLine.""Deal Added Amount"" := DealModItem.""Added Amount"" * PosTrLine.Quantity;"										
END;										
END;										
										
SetPrice := FALSE;										
ItemPrice := 0;										
"IF TransSalesEntry.""Excluded BOM Line No."" <> 0 THEN BEGIN"										
"IF NOT BomComp.GET(TransSalesEntry.""Parent Item No."",TransSalesEntry.""Excluded BOM Line No."") THEN"										
SkipLine := TRUE										
ELSE BEGIN										
"IF BomComp.""No."" <> TransSalesEntry.""Item No."" THEN"										
SkipLine := TRUE										
ELSE BEGIN										
"IF BomComp.Exclusion = BomComp.Exclusion::""Price Reduces"" THEN BEGIN"										
"IF BomComp.""Price on Exclusion"" = 0 THEN BEGIN"										
IF TransSalesEntry.Price = 0 THEN BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END ELSE										
SetPrice := FALSE;										
END ELSE BEGIN										
IF TransSalesEntry.Price = 0 THEN BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END ELSE BEGIN										
SetPrice := TRUE;										
"ItemPrice := BomComp.""Price on Exclusion"" / BomComp.""Quantity per"";"										
END;										
END;										
END ELSE BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END;										
IF SetPrice THEN BEGIN										
"PosTrLine.VALIDATE(Price,ItemPrice);"										
PriceUpdated := TRUE;										
END;										
END;										
END;										
END;										
										
SetPrice := FALSE;										
ItemPrice := 0;										
"IF TransSalesEntry.""Orig. from Infocode"" <> '' THEN BEGIN"										
"IF InfoSubcode.GET(TransSalesEntry.""Orig. from Infocode"",TransSalesEntry.""Orig. from Subcode"") THEN BEGIN"										
"IF CurrParentLine <> TransSalesEntry.""Parent Line No."" THEN BEGIN"										
"ParentPosTrLine.GET(PosTr.""Receipt No."",TransSalesEntry.""Parent Line No."");"										
"CurrParentLine := TransSalesEntry.""Parent Line No."";"										
ItemPrice := ParentPosTrLine.Price;										
END;										
IF NOT ParentTransInfoEntry.GET(										
"TransSalesEntry.""Store No."",TransSalesEntry.""POS Terminal No."",TransSalesEntry.""Transaction No."","										
"ParentTransInfoEntry.""Transaction Type""::""Sales Entry"",TransSalesEntry.""Parent Line No."","										
"TransSalesEntry.""Orig. from Infocode"",TransSalesEntry.""Infocode Entry Line No."")"										
THEN										
SkipLine := TRUE;										
IF NOT SkipLine THEN BEGIN										
SetPrice := FALSE;										
"PopUpFunctions.ItemSubcodeItemInfo(InfoSubcode,ItemPrice,SetPrice,ItemQty,ItemUOM);"										
IF TransSalesEntry.Price = 0 THEN BEGIN										
SetPrice := TRUE;										
ItemPrice := 0;										
END;										
PosTrInfocodeEntry.INIT;										
"PosTrInfocodeEntry.""Receipt No."" := PosTr.""Receipt No."";"										
"PosTrInfocodeEntry.""Transaction Type"" := PosTrInfocodeEntry.""Transaction Type""::""Sales Entry"";"										
"PosTrInfocodeEntry.""Line No."" := ParentPosTrLine.""Line No."";"										
PosTrInfocodeEntry.Infocode := ParentTransInfoEntry.Infocode;										
"PosTrInfocodeEntry.""Entry Line No."" := ParentTransInfoEntry.""Entry Line No."";"										
"PosTrInfocodeEntry.""Store No."" := PosTr.""Store No."";"										
PosTrInfocodeEntry.Information := ParentTransInfoEntry.Information;										
"PosTrInfocodeEntry.""Info. Amt."" := ParentTransInfoEntry.""Info. Amt."";"										
"PosTrInfocodeEntry.Date := PosTr.""Trans. Date"";"										
"PosTrInfocodeEntry.Time := PosTr.""Trans Time"";"										
"PosTrInfocodeEntry.""POS Terminal No."" := PosTr.""POS Terminal No."";"										
"PosTrInfocodeEntry.""Staff ID"" := PosTr.""Staff ID"";"										
"PosTrInfocodeEntry.""No."" := ParentTransInfoEntry.""No."";"										
"PosTrInfocodeEntry.""Variant Code"" := ParentTransInfoEntry.""Variant Code"";"										
PosTrInfocodeEntry.Amount := ParentTransInfoEntry.Amount;										
"PosTrInfocodeEntry.""Type of Input"" := ParentTransInfoEntry.""Type of Input"";"										
PosTrInfocodeEntry.Subcode := ParentTransInfoEntry.Subcode;										
"PosTrInfocodeEntry.""Entry Variant Code"" := ParentTransInfoEntry.""Entry Variant Code"";"										
"PosTrInfocodeEntry.""Entry Trigger Function"" := ParentTransInfoEntry.""Entry Trigger Function"";"										
"PosTrInfocodeEntry.""Entry Trigger Code"" := ParentTransInfoEntry.""Entry Trigger Code"";"										
"PosTrInfocodeEntry.""Source Code"" := ParentTransInfoEntry.""Source Code"";"										
"PosTrInfocodeEntry.""Selected Quantity"" := ParentTransInfoEntry.""Selected Quantity"";"										
PosTrInfocodeEntry.Counter := ParentTransInfoEntry.Counter;										
PosTrInfocodeEntry.Status := PosTrInfocodeEntry.Status::Processed;										
"PosTrInfocodeEntry.""Set Price"" := SetPrice;"										
"PosTrInfocodeEntry.""New Price"" := ItemPrice;"										
"PosTrInfocodeEntry.""Skip Posting to Info. Entry"" := FALSE;"										
"PosTrInfocodeEntry.""Line Inserted and Linked"" :=  TRUE;"										
"PosTrInfocodeEntry.""Sel. Qty. (Set Price)"" := 0;"										
PosTrInfocodeEntry.INSERT;										
END;										
END ELSE										
SkipLine := TRUE;										
										
IF NOT SkipLine THEN BEGIN										
IF ItemUOM <> '' THEN										
"PosTrLine.VALIDATE(""Unit of Measure"",ItemUOM);"										
IF SetPrice THEN										
"PosTrLine.VALIDATE(Price,ItemPrice)"										
ELSE										
PosPriceUtil.UpdatePrice(PosTrLine);										
PriceUpdated := TRUE;										
"PosTrLine.""Parent Line"" := TransSalesEntry.""Parent Line No."";"										
"PosTrLine.""Orig. from Infocode"" := TransSalesEntry.""Orig. from Infocode"";"										
"PosTrLine.""Orig. from Subcode"" := TransSalesEntry.""Orig. from Subcode"";"										
"PosTrLine.""Infocode Entry Line No."" := TransSalesEntry.""Infocode Entry Line No."";"										
"PosTrLine.""Infocode Selected Qty."" := TransSalesEntry.""Infocode Selected Qty."";"										
END;										
END;										
										
IF NOT PriceUpdated THEN										
PosPriceUtil.UpdatePrice(PosTrLine);										
										
IF NOT SkipLine THEN BEGIN										
PosTrLine.CalcPrices;										
PosTrLine.INSERT;										
"PosPriceUtil.CalcPeriodicDisc(PosTrLine,TRUE);"										
END;										
END;										
UNTIL TransSalesEntry.NEXT = 0;										
PosTrLine.RESET;										
"PosTrLine.SETRANGE(""Receipt No."",PosTr.""Receipt No."");"										
"PosTrLine.SETRANGE(""Text Type"",PosTrLine.""Text Type""::""Deal Header"");"										
IF PosTrLine.FINDSET THEN										
REPEAT										
PosPriceUtil.RegisterDeal(PosTrLine);										
UNTIL PosTrLine.NEXT = 0;										
PosPriceUtil.CalcPeriodicOnTotalPressed(PosTr);										
END;										
} //LS7.1-06										
END;										
										
PROCEDURE CheckIfDealValid@1100409072(TrSalesEntry@1100409000 : Record 99001473;NewPOSTransLine@1100409001 : Record 99008981) : Bool	ean	;								
VAR										
DealPosTrLine@1100409002 : Record 99008981;										
Deal@1100409003 : Record 99001502;										
DealTransEntry@1100409005 : Record 99001473;										
DealModItem@1100409008 : Record 99001651;										
DealEntry@1100409009 : Record 99001460;										
RetailPriceUtils@1100409004 : Codeunit 99001462;										
InvalidDeal@1100409006 : Boolean;										
BEGIN										
"IF DealPosTransLineTmp.GET(NewPOSTransLine.""Receipt No."",TrSalesEntry.""Deal Header Line No."") THEN"										
EXIT(FALSE);										
										
"IF DealPosTrLine.GET(NewPOSTransLine.""Receipt No."",TrSalesEntry.""Deal Header Line No."") THEN"										
EXIT(TRUE);										
DealPosTransLineTmp.INIT;										
"DealPosTransLineTmp.""Receipt No."" := NewPOSTransLine.""Receipt No."";"										
"DealPosTransLineTmp.""Line No."" := TrSalesEntry.""Deal Header Line No."";"										
										
"IF NOT Deal.GET(TrSalesEntry.""Promotion No."") THEN BEGIN"										
DealPosTransLineTmp.INSERT;										
EXIT(FALSE);										
END;										
										
IF NOT (RetailPriceUtils.OfferFiltersPassed(										
"Deal,NewPOSTransLine.""Store No."",NewPOSTransLine.""Sales Type"",NewPOSTransLine.""Price Group Code"") AND"										
"RetailPriceUtils.DiscValPerValid(Deal.""Validation Period ID"",TODAY,TIME) AND"										
"RetailPriceUtils.MemberFilterPassed(Deal.""Member Type"",Deal.""Member Value"") AND"										
"RetailPriceUtils.MemberAttrFilterPassed(Deal.""Member Attribute"",Deal.""Member Attribute Value""))"										
THEN BEGIN										
DealPosTransLineTmp.INSERT;										
EXIT(FALSE);										
END;										
										
InvalidDeal := FALSE;										
DealTransEntry.RESET;										
"DealTransEntry.SETRANGE(""Store No."",TrSalesEntry.""Store No."");"										
"DealTransEntry.SETRANGE(""POS Terminal No."",TrSalesEntry.""POS Terminal No."");"										
"DealTransEntry.SETRANGE(""Transaction No."",TrSalesEntry.""Transaction No."");"										
"DealTransEntry.SETRANGE(""Deal Header Line No."",TrSalesEntry.""Deal Header Line No."");"										
"DealTransEntry.SETFILTER(""Deal Modifier Line No."",'<>%1',0);"										
IF DealTransEntry.FIND('-') THEN										
REPEAT										
"IF NOT DealModItem.GET(Deal.""No."",DealTransEntry.""Deal Line No."",DealTransEntry.""Deal Modifier Line No."") THEN"										
InvalidDeal := TRUE										
ELSE										
"IF DealTransEntry.""Item No."" <> DealModItem.""Item No."" THEN"										
InvalidDeal := TRUE										
UNTIL (DealTransEntry.NEXT = 0) OR InvalidDeal;										
										
IF InvalidDeal THEN BEGIN										
DealPosTransLineTmp.INSERT;										
EXIT(FALSE);										
END;										
										
DealEntry.RESET;										
"DealEntry.SETRANGE(""Store No."",TrSalesEntry.""Store No."");"										
"DealEntry.SETRANGE(""POS Terminal No."",TrSalesEntry.""POS Terminal No."");"										
"DealEntry.SETRANGE(""Transaction No."",TrSalesEntry.""Transaction No."");"										
"DealEntry.SETRANGE(""Deal Header Line No."",TrSalesEntry.""Deal Header Line No."");"										
//LS7.1-05 DealEntry.FINDFIRST;										
IF NOT DealEntry.FINDFIRST THEN  //LS7.1-05										
CLEAR(DealEntry);  //LS7.1-05										
										
DealPosTrLine.INIT;										
"DealPosTrLine.""Receipt No."" := NewPOSTransLine.""Receipt No."";"										
"DealPosTrLine.""Store No."" := NewPOSTransLine.""Store No."";"										
"DealPosTrLine.""POS Terminal No."" := NewPOSTransLine.""POS Terminal No."";"										
"DealPosTrLine.""Line No."" := TrSalesEntry.""Deal Header Line No."";"										
"DealPosTrLine.""Entry Type"" := DealPosTrLine.""Entry Type""::FreeText;"										
"DealPosTrLine.""Text Type"" := DealPosTrLine.""Text Type""::""Deal Header"";"										
IF Deal.Description = '' THEN										
"DealPosTrLine.Description := Text326 + ' : ' + Deal.""No."""										
ELSE										
DealPosTrLine.Description := Deal.Description;										
"DealPosTrLine.""Promotion No."" := Deal.""No."";"										
"DealPosTrLine.""Deal Line"" := TRUE;"										
DealPosTrLine.Quantity := -DealEntry.Quantity;										
DealPosTrLine.INSERT;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE PadCardNo@10012003(pText@10012000 : Text[30]) : Text[22];										
VAR										
lTmpLength@10012001 : Integer;										
BEGIN										
lTmpLength := STRLEN(pText);										
IF lTmpLength > 4 THEN										
"EXIT(COPYSTR(pText, lTmpLength-3));"										
										
EXIT(pText);										
END;										
										
PROCEDURE DeleteCouponQtyUsed@10012011();										
VAR										
POSTransLine@10012000 : Record 99008981;										
BEGIN										
//DeleteCouponQtyUsed										
										
										
"IF POSTransLine.GET(LastCouponPOSTransLine.""Receipt No."",LastCouponPOSTransLine.""Line No."") THEN BEGIN"										
"POSTransLine.""Coupon Qty Used"" -= LastCouponPOSTransLine.""Coupon Qty Used"";"										
"IF LastCouponPOSTransLine.""Parent Line"" <> 0 THEN BEGIN"										
"POSTransLine.""Coupon Discount Amount"" -= LastCouponPOSTransLine.Amount;"										
"POSTransLine.""Coupon Amt. For Printing"" -= LastCouponPOSTransLine.Amount;"										
END;										
POSTransLine.MODIFY;										
END;										
										
IF tmpPOSTransLine.FINDSET THEN REPEAT										
"POSTransLine.GET(tmpPOSTransLine.""Receipt No."",tmpPOSTransLine.""Line No."");"										
"POSTransLine.""Coupon Qty Used"" := 0;"										
POSTransLine.MODIFY;										
UNTIL tmpPOSTransLine.NEXT = 0;										
END;										
										
PROCEDURE AstrxPad@1100409006(pText@1100409000 : Text[100]) retval : Text[100];										
VAR										
len@1100409001 : Integer;										
BEGIN										
retval := pText;										
len := STRLEN(pText);										
IF len > 4 THEN BEGIN										
WHILE len > 4 DO BEGIN										
retval[len-4] := '*';										
len -= 1;										
END;										
END;										
END;										
										
PROCEDURE NumberPad@1133309007(Str@1100409001 : Text[30];Len@1100409000 : Integer) : Text[30];										
VAR										
i@1100409003 : Integer;										
Str2@1100409002 : Text[30];										
BEGIN										
FOR i := 1 TO 10 DO										
Str2 += Str;										
Str := Str2 + Str;										
"Str := COPYSTR(Str,STRLEN(Str) - Len + 1,Len);"										
EXIT(Str);										
END;										
										
PROCEDURE GetSerialLotSalesQty@1100409008(VAR pPOSTransLine@1100409000 : Record 99008981;pSerialNo@1100409004 : Code[20];pLotNo@1100	409	5	:	Co	de[20]) : Decimal;					
VAR										
POSTransLine@1100409001 : Record 99008981;										
POSTrans@1100409002 : Record 99008980;										
QtyOnPos@1100409003 : Decimal;										
BEGIN										
//GetSerialLotQtyOnPOS										
QtyOnPos := 0;										
CLEAR(POSTrans);										
										
POSTransLine.RESET;										
"POSTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",Number,""Variant Code"",""Unit of Measure"",""Entry Status"");"										
"POSTransLine.SETRANGE(""Entry Type"",POSTransLine.""Entry Type""::Item);"										
"POSTransLine.SETRANGE(Number,pPOSTransLine.Number);"										
"POSTransLine.SETRANGE(""Variant Code"",pPOSTransLine.""Variant Code"");"										
"POSTransLine.SETFILTER(""Entry Status"",'<>%1',POSTransLine.""Entry Status""::Voided);"										
IF pSerialNo <> '' THEN										
"POSTransLine.SETRANGE(""Serial No."",pSerialNo);"										
IF pLotNo <> '' THEN										
"POSTransLine.SETRANGE(""Lot No."",pLotNo);"										
IF POSTransLine.FINDSET THEN										
REPEAT										
"IF POSTransLine.""Receipt No."" <> POSTrans.""Receipt No."" THEN"										
"POSTrans.GET(POSTransLine.""Receipt No."");"										
"IF (POSTrans.""Transaction Type"" <> POSTrans.""Transaction Type""::Voided) AND"										
"(POSTrans.""Entry Status"" <> POSTrans.""Entry Status""::Voided) THEN BEGIN"										
"IF POSTrans.""Sale Is Return Sale"" THEN"										
POSTransLine.Quantity := -POSTransLine.Quantity;										
QtyOnPos := QtyOnPos + POSTransLine.Quantity;										
END;										
UNTIL POSTransLine.NEXT = 0;										
										
EXIT(QtyOnPos);										
END;										
										
PROCEDURE GetSerialLotSalesQtyExclCurr@1100409011(VAR pPOSTransLine@1100409000 : Record 99008981;pSerialNo@1100409005 : Code[20];pLo	tNo	@11	0	409	006 : Code[20]) : Decimal;					
VAR										
POSTrans@1100409002 : Record 99008980;										
QtyOnPos@1100409003 : Decimal;										
QtyCurrLine@1100409001 : Decimal;										
QtyOnPosExclCurr@1100409004 : Decimal;										
ExclCurrLine@1100409007 : Boolean;										
BEGIN										
//GetSerialLotQtyOnPOS										
										
QtyOnPos := 0;										
QtyCurrLine := 0;										
QtyOnPosExclCurr := 0;										
										
ExclCurrLine := FALSE;										
"IF (pPOSTransLine.""Serial No."" <> '') OR (pPOSTransLine.""Lot No."" <> '') THEN BEGIN"										
ExclCurrLine := TRUE;										
"IF pPOSTransLine.""Entry Status"" = pPOSTransLine.""Entry Status""::Voided THEN"										
ExclCurrLine := FALSE;										
"IF (pSerialNo <> '') AND (pSerialNo <> pPOSTransLine.""Serial No."") THEN"										
ExclCurrLine := FALSE;										
"IF (pLotNo <> '') AND (pLotNo <> pPOSTransLine.""Lot No."") THEN"										
ExclCurrLine := FALSE;										
"POSTrans.GET(pPOSTransLine.""Receipt No."");"										
"IF (POSTrans.""Transaction Type"" = POSTrans.""Transaction Type""::Voided) OR"										
"(POSTrans.""Entry Status"" = POSTrans.""Entry Status""::Voided)"										
THEN										
ExclCurrLine := FALSE;										
END;										
IF ExclCurrLine THEN BEGIN										
"IF POSTrans.""Sale Is Return Sale"" THEN"										
QtyCurrLine := -pPOSTransLine.Quantity										
ELSE										
QtyCurrLine :=  pPOSTransLine.Quantity;										
END;										
										
"QtyOnPos := GetSerialLotSalesQty(pPOSTransLine,pSerialNo,pLotNo);"										
										
QtyOnPosExclCurr := QtyOnPos - QtyCurrLine;										
										
EXIT(QtyOnPosExclCurr);										
END;										
										
PROCEDURE UpdateInvLookup@1100409009(VAR pPOSTransLine@1100409001 : Record 99008981;pTSActive@1100409002 : Boolean);										
VAR										
InvLookupTable@1100409000 : Record 99001608;										
BEGIN										
//UpdateInvLookup										
										
InvLookupTable.RESET;										
"InvLookupTable.SETRANGE(""Item No."",pPOSTransLine.Number);"										
"InvLookupTable.SETRANGE(""Variant Code"",pPOSTransLine.""Variant Code"");"										
"IF pPOSTransLine.""Store No."" <>  '' THEN"										
"InvLookupTable.SETRANGE(""Store No."",pPOSTransLine.""Store No."");"										
IF InvLookupTable.FINDSET THEN										
REPEAT										
InvLookupTable.UpdateInventory(pTSActive);										
InvLookupTable.MODIFY;										
UNTIL InvLookupTable.NEXT = 0;										
END;										
										
PROCEDURE SerialNoIsValid@1100409010(VAR pPOSTransLine@1100409015 : Record 99008981;pSerialNo@1100409003 : Code[20];pItemTrackingCod	e@1	100	40	900	5 : Code[10];pSaleIsReturnSale@1100409013 : Boolean;VAR pErrorText@1100409006 : Text[250]) : Boolean;					
VAR										
ItemTrackingCodeRec@1000000001 : Record 6502;										
LocalText001@1100409011 : TextConst 'ENU=Item Tracking Code %1 does not exist.;ESP=No existe C¢d. Seguim. Producto %1.';										
LocalText002@1100409010 : TextConst 'ENU=Serial No. %1 does not exist.;ESP=No. Serie %1 no existe.';										
ProductGroup@1100409000 : Record 5723;										
InvtoryTesting@1100409002 : Boolean;										
AvailQty@1100409016 : Decimal;										
ExpDate@1100409004 : Date;										
LocalText006@1100409001 : TextConst 'ENU=Serial No. %1 already exists.;ESP=El No. Serie %1 ya existe.';										
LocalText008@1100409017 : TextConst 'ENU=Expiration Date not Specified for Serial No. %1.;ESP=No se ha especificado la Fecha de Ca	duc	ida	d	par	a el No. Serie %1.';					
LocalText009@1100409018 : TextConst 'ENU=Serial No. %1 has expired.;ESP=No. Serie %1 ha caducado.';										
"LocalText011@1100409008 : TextConst 'ENU=Serial No. Item Tracking not Supported without ""Inventory Lookup"".;ESP=No se soporta el s"	egu	imi	en	to	"de No. Serie Producto sin ""Inventory Lookup"".';"					
BEGIN										
//SerialNoIsValid										
IF NOT ItemTrackingCodeRec.GET(pItemTrackingCode) THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText001,pItemTrackingCode);"										
EXIT(FALSE);										
END;										
										
"IF ItemTrackingCodeRec.""SN Specific Tracking"" THEN BEGIN"										
"IF NOT ProductGroup.GET(pPOSTransLine.""Item Category Code"",pPOSTransLine.""Product Group Code"") THEN"										
CLEAR(ProductGroup);										
										
"IF StoreSetup.""POS Inventory Lookup"" AND ProductGroup.""POS Inventory Lookup"" THEN"										
InvtoryTesting := TRUE										
ELSE										
InvtoryTesting := FALSE;										
										
IF InvtoryTesting THEN BEGIN										
"AvailQty := GetAvailSerialLotQty(pPOSTransLine,pSerialNo,'');"										
IF ((pSaleIsReturnSale) AND (pPOSTransLine.Quantity >= 0)) OR										
((NOT pSaleIsReturnSale) AND (pPOSTransLine.Quantity < 0))										
THEN BEGIN										
IF AvailQty > 0 THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText006,pSerialNo);"										
EXIT(FALSE);										
END;										
END ELSE BEGIN										
IF AvailQty < 1 THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText002,pSerialNo);"										
EXIT(FALSE);										
END;										
"IF ItemTrackingCodeRec.""Strict Expiration Posting"" THEN BEGIN"										
"ExpDate := GetSerialLotExpDate(pPOSTransLine,pSerialNo,'');"										
IF ExpDate = 0D THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText008,pSerialNo);"										
EXIT(FALSE);										
END ELSE IF ExpDate < TODAY THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText009,pSerialNo);"										
EXIT(FALSE);										
END;										
END;										
END;										
END ELSE BEGIN										
pErrorText := LocalText011;										
EXIT(FALSE);										
END;										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE LotNoIsValid@1100409012(VAR pPOSTransLine@1100409015 : Record 99008981;pSerialNo@1100409004 : Code[20];pLotNo@1100409003 :	Co	de[	20	];p	ItemTrackingCode@1100409005 : Code[10];pSaleIsReturnSale@1100409013 : Boolean;pQuantity@1100409014 : Decimal;VAR pErrorText@1100409006 : Text[250]) : Boolean;					
VAR										
ItemTrackingCodeRec@1000000001 : Record 6502;										
LocalText001@1100409011 : TextConst 'ENU=Item Tracking Code %1 does not exist.;ESP=No existe C¢d. Seguim. Producto %1.';										
LocalText002@1100409010 : TextConst 'ENU=Lot No. %1 does not exist or quantity %2 is not available.;ESP=El No. Lote %1 no existe o	la	ca	nt	ida	d %2 no est  disponible.';					
ProductGroup@1100409000 : Record 5723;										
InvtoryTesting@1100409002 : Boolean;										
AvailQty@1100409016 : Decimal;										
LocalText008@1100409019 : TextConst 'ENU=Expiration Date not Specified for Lot No. %1.;ESP=No se ha especificado la Fecha de Caduc	ida	d p	ar	a e	l No. Lote %1.';					
LocalText009@1100409018 : TextConst 'ENU=Lot No. %1 has expired.;ESP=No. Lote %1 ha caducado.';										
ExpDate@1100409020 : Date;										
"LocalText011@1100409001 : TextConst 'ENU=Lot No. Item Tracking not Supported without ""Inventory Lookup"".;ESP=Seguimiento Producto"	por	No	.	Lot	"e No. no Soportado sin ""Inventory Lookup"".';"					
BEGIN										
//LotNoIsValid										
IF NOT ItemTrackingCodeRec.GET(pItemTrackingCode) THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText001,pItemTrackingCode);"										
EXIT(FALSE);										
END;										
										
"IF ItemTrackingCodeRec.""Lot Specific Tracking"" THEN BEGIN"										
"IF NOT ProductGroup.GET(pPOSTransLine.""Item Category Code"",pPOSTransLine.""Product Group Code"") THEN"										
CLEAR(ProductGroup);										
										
"IF StoreSetup.""POS Inventory Lookup"" AND ProductGroup.""POS Inventory Lookup"" THEN"										
InvtoryTesting := TRUE										
ELSE										
InvtoryTesting := FALSE;										
										
IF InvtoryTesting THEN BEGIN										
"AvailQty := GetAvailSerialLotQty(pPOSTransLine,pSerialNo,pLotNo);"										
IF ((NOT pSaleIsReturnSale) AND (pQuantity >= 0)) OR										
((pSaleIsReturnSale) AND (pQuantity < 0))										
THEN BEGIN										
IF AvailQty < pQuantity THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText002,pLotNo,pQuantity);"										
EXIT(FALSE);										
END;										
"IF ItemTrackingCodeRec.""Strict Expiration Posting"" THEN BEGIN"										
"ExpDate := GetSerialLotExpDate(pPOSTransLine,pSerialNo,pLotNo);"										
IF ExpDate = 0D THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText008,pLotNo);"										
EXIT(FALSE);										
END ELSE IF ExpDate < TODAY THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText009,pLotNo);"										
EXIT(FALSE);										
END;										
END;										
END;										
END ELSE BEGIN										
pErrorText := LocalText011;										
EXIT(FALSE);										
END;										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE UpdateSerialLotInvLookup@1100409019(VAR pPOSTransLine@1100409015 : Record 99008981;pItemTrackingCode@1100409005 : Code[10]	;VA	R p	Er	ror	Text@1100409006 : Text[250]) : Boolean;					
VAR										
ItemTrackingCodeRec@1000000001 : Record 6502;										
LocalText001@1100409011 : TextConst 'ENU=Item Tracking Code %1 does not exist.;ESP=No existe C¢d. Seguim. Producto %1.';										
LocalText004@1100409008 : TextConst 'ENU=No answer from Terminal Server %1.;ESP=Sin respuesta del Terminal Server %1.';										
ProductGroup@1100409000 : Record 5723;										
InvtoryTesting@1100409002 : Boolean;										
ErrorCode@1100409003 : Integer;										
POSIsOnLine@1100409001 : Boolean;										
BEGIN										
//UpdateSerialLotInvLookup										
IF NOT ItemTrackingCodeRec.GET(pItemTrackingCode) THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText001,pItemTrackingCode,pPOSTransLine.Number);"										
EXIT(FALSE);										
END;										
										
"IF (ItemTrackingCodeRec.""SN Specific Tracking"") OR (ItemTrackingCodeRec.""Lot Specific Tracking"") THEN BEGIN"										
"IF NOT ProductGroup.GET(pPOSTransLine.""Item Category Code"",pPOSTransLine.""Product Group Code"") THEN"										
CLEAR(ProductGroup);										
										
"IF StoreSetup.""POS Inventory Lookup"" AND ProductGroup.""POS Inventory Lookup"" THEN"										
InvtoryTesting := TRUE										
ELSE										
InvtoryTesting := FALSE;										
										
IF InvtoryTesting THEN BEGIN										
"POSIsOnLine := PosTerminal.""Terminal Connection"" = PosTerminal.""Terminal Connection""::OnLine;"										
"IF (POSIsOnLine) OR (NOT PosFuncProfile.""TS Inv. Lookup"") THEN BEGIN"										
"UpdateInvLookup(pPOSTransLine,FALSE);"										
END ELSE BEGIN										
"//IF NOT TSUtil.GetItemInventoryLookupTable(pPOSTransLine.Number,pPOSTransLine.""Variant Code"", //LS7.1-10"										
"//  pPOSTransLine.""Store No."",ErrorCode) //LS7.1-10"										
"IF NOT TSUtil.GetItemInventoryLookupTable(pPOSTransLine.Number,pPOSTransLine.""Variant Code"", //LS7.1-10"										
"pPOSTransLine.""Store No."",'',ErrorCode) //LS7.1-10"										
										
THEN BEGIN										
IF ErrorCode <> 0 THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText004,PosFuncProfile.""Inventory Lookup"");"										
EXIT(FALSE);										
END;										
END;										
END;										
END;										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE GetAvailSerialLotQty@1100409016(VAR pPOSTransLine@1100409002 : Record 99008981;pSerialNo@1100409001 : Code[20];pLotNo@1100	409	0	:	Co	de[20]) : Decimal;					
VAR										
InvLookupTable@1100409003 : Record 99001608;										
NetInv@1100409004 : Decimal;										
AvailQty@1100409005 : Decimal;										
BEGIN										
//GetAvailSerialLotQty										
										
NetInv := 0;										
InvLookupTable.RESET;										
"InvLookupTable.SETRANGE(""Item No."",pPOSTransLine.Number);"										
"InvLookupTable.SETRANGE(""Variant Code"",pPOSTransLine.""Variant Code"");"										
"InvLookupTable.SETRANGE(""Store No."",pPOSTransLine.""Store No."");"										
IF pSerialNo <> ''  THEN										
"InvLookupTable.SETRANGE(""Serial No."",pSerialNo);"										
IF pLotNo <> ''  THEN										
"InvLookupTable.SETRANGE(""Lot No."",pLotNo);"										
IF InvLookupTable.FINDSET THEN										
REPEAT										
"NetInv := NetInv + InvLookupTable.""Net Inventory"";"										
UNTIL InvLookupTable.NEXT = 0;										
										
"AvailQty := InvLookupTable.""Net Inventory"" - GetSerialLotSalesQtyExclCurr(pPOSTransLine,pSerialNo,pLotNo);"										
										
EXIT(AvailQty);										
END;										
										
PROCEDURE GetSerialLotExpDate@1100409013(VAR pPOSTransLine@1100409002 : Record 99008981;pSerialNo@1100409001 : Code[20];pLotNo@11004	90	0	:	Cod	e[20]) : Date;					
VAR										
InvLookupTable@1100409003 : Record 99001608;										
ExpDate@1100409004 : Date;										
BEGIN										
//GetSerialLotExpDate										
										
ExpDate := 0D;										
InvLookupTable.RESET;										
"InvLookupTable.SETRANGE(""Item No."",pPOSTransLine.Number);"										
"InvLookupTable.SETRANGE(""Variant Code"",pPOSTransLine.""Variant Code"");"										
"InvLookupTable.SETRANGE(""Store No."",pPOSTransLine.""Store No."");"										
IF pSerialNo <> ''  THEN										
"InvLookupTable.SETRANGE(""Serial No."",pSerialNo);"										
IF pLotNo <> ''  THEN										
"InvLookupTable.SETRANGE(""Lot No."",pLotNo);"										
IF InvLookupTable.FINDFIRST THEN										
"ExpDate := InvLookupTable.""Expiration Date"";"										
										
EXIT(ExpDate);										
END;										
										
PROCEDURE ValidateLotNoQty@1100409014(VAR pPOSTransLine@1100409015 : Record 99008981;pSaleIsReturnSale@1100409013 : Boolean;pQuantit	y@1	100	40	900	3 : Decimal;VAR pErrorText@1100409006 : Text[250]) : Boolean;					
VAR										
LocalText001@1100409011 : TextConst 'ENU=Quantity %1 not available for Lot No. %2;ESP=Cantidad %1 no disponible para el No. Lote %	2';									
ProductGroup@1100409000 : Record 5723;										
InvtoryTesting@1100409002 : Boolean;										
AvailQty@1100409016 : Decimal;										
BEGIN										
//ValidateLotNoQty										
IF ItemTrack.IsItemLotTracking(pPOSTransLine.Number) THEN BEGIN										
"IF NOT ProductGroup.GET(pPOSTransLine.""Item Category Code"",pPOSTransLine.""Product Group Code"") THEN"										
CLEAR(ProductGroup);										
"IF StoreSetup.""POS Inventory Lookup"" AND ProductGroup.""POS Inventory Lookup"" THEN"										
InvtoryTesting := TRUE										
ELSE										
InvtoryTesting := FALSE;										
										
IF InvtoryTesting THEN BEGIN										
"AvailQty := GetAvailSerialLotQty(pPOSTransLine,pPOSTransLine.""Serial No."",pPOSTransLine.""Lot No."");"										
IF ((NOT pSaleIsReturnSale) AND (pQuantity >= 0)) OR										
((pSaleIsReturnSale) AND (pQuantity < 0))										
THEN BEGIN										
IF AvailQty < pQuantity THEN BEGIN										
"pErrorText := STRSUBSTNO(LocalText001,pQuantity,pPOSTransLine.""Lot No."");"										
EXIT(FALSE);										
END;										
END;										
END;										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE SerialNoLookupFromPopup@1100409001(ItemNo@1100409003 : Code[20];MgrKey@1100409002 : Boolean;CurrVarCode@1100409000 : Code[	10]	;VA	R	Inp	ut@1100409005 : Text[100];VAR SerialNoNeeded@1100409006 : Boolean;VAR ErrorText@1100409007 : Text);					
VAR										
ItemIn@1100409001 : Record 27;										
ErrTxt1@1000000002 : TextConst 'ENU=The default menu doesn''t exist in profile:;ESP=El men£ por defecto no existe en el perfil:';										
PosTransLineUpd@1100409017 : Record 99008981;										
LookupErrText@1100409011 : Text[250];										
LotTracking@1100409012 : Boolean;										
SerTracking@1100409013 : Boolean;										
MaxButtonCount@1100409004 : Integer;										
SerialText@1100409014 : Text[30];										
EnterSerialText@1100409019 : Text[80];										
LookupSerialText@1100409020 : Text[80];										
ContinueLoop@1100409018 : Boolean;										
Result@1100409021 : Action;										
BEGIN										
IF ItemNo <> '' THEN BEGIN										
ItemIn.GET(ItemNo);										
CLEAR(PosTransLineUpd);										
"PosTransLineUpd.Number := ItemIn.""No."";"										
"PosTransLineUpd.""Variant Code"" := CurrVarCode;"										
"PosTransLineUpd.""Store No."" := PosTerminal.""Store No."";"										
"PosTransLineUpd.""Item Category Code"" := ItemIn.""Item Category Code"";"										
"PosTransLineUpd.""Product Group Code"" := ItemIn.""Product Group Code"";"										
PosTransLineUpd.Quantity := 1;										
										
EnterSerialText := PText030;										
"SerialText := PosTransLineUpd.FIELDCAPTION(""Serial No."");"										
LookupSerialText := PText032;										
										
SerialNoNeeded := TRUE;										
										
IF UpdateSerialLotInvLookupPopup(										
"PosTransLineUpd,MgrKey,ItemIn.""Item Tracking Code"",LookupErrText,LotTracking,SerTracking)"										
THEN BEGIN										
IF LotTracking THEN BEGIN										
EnterSerialText := PText029;										
"SerialText := PosTransLineUpd.FIELDCAPTION(""Lot No."");"										
LookupSerialText := PText031;										
END;										
										
SerialNoNeeded := NOT LotTracking;										
										
IF NOT (LotTracking OR SerTracking) THEN BEGIN										
"Input := AskForSerialNo(EnterSerialText,FALSE,Result);"										
EXIT;										
END ELSE BEGIN										
ContinueLoop := TRUE;										
WHILE ContinueLoop DO BEGIN										
"Input := AskForSerialNo(EnterSerialText,TRUE,Result);"										
IF Result = ACTION::LookupOK THEN BEGIN										
"Input := LookupSerialLotNo(LotTracking,PosTransLineUpd);"										
IF Input <> '' THEN BEGIN										
"ValidateSerialLotNo(LotTracking,PosTransLineUpd,ItemIn,MgrKey,Input);"										
IF Input <> '' THEN										
ContinueLoop := FALSE;										
END;										
END ELSE BEGIN										
ContinueLoop := FALSE;										
IF Input = '' THEN										
EXIT;										
"ValidateSerialLotNo(LotTracking,PosTransLineUpd,ItemIn,MgrKey,Input);"										
END;										
END;										
END;										
END ELSE BEGIN										
IF NOT MgrKey THEN BEGIN										
ErrorText := LookupErrText;										
Input := '';										
EXIT;										
END ELSE BEGIN										
"IF POSGUI.PosConfirm(LookupErrText + '. ' + STRSUBSTNO(Text020,SerialText),FALSE) THEN BEGIN"										
"Input := AskForSerialNo(EnterSerialText,FALSE,Result);"										
EXIT;										
END ELSE BEGIN										
Input := '';										
EXIT;										
END;										
END;										
END;										
END;										
END;										
										
PROCEDURE UpdateSerialLotInvLookupPopup@1100409015(POSTransLine1@1100409000 : Record 99008981;MgrKey@1100409010 : Boolean;ItemTrackC	ode	@11	0	409	003 : Code[10];VAR ErrorText@1100409001 : Text[250];VAR LotNoTracking@1100409004 : Boolean;VAR SerNoTracking@1100409002 : Boolean) : Boolean;					
BEGIN										
SerNoTracking := ItemTrack.IsItemSNTracking(POSTransLine1.Number);										
LotNoTracking := ItemTrack.IsItemLotTracking(POSTransLine1.Number);										
										
IF NOT (SerNoTracking OR LotNoTracking) THEN										
EXIT(TRUE);										
IF SerNoTracking AND LotNoTracking THEN										
LotNoTracking := FALSE;										
										
ErrorText := '';										
"IF NOT UpdateSerialLotInvLookup(POSTransLine1,ItemTrackCode,ErrorText) THEN"										
EXIT(FALSE);										
										
EXIT(TRUE);										
END;										
										
PROCEDURE ValidateSerialNoPopup@1100409020(PosTransLineIn@1100409000 : Record 99008981;ItemRec@1100409001 : Record 27;SerialNo@11004	90	3	:	Cod	e[20];VAR ErrorText@1100409002 : Text[250];MgrKey@1100409004 : Boolean) : Boolean;					
BEGIN										
ErrorText := '';										
"IF NOT SerialNoIsValid(PosTransLineIn,SerialNo,ItemRec.""Item Tracking Code"",FALSE,ErrorText) THEN BEGIN"										
IF MgrKey THEN BEGIN										
"IF POSGUI.PosConfirm(ErrorText + '\' + Text305,FALSE) THEN"										
EXIT(TRUE)										
ELSE BEGIN										
SerialNo := '';										
EXIT(FALSE);										
END										
END ELSE BEGIN										
SerialNo := '';										
EXIT(FALSE);										
END;										
END ELSE										
EXIT(TRUE);										
END;										
										
PROCEDURE ValidateLotNoPopup@1100409021(PosTransLineIn@1100409004 : Record 99008981;ItemRec@1100409003 : Record 27;SerialNo@11004090	2	: C	od	e[2	0];LotNo@1100409005 : Code[20];VAR ErrorText@1100409001 : Text[250];MgrKey@1100409000 : Boolean) : Boolean;					
VAR										
Quantity@1100409006 : Decimal;										
BEGIN										
ErrorText := '';										
IF PosTransLineIn.Quantity = 0 THEN										
Quantity := 1										
ELSE										
Quantity := PosTransLineIn.Quantity;										
"IF NOT LotNoIsValid(PosTransLineIn,SerialNo,LotNo,ItemRec.""Item Tracking Code"",FALSE,Quantity,ErrorText) THEN BEGIN"										
IF MgrKey THEN BEGIN										
"IF POSGUI.PosConfirm(ErrorText + '\' + Text305,FALSE) THEN"										
EXIT(TRUE)										
ELSE BEGIN										
LotNo := '';										
EXIT(FALSE);										
END										
END ELSE BEGIN										
LotNo := '';										
EXIT(FALSE);										
END;										
END ELSE										
EXIT(TRUE);										
END;										
										
PROCEDURE AskForSerialNo@1100409004(TextHeading@1100409000 : Text[50];Lookup@1100409001 : Boolean;VAR Result@1100409003 : Action) :	Cod	e[2	0]	;						
BEGIN										
COMMIT;										
"EXIT(POSGUI.OpenAlphabeticKeyboard(TextHeading, '', Result,Lookup));"										
END;										
										
PROCEDURE LookupSerialLotNo@1100409003(LotTr@1100409000 : Boolean;PosTrLine2@1100409003 : Record 99008981) : Code[20];										
VAR										
CurrlineTemp@1100409005 : TEMPORARY Record 99008981;										
LookupRecRef@1100409004 : RecordRef;										
Lookup@1100409007 : Record 99008922;										
FormID@1100409006 : Code[10];										
Filter@1100409002 : Code[20];										
BEGIN										
FormID := 'SERIAL_LU';										
IF LotTr THEN										
FormID := 'LOT_LU';										
										
"IF POSSESSION.GetPosLookupRec(FormID,Lookup) THEN BEGIN"										
COMMIT;										
CurrlineTemp := PosTrLine2;										
"//IF NOT PrepareInvLookup(CurrlineTemp,TRUE,Filter) THEN //LS7.1-10"										
"IF NOT PrepareInvLookup(CurrlineTemp,TRUE,'',Filter) THEN //LS7.1-10"										
EXIT('');										
										
"POSGUI.Lookup(Lookup,Filter,CurrlineTemp,POSSESSION.MgrKey,'', LookupRecRef);"										
										
"EXIT(COPYSTR(POSGUI.GetLookupKeyValue(Lookup.""Lookup ID""),1,20));"										
END;										
EXIT('');										
END;										
										
PROCEDURE ValidateSerialLotNo@1100409002(LotTr@1100409000 : Boolean;PosTrLine2@1100409001 : Record 99008981;SerialItem@1100409002 :	Rec	ord	2	7;M	anKey@1100409003 : Boolean;CurrInput@1100409005 : Text);					
VAR										
LookupErrText@1100409004 : Text[250];										
BEGIN										
IF LotTr THEN BEGIN										
"IF NOT ValidateLotNoPopup(PosTrLine2,SerialItem,'',CurrInput,LookupErrText,ManKey) THEN BEGIN"										
CurrInput := '';										
END;										
END ELSE BEGIN										
"IF NOT ValidateSerialNoPopup(PosTrLine2,SerialItem,CurrInput,LookupErrText,ManKey) THEN BEGIN"										
CurrInput := '';										
END;										
END;										
END;										
										
PROCEDURE PosTransInfoExists@1100409027(ReceiptNo@1100409000 : Code[20];LineNo@1100409001 : Integer) : Boolean;										
VAR										
PosTransInfoLine@1100409002 : Record 99008952;										
BEGIN										
//PosTransInfoDataExists										
"PosTransInfoLine.SETRANGE(""Receipt No."",ReceiptNo);"										
"PosTransInfoLine.SETRANGE(""Receipt Line No."",LineNo);"										
EXIT(PosTransInfoLine.FINDFIRST);										
END;										
										
PROCEDURE ValidateCustInvoiceNo@1100409024(DocumentNo@1100409000 : Code[20];VAR ErrorText@1100409001 : Text[250];VAR MsgText@1100409	5	:	Te	xt[	250];VAR CustomerNo@1100409006 : Code[20]) : Boolean;					
VAR										
CustLedgEntry@1100409003 : Record 21;										
TmpCustLedgEntry@1100409004 : TEMPORARY Record 21;										
TsErr@1100409002 : Integer;										
BEGIN										
//ValidateCustInvoiceNo										
InitPosFunctions;										
"IF PosFuncProfile.""TS Customer Invoice"" THEN BEGIN"										
"IF TSUtil.GetCustSpecInvoice(DocumentNo,TmpCustLedgEntry,TsErr) THEN BEGIN"										
IF (TsErr = 0) THEN BEGIN										
IF TmpCustLedgEntry.FINDFIRST THEN BEGIN										
IF NOT TmpCustLedgEntry.Open THEN BEGIN										
"ErrorText :=STRSUBSTNO(Text308,DocumentNo);"										
EXIT(FALSE)										
END;										
IF TmpCustLedgEntry.Open THEN BEGIN										
"CustomerNo := TmpCustLedgEntry.""Customer No."";"										
"//In the Profit (LCY) field is the value from ""Remaining Amount"""										
"MsgText := STRSUBSTNO(Text310,FORMAT(TmpCustLedgEntry.""Profit (LCY)""));"										
EXIT(TRUE);										
END;										
END;										
END;										
END ELSE										
"ErrorText := STRSUBSTNO(Text309,DocumentNo);"										
EXIT(FALSE);										
END ELSE BEGIN										
"CustLedgEntry.SETCURRENTKEY(""Document No."");"										
"CustLedgEntry.SETRANGE(""Document No."",DocumentNo);"										
"CustLedgEntry.SETRANGE(""Document Type"",CustLedgEntry.""Document Type""::Invoice);"										
IF CustLedgEntry.FINDFIRST THEN BEGIN										
IF NOT CustLedgEntry.Open THEN BEGIN										
"ErrorText :=STRSUBSTNO(Text308,DocumentNo);"										
EXIT(FALSE)										
END;										
IF CustLedgEntry.Open THEN BEGIN										
"CustLedgEntry.CALCFIELDS(""Remaining Amount"");"										
"CustomerNo := CustLedgEntry.""Customer No."";"										
"MsgText := STRSUBSTNO(Text310,FORMAT(CustLedgEntry.""Remaining Amount""));"										
EXIT(TRUE);										
END;										
END ELSE BEGIN										
"ErrorText := STRSUBSTNO(Text309,DocumentNo);"										
EXIT(FALSE);										
END;										
END;										
END;										
										
PROCEDURE FindReturnPolicy@1100409017(PosTrLine@1100409001 : Record 99008981;MgrKey@1100409004 : Boolean;DatePurchased@1100409006 :	Dat	e;V	AR	pR	eturnPolicy@1100409000 : Record 99001647;VAR pMessageText@1100409003 : Text[250];VAR pErrorText@1100409005 : Text[250]) : Integer;					
VAR										
lRetPolicy@1100409002 : Record 99001647;										
lItemRec@1100409007 : Record 27;										
StoreGroupSetup@1100409008 : Record 10000782;										
ItemVariantRegistration@1100409011 : Record 10001414;										
Priority@1100409010 : Integer;										
BEGIN										
//FindReturnPolicy										
//*********************************										
//* Return										
//*   0 => return policy not found										
//*   1 => message										
//*   2 => question to continue										
//*   3 => error										
//*********************************										
										
CLEAR(pReturnPolicy);										
CLEAR(pMessageText);										
CLEAR(pErrorText);										
										
IF (PosTrLine.Number <> '') THEN BEGIN										
IF NOT lItemRec.GET(PosTrLine.Number) THEN										
EXIT(0);										
										
//Priority										
"//    1) ItemNo,VariantCode,StoreNo."										
"//    2) ItemNo,VariantCode,StoreGroup"										
"//    3) ItemNo,VariantCode"										
"//    4) ItemNo,VariantDim1Code,StoreNo"										
"//    5) ItemNo,VariantDim1Code,StoreGroup"										
"//    6) ItemNo,VariantDim1Code"										
"//    7) ItemNo,StoreNo"										
"//    8) ItemNo,StoreGroup"										
//    9) ItemNo										
"//   10) ProductGroup,StoreNo"										
"//   11) ProductGroup,StoreGroup"										
//   12) ProductGroup										
"//   13) ItemCategory,StoreNo"										
"//   14) ItemCategory,StoreGroup"										
//   15) ItemCategory										
//   16) VariantDim1Code										
										
FOR Priority := 1 TO 16 DO BEGIN										
lRetPolicy.RESET;										
"lRetPolicy.SETFILTER(""Store No."",'%1','');"										
"lRetPolicy.SETFILTER(""Store Group Code"",'%1','');"										
"lRetPolicy.SETFILTER(""Item No."",'%1','');"										
"lRetPolicy.SETFILTER(""Variant Code"",'%1','');"										
"lRetPolicy.SETFILTER(""Variant Dimension 1 Code"",'%1','');"										
CASE Priority OF										
"1 :  //ItemNo,VariantCode,StoreNo."										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
"lRetPolicy.SETRANGE(""Variant Code"",PosTrLine.""Variant Code"");"										
"lRetPolicy.SETRANGE(""Store No."",PosTrLine.""Store No."");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"2 :  //ItemNo,VariantCode,StoreGroup"										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
"lRetPolicy.SETRANGE(""Variant Code"",PosTrLine.""Variant Code"");"										
StoreGroupSetup.RESET;										
"StoreGroupSetup.SETCURRENTKEY(""Store Code"",Level);"										
StoreGroupSetup.ASCENDING := FALSE;										
"StoreGroupSetup.SETRANGE(""Store Code"",PosTrLine.""Store No."");"										
IF StoreGroupSetup.FIND('-') THEN REPEAT										
"lRetPolicy.SETRANGE(""Store Group Code"",StoreGroupSetup.""Store Group"");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL StoreGroupSetup.NEXT = 0;										
END;										
"3 :  //ItemNo,VariantCode"										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
"lRetPolicy.SETRANGE(""Variant Code"",PosTrLine.""Variant Code"");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"4 :  //ItemNo,VariantDim1Code,StoreNo"										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
"lRetPolicy.SETRANGE(""Store No."",PosTrLine.""Store No."");"										
"lRetPolicy.SETFILTER(""Variant Dimension 1 Code"",'<>%1','');"										
IF lRetPolicy.FINDLAST THEN REPEAT										
ItemVariantRegistration.RESET;										
"ItemVariantRegistration.SETRANGE(""Item No."",PosTrLine.Number);"										
"ItemVariantRegistration.SETRANGE(""Variant Dimension 1"",lRetPolicy.""Variant Dimension 1 Code"");"										
"ItemVariantRegistration.SETRANGE(Variant,PosTrLine.""Variant Code"");"										
IF ItemVariantRegistration.FINDFIRST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL lRetPolicy.NEXT(-1) = 0;										
END;										
"5 :  //ItemNo,VariantDim1Code,StoreGroup"										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
StoreGroupSetup.RESET;										
"StoreGroupSetup.SETCURRENTKEY(""Store Code"",Level);"										
StoreGroupSetup.ASCENDING := FALSE;										
"StoreGroupSetup.SETRANGE(""Store Code"",PosTrLine.""Store No."");"										
IF StoreGroupSetup.FIND('-') THEN REPEAT										
"lRetPolicy.SETRANGE(""Store Group Code"",StoreGroupSetup.""Store Group"");"										
"lRetPolicy.SETFILTER(""Variant Dimension 1 Code"",'<>%1','');"										
IF lRetPolicy.FINDFIRST THEN REPEAT										
ItemVariantRegistration.RESET;										
"ItemVariantRegistration.SETRANGE(""Item No."",PosTrLine.Number);"										
"ItemVariantRegistration.SETRANGE(""Variant Dimension 1"",lRetPolicy.""Variant Dimension 1 Code"");"										
"ItemVariantRegistration.SETRANGE(Variant,PosTrLine.""Variant Code"");"										
IF ItemVariantRegistration.FINDFIRST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL lRetPolicy.NEXT(-1) = 0;										
UNTIL StoreGroupSetup.NEXT = 0;										
END;										
"6 :  //ItemNo,VariantDim1Code"										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
"lRetPolicy.SETFILTER(""Variant Dimension 1 Code"",'<>%1','');"										
IF lRetPolicy.FINDLAST THEN REPEAT										
ItemVariantRegistration.RESET;										
"ItemVariantRegistration.SETRANGE(""Item No."",PosTrLine.Number);"										
"ItemVariantRegistration.SETRANGE(""Variant Dimension 1"",lRetPolicy.""Variant Dimension 1 Code"");"										
"ItemVariantRegistration.SETRANGE(Variant,PosTrLine.""Variant Code"");"										
IF ItemVariantRegistration.FINDFIRST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL lRetPolicy.NEXT(-1) = 0;										
END;										
"7 :  //ItemNo,StoreNo."										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
"lRetPolicy.SETRANGE(""Store No."",PosTrLine.""Store No."");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"8 :  //ItemNo,StoreGroup"										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
StoreGroupSetup.RESET;										
"StoreGroupSetup.SETCURRENTKEY(""Store Code"",Level);"										
StoreGroupSetup.ASCENDING := FALSE;										
"StoreGroupSetup.SETRANGE(""Store Code"",PosTrLine.""Store No."");"										
IF StoreGroupSetup.FIND('-') THEN REPEAT										
"lRetPolicy.SETRANGE(""Store Group Code"",StoreGroupSetup.""Store Group"");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL StoreGroupSetup.NEXT = 0;										
END;										
9 :  //ItemNo										
IF PosTrLine.Number <> '' THEN BEGIN										
"lRetPolicy.SETRANGE(""Item No."",PosTrLine.Number);"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"10 :  //ProductGroup,StoreNo"										
"IF (lItemRec.""Product Group Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Product Group Code"",lItemRec.""Product Group Code"");"										
"lRetPolicy.SETRANGE(""Store No."",PosTrLine.""Store No."");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"11 :  //ProductGroup,StoreGroup"										
"IF (lItemRec.""Product Group Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Product Group Code"",lItemRec.""Product Group Code"");"										
StoreGroupSetup.RESET;										
"StoreGroupSetup.SETCURRENTKEY(""Store Code"",Level);"										
StoreGroupSetup.ASCENDING := FALSE;										
"StoreGroupSetup.SETRANGE(""Store Code"",PosTrLine.""Store No."");"										
IF StoreGroupSetup.FIND('-') THEN REPEAT										
"lRetPolicy.SETRANGE(""Store Group Code"",StoreGroupSetup.""Store Group"");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL StoreGroupSetup.NEXT = 0;										
END;										
12 :  //ProductGroup										
"IF lItemRec.""Product Group Code"" <> '' THEN BEGIN"										
"lRetPolicy.SETRANGE(""Product Group Code"",lItemRec.""Product Group Code"");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"13 :  //ItemCagegory,StoreNo"										
"IF (lItemRec.""Item Category Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item Category Code"",lItemRec.""Item Category Code"");"										
"lRetPolicy.SETFILTER(""Product Group Code"",'%1','');"										
"lRetPolicy.SETRANGE(""Store No."",PosTrLine.""Store No."");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
"14 :  //ItemCategory,StoreGroup"										
"IF (lItemRec.""Item Category Code"" <> '') AND (PosTrLine.""Store No."" <> '') THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item Category Code"",lItemRec.""Item Category Code"");"										
"lRetPolicy.SETFILTER(""Product Group Code"",'%1','');"										
StoreGroupSetup.RESET;										
"StoreGroupSetup.SETCURRENTKEY(""Store Code"",Level);"										
StoreGroupSetup.ASCENDING := FALSE;										
"StoreGroupSetup.SETRANGE(""Store Code"",PosTrLine.""Store No."");"										
IF StoreGroupSetup.FIND('-') THEN REPEAT										
"lRetPolicy.SETRANGE(""Store Group Code"",StoreGroupSetup.""Store Group"");"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL StoreGroupSetup.NEXT = 0;										
END;										
15 :  //ItemCagegory										
"IF lItemRec.""Item Category Code"" <> '' THEN BEGIN"										
"lRetPolicy.SETRANGE(""Item Category Code"",lItemRec.""Item Category Code"");"										
"lRetPolicy.SETFILTER(""Product Group Code"",'%1','');"										
IF lRetPolicy.FINDLAST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
END;										
16 :  //VariantDim1Code										
"IF (PosTrLine.Number <> '') AND (PosTrLine.""Variant Code"" <> '') THEN BEGIN"										
"lRetPolicy.SETFILTER(""Variant Dimension 1 Code"",'<>%1','');"										
"lRetPolicy.SETFILTER(""Item Category Code"",'%1','');"										
"lRetPolicy.SETFILTER(""Product Group Code"",'%1','');"										
IF lRetPolicy.FINDLAST THEN REPEAT										
ItemVariantRegistration.RESET;										
"ItemVariantRegistration.SETRANGE(""Item No."",PosTrLine.Number);"										
"ItemVariantRegistration.SETRANGE(""Variant Dimension 1"",lRetPolicy.""Variant Dimension 1 Code"");"										
"ItemVariantRegistration.SETRANGE(Variant,PosTrLine.""Variant Code"");"										
IF ItemVariantRegistration.FINDFIRST THEN BEGIN										
pReturnPolicy := lRetPolicy;										
"EXIT(ReturnPolicyAction(PosTrLine,pReturnPolicy,MgrKey,DatePurchased,pMessageText,pErrorText));"										
END;										
UNTIL lRetPolicy.NEXT(-1) = 0;										
END;										
END;										
END;										
END;										
										
EXIT(0);										
END;										
										
PROCEDURE ReturnPolicyAction@1100409018(PosTrLine@1100409002 : Record 99008981;RetPolicy@1100409000 : Record 99001647;MgrKey@1100409	6	:	Bo	ole	an;DatePurchased@1100409007 : Date;VAR pMessageText@1100409005 : Text[250];VAR pErrorText@1100409004 : Text[250]) : Integer;					
VAR										
ItemRec@1100409003 : Record 27;										
LastReturnDate@1100409008 : Date;										
Days@1100409009 : Integer;										
ReturnInt@1100409010 : Integer;										
BEGIN										
//ReturnPolicyAction										
										
CLEAR(ItemRec);										
ReturnInt := 0;										
										
IF (DatePurchased <> 0D) AND (DatePurchased < TODAY) THEN BEGIN										
"IF FORMAT(RetPolicy.""Refund Period Length"") <> '' THEN BEGIN"										
"LastReturnDate := CALCDATE(RetPolicy.""Refund Period Length"",DatePurchased);"										
IF (LastReturnDate < TODAY) THEN BEGIN										
IF ItemRec.GET(PosTrLine.Number) THEN ;										
Days := LastReturnDate - DatePurchased;										
"pMessageText := STRSUBSTNO(Text313,ItemRec.""No."",ItemRec.Description,DatePurchased,Days);"										
ReturnInt := 2;										
END;										
END;										
END										
ELSE										
"IF FORMAT(RetPolicy.""Refund Period Length"") <> '' THEN BEGIN"										
IF DatePurchased = 0D THEN										
DatePurchased := WORKDATE;										
IF ItemRec.GET(PosTrLine.Number) THEN ;										
"LastReturnDate := CALCDATE(RetPolicy.""Refund Period Length"",DatePurchased);"										
Days := LastReturnDate - DatePurchased;										
"pMessageText := STRSUBSTNO(Text313,ItemRec.""No."",ItemRec.Description,DatePurchased,Days);"										
ReturnInt := 2;										
END;										
										
IF pMessageText = '' THEN BEGIN										
"pMessageText := RetPolicy.""Message 1"";"										
"IF (RetPolicy.""Message 2"" <> '') THEN BEGIN"										
IF pMessageText <> '' THEN										
"pMessageText := pMessageText + '\' + RetPolicy.""Message 2"""										
ELSE										
"pMessageText := RetPolicy.""Message 2"";"										
END;										
IF (pMessageText <> '') THEN										
ReturnInt := 1;										
END;										
										
"IF RetPolicy.""Refund not Allowed"" THEN BEGIN"										
IF ItemRec.GET(PosTrLine.Number) THEN ;										
"pErrorText := STRSUBSTNO(Text311,PosTrLine.Number,ItemRec.Description);"										
ReturnInt := 3;										
END;										
										
"IF RetPolicy.""Manager Privileges"" AND NOT MgrKey THEN BEGIN"										
IF ItemRec.GET(PosTrLine.Number) THEN ;										
"pErrorText := STRSUBSTNO(Text312,PosTrLine.Number,ItemRec.Description);"										
ReturnInt := 3;										
END;										
										
EXIT(ReturnInt);										
END;										
										
PROCEDURE InsertLinkToLastParent@1100409041(ReceiptNo@1100409007 : Code[20];LastChildLineNo@1100409008 : Integer;FromLineNo@11004090	6	: I	nt	ege	r;LastLineNo@1100409005 : Integer;ParentLineNo@1100409004 : Integer;NewPrice@1100409003 : Decimal;SetPrice@1100409002 : Boolean;LinkedUOM@1100409001 : Code[10];LinkedQty@1100409000 : Decimal);					
BEGIN										
//InsertLinkToLastParent										
										
"ShiftLinesDown(ReceiptNo,LastChildLineNo,1);"										
InsertLinkedLine(										
"ReceiptNo,FromLineNo,LastLineNo,"										
"ParentLineNo,NewPrice,SetPrice,LinkedUOM,LinkedQty);"										
END;										
										
PROCEDURE ShiftLinesDown@1100409038(ReceiptNo@1100409015 : Code[20];LastParentLineNo@1100409014 : Integer;NoOfLinesToShift@110040900	0:00	In	te	ger	);					
VAR										
POStrans2@1100409002 : Record 99008981;										
POStrans3@1100409001 : Record 99008981;										
BEGIN										
//ShiftLinesDown										
//down x * 10000 to make space for new lines at the end of the parent group.										
										
POSTransLineTemp.RESET;										
POSTransLineTemp.DELETEALL;										
										
"POStrans2.SETRANGE(""Receipt No."",ReceiptNo);"										
POStrans2.FINDLAST;										
										
REPEAT										
POSTransLineTemp.INIT();										
"POSTransLineTemp.""Receipt No."" := POStrans2.""Receipt No."";"										
"POSTransLineTemp.""Line No."" := POStrans2.""Line No."";"										
"POSTransLineTemp.""Parent Line"" := POStrans2.""Line No."" + NoOfLinesToShift * 10000;  //new number"										
POSTransLineTemp.INSERT();										
										
POStrans2.DELETE();										
										
POStrans3 := POStrans2;										
"POStrans3.""Line No."" := POSTransLineTemp.""Parent Line"";"										
"IF POStrans3.""Parent Line"" <> 0 THEN"										
"IF POStrans3.""Parent Line"" > LastParentLineNo THEN"										
"POStrans3.""Parent Line"" := POStrans3.""Parent Line"" + NoOfLinesToShift * 10000;"										
IF POSSESSION.GetValue('OFFL_CALLCENTER') = 'SENT' THEN BEGIN										
"IF POStrans2.""Shifted from Line No."" <> 0 THEN"										
"POStrans3.""Shifted from Line No."" := POStrans2.""Shifted from Line No."""										
ELSE										
"POStrans3.""Shifted from Line No."" := POStrans2.""Line No."";"										
END;										
										
//LS7.1-19  POStrans3.INSERT(TRUE);										
POStrans3.INSERT; //LS7.1-19										
										
"//LS7.1-18 CopyPrintedAndHospStation(POStrans2,POStrans3);"										
//LS7.1-18  DeletePrintedAndHospStation(POStrans2);										
										
MoveLinkedLines(POSTransLineTemp);										
"UNTIL (POStrans2.NEXT(-1) = 0) OR (POStrans2.""Line No."" <= LastParentLineNo);"										
										
CorrectLineNumbers(ReceiptNo);										
END;										
										
PROCEDURE MoveLinkedLines@1100409035(VAR pPOSTransLine@1200070001 : Record 99008981);										
VAR										
POSTransInfoEntry@1200070006 : Record 99008982;										
POSTransInfoEntry2@1200070005 : Record 99008982;										
POSMixMatchEntry@1200070004 : Record 99008983;										
POSMixMatchEntry2@1200070003 : Record 99008983;										
OfferPosCalculations@1200070002 : Record 99001561;										
OfferPosCalculations2@1200070000 : Record 99001561;										
PosTrPerDisc@1100409002 : Record 99008943;										
PosTrPerDisc2@1100409001 : Record 99008943;										
DataEntry@1100409005 : Record 99001558;										
tmpDataEntry@1100409004 : Record 99001558;										
KotTransLineMapping@1100409006 : Record 10012143;										
KotTransLineMapping2@1100409008 : Record 10012143;										
KotTransLineModMapping@1100409007 : Record 10012144;										
KotTransLineModMapping2@1100409009 : Record 10012144;										
PosTrLineDisplStatRout@1100409000 : Record 10012154;										
PosTrLineDisplStatRout2@1100409003 : Record 10012154;										
BEGIN										
//MoveLinkedLines										
//Move lines in trans. lines linked tables.										
{//LS7.1-19										
IF NOT POSTransInfoEntry.RECORDLEVELLOCKING THEN										
POSTransInfoEntry.LOCKTABLE(TRUE);										
IF NOT POSMixMatchEntry.RECORDLEVELLOCKING THEN										
POSMixMatchEntry.LOCKTABLE(TRUE);										
IF NOT OfferPosCalculations.RECORDLEVELLOCKING THEN										
OfferPosCalculations.LOCKTABLE(TRUE);										
IF NOT DataEntry.RECORDLEVELLOCKING THEN										
DataEntry.LOCKTABLE(TRUE);										
}//LS7.1-19										
										
POSTransInfoEntry.RESET();										
"POSTransInfoEntry.SETRANGE(POSTransInfoEntry.""Receipt No."",pPOSTransLine.""Receipt No."");"										
"POSTransInfoEntry.SETRANGE(POSTransInfoEntry.""Transaction Type"",POSTransInfoEntry.""Transaction Type""::""Sales Entry"");"										
"POSTransInfoEntry.SETRANGE(POSTransInfoEntry.""Line No."",pPOSTransLine.""Line No."");"										
IF POSTransInfoEntry.FINDSET THEN BEGIN										
REPEAT										
POSTransInfoEntry.DELETE();										
POSTransInfoEntry2 := POSTransInfoEntry;										
"POSTransInfoEntry2.""Line No."" := pPOSTransLine.""Parent Line"";"										
POSTransInfoEntry2.INSERT();										
UNTIL POSTransInfoEntry.NEXT() = 0;										
END;										
										
POSMixMatchEntry.RESET();										
"POSMixMatchEntry.SETRANGE(POSMixMatchEntry.""Receipt No."",pPOSTransLine.""Receipt No."");"										
"POSMixMatchEntry.SETRANGE(POSMixMatchEntry.""Line No."",pPOSTransLine.""Line No."");"										
IF POSMixMatchEntry.FINDSET THEN BEGIN										
REPEAT										
POSMixMatchEntry.DELETE();										
POSMixMatchEntry2 := POSMixMatchEntry;										
"POSMixMatchEntry2.""Line No."" := pPOSTransLine.""Parent Line"";"										
POSMixMatchEntry2.INSERT();										
UNTIL POSMixMatchEntry.NEXT() = 0;										
END;										
										
OfferPosCalculations.RESET();										
"OfferPosCalculations.SETRANGE(OfferPosCalculations.""Receipt No."",pPOSTransLine.""Receipt No."");"										
"OfferPosCalculations.SETRANGE(OfferPosCalculations.""Trans. Line No."",pPOSTransLine.""Line No."");"										
IF OfferPosCalculations.FINDSET THEN BEGIN										
REPEAT										
OfferPosCalculations.DELETE();										
OfferPosCalculations2 := OfferPosCalculations;										
"OfferPosCalculations2.""Trans. Line No."" := pPOSTransLine.""Parent Line"";"										
OfferPosCalculations2.INSERT();										
UNTIL OfferPosCalculations.NEXT() = 0;										
END;										
										
PosTrPerDisc.RESET;										
"PosTrPerDisc.SETRANGE(""Receipt No."",pPOSTransLine.""Receipt No."");"										
"PosTrPerDisc.SETRANGE(""Line No."",pPOSTransLine.""Line No."");"										
IF PosTrPerDisc.FINDSET THEN BEGIN										
REPEAT										
PosTrPerDisc.DELETE();										
PosTrPerDisc2 := PosTrPerDisc;										
"PosTrPerDisc2.""Line No."" := pPOSTransLine.""Parent Line"";"										
PosTrPerDisc2.INSERT();										
UNTIL PosTrPerDisc.NEXT() = 0;										
END;										
										
DataEntry.RESET;										
"DataEntry.SETCURRENTKEY(""Created by Receipt No."", ""Created by Line No."");"										
"DataEntry.SETRANGE(""Created by Receipt No."",pPOSTransLine.""Receipt No."");"										
"DataEntry.SETRANGE(""Created by Line No."",pPOSTransLine.""Line No."");"										
IF DataEntry.FINDSET THEN										
REPEAT										
tmpDataEntry.TRANSFERFIELDS(DataEntry);										
"tmpDataEntry.""Created by Line No."" := pPOSTransLine.""Parent Line"";"										
tmpDataEntry.MODIFY;										
UNTIL DataEntry.NEXT = 0;										
										
DataEntry.RESET;										
"DataEntry.SETCURRENTKEY(""Applied by Receipt No."", ""Applied by Line No."");"										
"DataEntry.SETRANGE(""Applied by Receipt No."",pPOSTransLine.""Receipt No."");"										
"DataEntry.SETRANGE(""Applied by Line No."",pPOSTransLine.""Line No."");"										
IF DataEntry.FINDSET THEN										
REPEAT										
tmpDataEntry.TRANSFERFIELDS(DataEntry);										
"tmpDataEntry.""Applied by Line No."" := pPOSTransLine.""Parent Line"";"										
tmpDataEntry.MODIFY;										
UNTIL DataEntry.NEXT = 0;										
										
IF NOT BOUtils.IsHospitalityPermitted THEN										
EXIT;										
										
{//LS7.1-19										
BomPrintTrLine.RESET;										
"BomPrintTrLine.SETCURRENTKEY(""Document No."",""Restaurant Station"",""Trans. Line No."");"										
"BomPrintTrLine.SETRANGE(""Document No."",pPOStrans.""Receipt No."");"										
"BomPrintTrLine.SETRANGE(""Trans. Line No."",pPOStrans.""Line No."");"										
IF BomPrintTrLine.FINDSET THEN BEGIN										
REPEAT										
BomPrintTrLine.DELETE;										
BomPrintTrLine2 := BomPrintTrLine;										
"BomPrintTrLine2.""Trans. Line No."" := pPOStrans.""Parent Line"";"										
BomPrintTrLine2.INSERT;										
UNTIL BomPrintTrLine.NEXT = 0;										
END;										
}//LS7.1-19										
//LS7.1-19-										
PosTrLineDisplStatRout.RESET;										
"PosTrLineDisplStatRout.SETRANGE(""Receipt No."",pPOSTransLine.""Receipt No."");"										
"PosTrLineDisplStatRout.SETRANGE(""Pos Trans. Line No."",pPOSTransLine.""Line No."");"										
IF PosTrLineDisplStatRout.FINDSET THEN										
REPEAT										
PosTrLineDisplStatRout.DELETE;										
PosTrLineDisplStatRout2 := PosTrLineDisplStatRout;										
"PosTrLineDisplStatRout2.""Pos Trans. Line No."" := pPOSTransLine.""Parent Line"";"										
PosTrLineDisplStatRout2.INSERT;										
UNTIL PosTrLineDisplStatRout.NEXT = 0;										
										
KotTransLineMapping.RESET;										
"KotTransLineMapping.SETCURRENTKEY(""Receipt No."",""POS Trans. Line No."");"										
"KotTransLineMapping.SETRANGE(""Receipt No."",pPOSTransLine.""Receipt No."");"										
"KotTransLineMapping.SETRANGE(""POS Trans. Line No."",pPOSTransLine.""Line No."");"										
"IF KotTransLineMapping.FINDSET(TRUE,TRUE) THEN"										
REPEAT										
KotTransLineMapping2 := KotTransLineMapping;										
"KotTransLineMapping2.""POS Trans. Line No."" := pPOSTransLine.""Parent Line"";"										
KotTransLineMapping2.MODIFY;										
UNTIL KotTransLineMapping.NEXT = 0;										
										
KotTransLineModMapping.RESET;										
"KotTransLineModMapping.SETCURRENTKEY(""Receipt No."",""POS Trans. Line No."");"										
"KotTransLineModMapping.SETRANGE(""Receipt No."",pPOSTransLine.""Receipt No."");"										
"KotTransLineModMapping.SETRANGE(""POS Trans. Line No."",pPOSTransLine.""Line No."");"										
"IF KotTransLineModMapping.FINDSET(TRUE,TRUE) THEN"										
REPEAT										
KotTransLineModMapping2 := KotTransLineModMapping;										
"KotTransLineModMapping2.""POS Trans. Line No."" := pPOSTransLine.""Parent Line"";"										
KotTransLineModMapping2.MODIFY;										
UNTIL KotTransLineModMapping.NEXT = 0;										
//LS7.1-19+										
END;										
										
PROCEDURE CorrectLineNumbers@1100409036(RcptNo@1100409000 : Code[20]);										
VAR										
POStrans3@1100409001 : Record 99008981;										
ModifyNeeded@1100409002 : Boolean;										
BEGIN										
//CorrectLineNumbers										
"//Correct ""Disc. Info Line No."", according to moved lines."										
										
POStrans3.RESET();										
"POStrans3.SETRANGE(""Receipt No."",RcptNo);"										
IF POStrans3.FINDSET THEN										
REPEAT										
"IF POStrans3.""Disc. Info Line No."" <> 0 THEN BEGIN"										
"IF POSTransLineTemp.GET(POStrans3.""Receipt No."",POStrans3.""Disc. Info Line No."") THEN BEGIN"										
"POStrans3.""Disc. Info Line No."" := POSTransLineTemp.""Parent Line"";"										
ModifyNeeded := TRUE;										
END;										
END;										
"IF POStrans3.""Mix & Match Line No."" <> 0 THEN BEGIN"										
"IF POSTransLineTemp.GET(POStrans3.""Receipt No."",POStrans3.""Mix & Match Line No."") THEN BEGIN"										
"POStrans3.""Mix & Match Line No."" := POSTransLineTemp.""Parent Line"";"										
ModifyNeeded := TRUE;										
END;										
END;										
"IF POStrans3.""Tot. Disc Info Line No."" <> 0 THEN BEGIN"										
"IF POSTransLineTemp.GET(POStrans3.""Receipt No."",POStrans3.""Tot. Disc Info Line No."") THEN BEGIN"										
"POStrans3.""Tot. Disc Info Line No."" := POSTransLineTemp.""Parent Line"";"										
ModifyNeeded := TRUE;										
END;										
END;										
"IF POStrans3.""Split Origin Line No."" <> 0 THEN BEGIN"										
"IF POSTransLineTemp.GET(POStrans3.""Receipt No."",POStrans3.""Split Origin Line No."") THEN BEGIN"										
"POStrans3.""Split Origin Line No."" := POSTransLineTemp.""Parent Line"";"										
ModifyNeeded := TRUE;										
END;										
END;										
IF ModifyNeeded THEN										
POStrans3.MODIFY(TRUE);										
UNTIL POStrans3.NEXT = 0;										
END;										
										
PROCEDURE InsertLinkedLine@1100409037(ReceiptNo@1100409003 : Code[20];FromLineNo@1100409013 : Integer;LastLineNo@1100409000 : Intege	r;P	are	nt	Lin	eNo@1100409014 : Integer;NewPrice@1100409012 : Decimal;SetPrice@1100409011 : Boolean;LinkedUOM@1100409010 : Code[10];LinkedQty@1100409009 : Decimal);					
VAR										
POStrans2@1100409008 : Record 99008981;										
POStrans3@1100409007 : Record 99008981;										
POSPriceUtil@1100409006 : Codeunit 99008906;										
BEGIN										
//InsertLinkedLine       Attach to Last Parent command										
"//Move last lines to the created space, last in the parent group."										
										
"POSTransLineTemp.GET(ReceiptNo,LastLineNo);         //linked line with old line no."										
REPEAT										
"POStrans2.GET(ReceiptNo,POSTransLineTemp.""Parent Line"");  //linked line with new line no."										
										
POStrans2.DELETE();										
										
POStrans3 := POStrans2;										
"POStrans3.""Line No."" := FromLineNo;"										
"IF POStrans3.""Parent Line"" <> 0 THEN"										
"POStrans3.""Parent Line"" := ParentLineNo;"										
										
IF LinkedUOM <> '' THEN										
"POStrans3.VALIDATE(""Unit of Measure"",LinkedUOM);"										
										
IF SetPrice THEN										
"POStrans3.VALIDATE(POStrans3.Price,NewPrice)"										
ELSE										
POSPriceUtil.UpdatePrice(POStrans3);										
										
"POStrans3.VALIDATE(Quantity,POStrans3.Quantity * LinkedQty);"										
POStrans3.INSERT();										
										
"//LS7.1-18 CopyPrintedAndHospStation(POStrans2,POStrans3);"										
//LS7.1-18  DeletePrintedAndHospStation(POStrans2);										
										
"POSTransLineTemp.""Parent Line"" := FromLineNo;"										
POSTransLineTemp.MODIFY();										
"POStrans2.""Parent Line"" := FromLineNo;"										
MoveLinkedLines(POStrans2);										
UNTIL POSTransLineTemp.NEXT() = 0;										
END;										
										
PROCEDURE SplitPosTransLineByQty@1100409034(VAR OrgPosTransLine@1200070000 : Record 99008981;VAR NewLineNo@1100409000 : Integer;QtyT	oSp	lit	@1	100	409001 : Decimal);					
VAR										
NewPosTransLine@1200070001 : Record 99008981;										
PosPriceUtility@1100409004 : Codeunit 99008906;										
KDSFunc@1100409003 : Codeunit 10001217;										
OrgQty@1100409005 : Decimal;										
QtyNotPrinted@1100409002 : Decimal;										
"LineStatus@1100409007 : ' ,Sent,Partially-Sent,Voided';"										
QtyNotSent@1100409006 : Decimal;										
BEGIN										
//SplitPosTransLinebyQty										
"NewPosTransLine.SETRANGE(""Receipt No."",OrgPosTransLine.""Receipt No."");"										
NewPosTransLine.SETFILTER(										
"""Entry Type"",'%1..%2|%3..',"										
"NewPosTransLine.""Entry Type""::Item,"										
"NewPosTransLine.""Entry Type""::Payment,"										
"NewPosTransLine.""Entry Type""::IncomeExpense);"										
NewPosTransLine.FIND('+');										
"NewLineNo := NewPosTransLine.""Line No."" + 10000;"										
										
"PosPriceUtility.GetTransDisc(OrgPosTransLine,TRUE,0);"										
OrgQty := OrgPosTransLine.Quantity;										
										
NewPosTransLine.INIT;										
NewPosTransLine := OrgPosTransLine;										
										
"NewPosTransLine.""Line No."" := NewLineNo;"										
"NewPosTransLine.""Parent Line"" := NewLineNo;"										
NewPosTransLine.Quantity := QtyToSplit;										
"NewPosTransLine.""Parent Compression"" := NewPosTransLine.""Parent Compression""::""Split Parent Line"";"										
"NewPosTransLine.""Shifted from Line No."" := 0;"										
"NewPosTransLine.""Split from Line No."" := 0;"										
"NewPosTransLine.""Split from Line No. Qty."" := 0;"										
										
IF POSSESSION.GetValue('OFFL_CALLCENTER') = 'SENT' THEN BEGIN										
"IF OrgPosTransLine.""Shifted from Line No."" <> 0 THEN"										
"NewPosTransLine.""Split from Line No."" := OrgPosTransLine.""Shifted from Line No."""										
ELSE										
"NewPosTransLine.""Split from Line No."" := OrgPosTransLine.""Line No."";"										
"NewPosTransLine.""Split from Line No. Qty."" := OrgPosTransLine.Quantity;"										
END;										
"CopyTransPerDiscLines(OrgPosTransLine,NewPosTransLine);"										
NewPosTransLine.CalcPrices();										
NewPosTransLine.INSERT(TRUE);										
										
"//LS7.1-18 IF NOT GetPrinted(OrgPosTransLine,QtyNotPrinted) THEN"										
//LS7.1-18  QtyNotPrinted := QtyToSplit;										
OrgPosTransLine.Quantity := OrgPosTransLine.Quantity - QtyToSplit;										
OrgPosTransLine.CalcPrices();										
"ChangeTransPerDiscLines(OrgPosTransLine,OrgQty,OrgPosTransLine.Quantity);"										
OrgPosTransLine.MODIFY(TRUE);										
										
//new line is treated like a normal new line. Old line with reduced quantity will have correct quantity voided when resent to KDS										
"//LS7.1-19 SplitTrLineQtyPrintUpdate(OrgPosTransLine,NewPosTransLine,QtyToSplit,QtyNotPrinted);"										
END;										
										
PROCEDURE SplitTrLineQtyPrintUpdate@1100409033(OldTransLine@1100409000 : Record 99008981;NewTransLine@1100409001 : Record 99008981;Q	tyt	oSp	li	tIn	@1100409018 : Decimal;QtyNotPrinted@1100409005 : Decimal);					
VAR										
KotTransLineMapping@1100409003 : Record 10012143;										
QtyToMove@1100409002 : Decimal;										
PartialQty@1100409009 : Decimal;										
LastLineNo@1100409015 : Integer;										
QtyToSplit@1100409010 : Integer;										
BEGIN										
//SplitTrLineQtyPrintUpdate										
IF NOT BOUtils.IsHospitalityPermitted THEN										
EXIT;										
										
IF QtyNotPrinted = QtytoSplitIn THEN										
EXIT;										
QtyToSplit := QtytoSplitIn - QtyNotPrinted;										
"//LS7.1-18 SetPrintedAddQty(OldTransLine,TRUE,FALSE,-QtyToSplit);"										
"//LS7.1-18 SetPrinted(NewTransLine,TRUE,FALSE);"										
										
//LS7.1-19-										
										
//LS7.1-19+										
{//LS7.1-19										
RestStation.RESET;										
IF RestStation.FINDSET THEN										
REPEAT										
BomPrintTransLine.RESET;										
"BomPrintTransLine.SETCURRENTKEY(""Document No."",""Restaurant Station"",""Trans. Line No."",""BOM Sequence"");"										
BomPrintTransLine.ASCENDING(FALSE);										
"BomPrintTransLine.SETRANGE(""Document No."",OldTransLine.""Receipt No."");"										
"BomPrintTransLine.SETRANGE(""Restaurant Station"",RestStation.Code);"										
"BomPrintTransLine.SETRANGE(""Trans. Line No."",OldTransLine.""Line No."");"										
QtyToMove := QtyToSplit;										
IF BomPrintTransLine.FIND('-') THEN BEGIN										
"IF RestStation.""Station Type"" = RestStation.""Station Type""::Monitor THEN BEGIN"										
BomMonLine.RESET;										
"BomMonLine.SETRANGE(""Document Type"",BomMonLine.""Document Type""::POS);"										
"BomMonLine.SETRANGE(""Document No."",OldTransLine.""Receipt No."");"										
"BomMonLine.SETRANGE(""Restaurant Station"",BomPrintTransLine.""Restaurant Station"");"										
"BomMonLine.SETRANGE(""BOM Sequence"",BomPrintTransLine.""BOM Sequence"");"										
IF NOT BomMonLine.FINDLAST THEN										
LastLineNo := 0										
ELSE										
"LastLineNo := BomMonLine.""Line No."";"										
END ELSE BEGIN										
BomPrintLine.RESET;										
"BomPrintLine.SETRANGE(""Document Type"",BomPrintLine.""Document Type""::POS);"										
"BomPrintLine.SETRANGE(""Document No."",OldTransLine.""Receipt No."");"										
"BomPrintLine.SETRANGE(""Restaurant Station"",BomPrintTransLine.""Restaurant Station"");"										
IF NOT BomPrintLine.FINDLAST THEN										
LastLineNo := 0										
ELSE										
"LastLineNo := BomPrintLine.""Line No."";"										
END;										
										
REPEAT										
IF BomPrintTransLine.Quantity > QtyToMove THEN BEGIN										
BomPrintTransLine.Quantity := BomPrintTransLine.Quantity - QtyToMove;										
BomPrintTransLine.MODIFY;										
NewBomPrintTransLine.INIT;										
NewBomPrintTransLine := BomPrintTransLine;										
"NewBomPrintTransLine.""Trans. Line No."" := NewTransLine.""Line No."";"										
NewBomPrintTransLine.Quantity := QtyToMove;										
"NewBomPrintTransLine.""Line No."" := LastLineNo + 10000;"										
NewBomPrintTransLine.INSERT;										
										
"IF RestStation.""Station Type"" = RestStation.""Station Type""::Monitor THEN BEGIN"										
BomMonLine.GET(										
"BomPrintTransLine.""Document Type"",BomPrintTransLine.""Document No."","										
"BomPrintTransLine.""Restaurant Station"",BomPrintTransLine.""Line No."",BomPrintTransLine.""BOM Sequence"");"										
BomMonLine.Quantity := BomMonLine.Quantity - QtyToMove;										
BomMonLine.MODIFY;										
NewBomMonLine.INIT;										
NewBomMonLine := BomMonLine;										
"NewBomMonLine.""Line No."" := LastLineNo + 10000;"										
NewBomMonLine.Quantity := QtyToMove;										
NewBomMonLine.INSERT;										
END ELSE BEGIN										
BomPrintLine.GET(										
"BomPrintTransLine.""Document Type"",BomPrintTransLine.""Document No."","										
"BomPrintTransLine.""Restaurant Station"",BomPrintTransLine.""Line No."");"										
BomPrintLine.Quantity := BomPrintLine.Quantity - QtyToMove;										
BomPrintLine.MODIFY;										
NewBomPrintLine.INIT;										
NewBomPrintLine := BomPrintLine;										
"NewBomPrintLine.""Line No."" := LastLineNo + 10000;"										
NewBomPrintLine.Quantity := QtyToMove;										
NewBomPrintLine.INSERT;										
END;										
QtyToMove := 0;										
END ELSE BEGIN										
PartialQty:= BomPrintTransLine.Quantity;										
NewBomPrintTransLine.INIT;										
NewBomPrintTransLine := BomPrintTransLine;										
"NewBomPrintTransLine.""Trans. Line No."" := NewTransLine.""Line No."";"										
"NewBomPrintTransLine.""Line No."" := LastLineNo + 10000;"										
NewBomPrintTransLine.INSERT;										
BomPrintTransLine.DELETE;										
										
"IF RestStation.""Station Type"" = RestStation.""Station Type""::Monitor THEN BEGIN"										
BomMonLine.GET(										
"BomPrintTransLine.""Document Type"",BomPrintTransLine.""Document No."","										
"BomPrintTransLine.""Restaurant Station"",BomPrintTransLine.""Line No."",BomPrintTransLine.""BOM Sequence"");"										
NewBomMonLine.INIT;										
NewBomMonLine := BomMonLine;										
"NewBomMonLine.""Line No."" := LastLineNo + 10000;"										
NewBomMonLine.Quantity := PartialQty;										
NewBomMonLine.INSERT;										
										
BomMonLine.Quantity := BomMonLine.Quantity - PartialQty;										
IF BomMonLine.Quantity <= 0 THEN										
BomMonLine.DELETE										
ELSE										
BomMonLine.MODIFY;										
END ELSE BEGIN										
BomPrintLine.GET(										
"BomPrintTransLine.""Document Type"",BomPrintTransLine.""Document No."","										
"BomPrintTransLine.""Restaurant Station"",BomPrintTransLine.""Line No."");"										
NewBomPrintLine.INIT;										
NewBomPrintLine := BomPrintLine;										
"NewBomPrintLine.""Line No."" := LastLineNo + 10000;"										
NewBomPrintLine.Quantity := PartialQty;										
NewBomPrintLine.INSERT;										
										
BomPrintLine.Quantity := BomPrintLine.Quantity - PartialQty;										
IF BomPrintLine.Quantity <= 0 THEN										
BomPrintLine.DELETE										
ELSE										
BomPrintLine.MODIFY;										
END;										
LastLineNo += 10000;										
QtyToMove := QtyToMove - PartialQty;										
END;										
UNTIL (BomPrintTransLine.NEXT = 0) OR (QtyToMove <= 0);										
										
END;										
UNTIL RestStation.NEXT = 0;										
} //LS7.1-19										
END;										
										
PROCEDURE CopyTransPerDiscLines@1100409031(OrgLine@1100409000 : Record 99008981;NewLine@1100409001 : Record 99008981);										
VAR										
OrgPerDiscLine@1100409002 : Record 99008943;										
NewPerDiscLine@1100409003 : Record 99008943;										
BEGIN										
//CopyTransPerDiscLines										
"IF (OrgLine.""Line No."" <> NewLine.""Line No."") THEN BEGIN"										
OrgPerDiscLine.RESET;										
"OrgPerDiscLine.SETRANGE(""Receipt No."",OrgLine.""Receipt No."");"										
"OrgPerDiscLine.SETRANGE(""Line No."",OrgLine.""Line No."");"										
IF OrgPerDiscLine.FINDSET THEN BEGIN										
REPEAT										
NewPerDiscLine := OrgPerDiscLine;										
"NewPerDiscLine.""Line No."" := NewLine.""Line No."";"										
										
IF (OrgLine.Quantity <> NewLine.Quantity) THEN										
"NewPerDiscLine.""Discount Amount"" := NewPerDiscLine.""Discount Amount"" * (NewLine.Quantity / OrgLine.Quantity);"										
										
NewPerDiscLine.INSERT;										
UNTIL OrgPerDiscLine.NEXT = 0;										
END;										
END;										
END;										
										
PROCEDURE ChangeTransPerDiscLines@1100409030(PosTrLine@1100409001 : Record 99008981;OrgQty@1100409000 : Decimal;NewQty@1100409002 :	Dec	ima	l)	;						
VAR										
PerDiscLine@1100409003 : Record 99008943;										
BEGIN										
//ChangeTransPerDiscLines										
IF (OrgQty <> 0) AND (OrgQty <> NewQty) THEN BEGIN										
PerDiscLine.RESET;										
"PerDiscLine.SETRANGE(""Receipt No."",PosTrLine.""Receipt No."");"										
"PerDiscLine.SETRANGE(""Line No."",PosTrLine.""Line No."");"										
IF PerDiscLine.FIND('-') THEN BEGIN										
REPEAT										
"PerDiscLine.""Discount Amount"" := PerDiscLine.""Discount Amount"" * (NewQty / OrgQty);"										
										
PerDiscLine.MODIFY;										
UNTIL PerDiscLine.NEXT = 0;										
END;										
END;										
END;										
										
PROCEDURE DiscReset@1100401006(VAR LineRec@1100409000 : Record 99008981);										
VAR										
PosTrans@1100409003 : Record 99008980;										
OfferPoscalculations@1100409002 : Record 99001561;										
PosPriceUtil@1100409001 : Codeunit 99008906;										
PosTransPerDisc@1100409004 : Record 99008943;										
"BlockingType@1100409005 : 'Manual Price,Line Disc. Offer,Total Disc. Offer,Tender Type Disc.,Loyalty Points,InfoCode';"										
BEGIN										
//DiscReset										
InitPosFunctions;										
										
"PosTrans.GET(LineRec.""Receipt No."");"										
										
"PosTransPerDisc.SETRANGE(""Receipt No."",LineRec.""Receipt No."");"										
"PosTransPerDisc.SETRANGE(""Line No."",LineRec.""Line No."");"										
"PosTransPerDisc.SETFILTER(DiscType,'Line|Line Discount');    //LS7.1-01"										
										
IF PosTransPerDisc.FIND('-') THEN										
REPEAT										
"PosTransPerDisc.""Discount %"" := 0;"										
"PosTransPerDisc.""Discount Amount"" := 0;"										
"PosTransPerDisc.""Total Disc. Amount"" := 0;"										
"PosTransPerDisc.""Periodic Discount Amount"" := 0;"										
PosTransPerDisc.MODIFY;										
UNTIL PosTransPerDisc.NEXT = 0;										
										
"LineRec.""Discount Triggered"" := FALSE;"										
"LineRec.""Quantity Discounted"" := 0;"										
"//LineRec.""Periodic Disc. Type"" := LineRec.""Periodic Disc. Type""::""0"";"										
"//LineRec.""Periodic Disc. Group"" := '';"										
"LineRec.""InfoCode Disc. Disable"" := FALSE;"										
"LineRec.""InfoCode Disc. %"" := 0;"										
"LineRec.""Periodic Disc. %"" := 0;"										
"LineRec.""Mix & Match Line No."" := 0;"										
"LineRec.""Periodic Discount Amount"" := 0;"										
"LineRec.VALIDATE(LineRec.""Line Disc. %"",0);"										
LineRec.MODIFY(TRUE);										
										
"OfferPoscalculations.SETRANGE(""Receipt No."",LineRec.""Receipt No."");"										
"OfferPoscalculations.SETRANGE(""Trans. Line No."",LineRec.""Line No."");"										
IF OfferPoscalculations.FINDFIRST THEN										
OfferPoscalculations.DELETEALL;										
										
LineRec.UpdatePerDiscInfoLine;										
										
"PosPriceUtil.SetPosTransLineOfferBlocked(LineRec,BlockingType::""Line Disc. Offer"");"										
"PosPriceUtil.SetPosTransLineOfferBlocked(LineRec,BlockingType::InfoCode);"										
"IF NOT PosFuncProfile.""Period Disc. on Total Pressed"" THEN"										
PosPriceUtil.CalcPeriodicOnTotalPressed(PosTrans);										
										
"PosTransPerDisc.SETRANGE(""Receipt No."",LineRec.""Receipt No."");"										
"PosTransPerDisc.SETRANGE(""Line No."",LineRec.""Line No."");"										
"PosTransPerDisc.SETFILTER(""No."",'<>%1',0);"										
PosTransPerDisc.DELETEALL;										
END;										
										
PROCEDURE MarkLine@92(VAR pPosTransLine@1100409000 : Record 99008981);										
VAR										
MarkPosTransLine@1100409004 : TEMPORARY Record 99008981;										
Marked@1000 : Boolean;										
LineNoTmp@1200070002 : Integer;										
DiscLineNoTmp@1200070003 : Integer;										
LineReceiptNoTmp@1100409001 : Code[20];										
DealLine@1100409002 : Boolean;										
ParentLineNo@1100409003 : Integer;										
LineNoOfParent@1100409005 : Integer;										
BEGIN										
//MarkLine										
										
"LineNoTmp := pPosTransLine.""Line No."";"										
"LineReceiptNoTmp := pPosTransLine.""Receipt No."";"										
"DiscLineNoTmp := pPosTransLine.""Disc. Info Line No."";"										
"DealLine := pPosTransLine.""Deal Line"";"										
"ParentLineNo := pPosTransLine.""Parent Line"";"										
										
"LineNoOfParent := pPosTransLine.""Line No."";"										
										
Marked := NOT pPosTransLine.Marked;										
CLEAR(MarkPosTransLine);										
MarkPosTransLine.DELETEALL;										
// find and mark parent										
"IF pPosTransLine.""Parent Line"" = 0 THEN"										
pPosTransLine.SetMark(Marked)										
ELSE BEGIN										
"IF pPosTransLine.""Parent Line"" = pPosTransLine.""Line No."" THEN"										
pPosTransLine.SetMark(Marked)										
ELSE BEGIN   // 2nd level										
pPosTransLine.RESET;										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Line No."",ParentLineNo);"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FINDFIRST THEN BEGIN										
"LineNoOfParent := pPosTransLine.""Line No."";"										
"IF pPosTransLine.""Parent Line"" = 0 THEN"										
pPosTransLine.SetMark(Marked)										
ELSE BEGIN										
"IF pPosTransLine.""Parent Line"" = pPosTransLine.""Line No."" THEN"										
pPosTransLine.SetMark(Marked)										
ELSE BEGIN   // 3rd level										
"ParentLineNo := pPosTransLine.""Parent Line"";"										
pPosTransLine.RESET;										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Line No."",ParentLineNo);"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FINDFIRST THEN BEGIN										
"LineNoOfParent := pPosTransLine.""Line No."";"										
pPosTransLine.SetMark(Marked);										
END ELSE										
pPosTransLine.SetMark(Marked);										
END;										
END;										
END ELSE										
pPosTransLine.SetMark(Marked);										
END;										
END;										
// mark children										
pPosTransLine.RESET;										
"pPosTransLine.SETCURRENTKEY(""Receipt No."",""Parent Line"");"										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Parent Line"",LineNoOfParent);"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FIND('-') THEN										
REPEAT										
pPosTransLine.SetMark(Marked);										
MarkPosTransLine := pPosTransLine;										
MarkPosTransLine.INSERT;										
UNTIL pPosTransLine.NEXT = 0;										
										
// mark grandchildren										
IF MarkPosTransLine.FINDSET THEN										
REPEAT										
pPosTransLine.RESET;										
"pPosTransLine.SETCURRENTKEY(""Receipt No."",""Parent Line"");"										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Parent Line"",MarkPosTransLine.""Line No."");"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FIND('-') THEN										
REPEAT										
pPosTransLine.SetMark(Marked);										
UNTIL pPosTransLine.NEXT = 0;										
UNTIL MarkPosTransLine.NEXT = 0;										
										
IF DealLine THEN										
EXIT;										
										
pPosTransLine.RESET;										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Disc. Info Line No."",LineNoTmp);"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FIND('-') THEN										
REPEAT										
pPosTransLine.SetMark(Marked);										
UNTIL pPosTransLine.NEXT = 0;										
										
IF DiscLineNoTmp <> 0 THEN BEGIN										
pPosTransLine.RESET;										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Line No."",DiscLineNoTmp);"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FINDFIRST THEN BEGIN										
pPosTransLine.SetMark(Marked);										
"LineNoTmp := pPosTransLine.""Line No."";"										
pPosTransLine.RESET;										
"pPosTransLine.SETRANGE(""Receipt No."",LineReceiptNoTmp);"										
"pPosTransLine.SETRANGE(""Disc. Info Line No."",LineNoTmp);"										
"pPosTransLine.SETRANGE(""Entry Status"",0);"										
IF pPosTransLine.FIND('-') THEN										
REPEAT										
pPosTransLine.SetMark(Marked);										
UNTIL pPosTransLine.NEXT = 0;										
END;										
END;										
END;										
										
PROCEDURE ClearmemberInfo@1100409043();										
BEGIN										
//ClearmemberInfo										
POSMemberMgt.ClearMemberInfo;										
END;										
										
PROCEDURE LoadMemberInfo@1100409042(pCardNo@1100409000 : Text) : Boolean;										
VAR										
ProcessError@1100409002 : Boolean;										
ErrorText@1100409001 : Text[1024];										
BEGIN										
//LoadMemberInfo										
"POSSESSION.SetValue('TS_ERROR','');"										
//POSMemberMgt.ClearMemberInfo; //LS7.1-20										
"IF NOT POSMemberMgt.LoadMemberInfo(pCardNo,ProcessError,ErrorText) THEN BEGIN"										
IF ProcessError THEN										
"POSSESSION.SetValue('TS_ERROR',LSHelper.Trim(ErrorText,250));"										
EXIT(FALSE);										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE LoadMemberInformation@1100409032(pCardNo@1100409000 : Text;VAR pProcessError@1100409003 : Boolean;VAR pErrorText@110040900	4:00	Te	xt	) :	Boolean;					
BEGIN										
//LoadMemberInformation										
//LS7.1-20 - new										
"POSSESSION.SetValue('TS_ERROR','');"										
"IF NOT POSMemberMgt.LoadMemberInfo(pCardNo,pProcessError,pErrorText) THEN BEGIN"										
IF pProcessError THEN										
"POSSESSION.SetValue('TS_ERROR',LSHelper.Trim(pErrorText,250));"										
EXIT(FALSE);										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE MemberInfoHasBeenLoaded@1100409045(pCardNo@1100409000 : Text) : Boolean;										
VAR										
MembershipCardTemp@1100409001 : TEMPORARY Record 99009003;										
BEGIN										
//MemberInfoHasBeenLoaded										
POSMemberMgt.GetMemberShipCardInfo(MembershipCardTemp);										
"IF (pCardNo <> '') AND (pCardNo = MembershipCardTemp.""Card No."") THEN"										
EXIT(TRUE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE GetMemberShipCardInfo@1100409053(VAR pMembershipCardTemp@1100409001 : TEMPORARY Record 99009003) : Boolean;										
BEGIN										
//GetMemberShipCardInfo										
EXIT(POSMemberMgt.GetMemberShipCardInfo(pMembershipCardTemp));										
END;										
										
PROCEDURE GetMemberAccountInfo@1100409056(VAR pMemberAccount@1100409000 : TEMPORARY Record 99009001) : Boolean;										
BEGIN										
//GetMemberAccountInfo										
EXIT(POSMemberMgt.GetMemberAccountInfo(pMemberAccount));										
END;										
										
PROCEDURE GetMemberClubInfo@1100409022(VAR pMemberClubTemp@1100409000 : TEMPORARY Record 99009000) : Boolean;										
BEGIN										
//GetMemberClubInfo										
//LS7.1-20 new function										
EXIT(POSMemberMgt.GetMemberClubInfo(pMemberClubTemp));										
END;										
										
PROCEDURE GetMemberSchemeInfo@1100409025(VAR pMemberSchemeTemp@1100409000 : TEMPORARY Record 99009024) : Boolean;										
BEGIN										
//GetMemberSchemeInfo										
//LS7.1-20 new function										
EXIT(POSMemberMgt.GetMemberSchemeInfo(pMemberSchemeTemp));										
END;										
										
PROCEDURE GetMemberMgtSetupInfo@1100409089(VAR pMemberMgtSetupTemp@1100409000 : TEMPORARY Record 99009032) : Boolean;										
BEGIN										
//GetMemberMgtSetupInfo										
//LS7.1-21 new function										
EXIT(POSMemberMgt.GetMemberMgtSetupInfo(pMemberMgtSetupTemp));										
END;										
										
PROCEDURE GetMemberPointSetupInfo@1100409091(VAR pMemberPointSetupTemp@1100409000 : TEMPORARY Record 99009011) : Boolean;										
BEGIN										
//GetMemberPointSetupInfo										
//LS7.1-21 new function										
EXIT(POSMemberMgt.GetMemberPointSetupInfo(pMemberPointSetupTemp));										
END;										
										
PROCEDURE GetMemberAttributeList@1100409055(VAR pAttributeListList@1100409000 : TEMPORARY Record 99009033) : Boolean;										
BEGIN										
//GetAttributeList										
EXIT(POSMemberMgt.GetAttributeList(pAttributeListList));										
END;										
										
PROCEDURE GetMemberAttributeValue@1100409046(pAttributeCode@1100409003 : Code[10];VAR pAttributeValue@1100409002 : Text[80];VAR pAtt	rib	ute	St	atu	"s@1100409001 : 'Solved,Pending,Blocked') : Boolean;"					
VAR										
ErrorText@1100409000 : Text[1024];										
BEGIN										
//GetAttributeValue										
"EXIT(POSMemberMgt.GetAttributeValue(pAttributeCode,pAttributeValue,pAttributeStatus,ErrorText));"										
END;										
										
PROCEDURE GetAndSolveMemberAttrValue@1100409044(pAttributeCode@1100409003 : Code[10];VAR pAttributeValue@1100409002 : Text[80]) : Bo	ole	an;								
VAR										
ProcessError@1100409001 : Boolean;										
ErrorText@1100409000 : Text[1024];										
BEGIN										
//GetAndSolveAttributeValue										
"IF NOT POSMemberMgt.GetAndSolveAttributeValue(pAttributeCode,pAttributeValue,ProcessError,ErrorText) THEN BEGIN"										
IF ProcessError THEN										
"POSSESSION.SetValue('TS_ERROR',LSHelper.Trim(ErrorText,250));"										
EXIT(FALSE);										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE LoadMemberInfoLocal@1100409080(pCardNo@1100409000 : Text[22]) : Boolean;										
VAR										
ErrorText@1100409001 : Text[250];										
BEGIN										
//LoadMemberInfoLocal										
POSMemberMgt.ClearMemberInfo;										
"IF NOT POSMemberMgt.LoadMemberInfoLocal(pCardNo,ErrorText) THEN"										
EXIT(FALSE);										
										
EXIT(TRUE);										
END;										
										
PROCEDURE ChangeStaff@1100409047(PosTransIn@1100409000 : Record 99008980);										
VAR										
KDSFunc@1100409001 : Codeunit 10001217;										
HospFunc@1100409002 : Codeunit 10001203;										
HospDiningTblMgmtFunc@1100409004 : Codeunit 10001204;										
PrintWhenPosting@1100409003 : Boolean;										
BEGIN										
StoreSetup.GET(POSSESSION.StoreNo);										
										
//LS7.1-12-										
"IF PosTransIn.""Table No."" <> 0 THEN"										
HospDiningTblMgmtFunc.SetDiningTblOwner(PosTransIn);										
										
"IF StoreSetup.""Kitchen Prod. System in Use"" = StoreSetup.""Kitchen Prod. System in Use""::No THEN"										
EXIT;										
										
"IF NOT HospFunc.KitchenStatusInUse(PosTransIn,PrintWhenPosting) THEN"										
EXIT;										
										
"KDSFunc.UpdateStaffID(PosTransIn.""Receipt No."",PosTransIn.""Staff ID""); //LS7.1-01"										
//LS7.1-12+										
										
{//LS7.1-12										
CLEAR(BomMonHeader);										
"BomMonHeader.SETRANGE(""Document Type"",BomMonHeader.""Document Type""::POS);"										
"BomMonHeader.SETRANGE(""No."",PosTransIn.""Receipt No."");"										
"BomMonHeader.MODIFYALL(""Cashier ID"",PosTransIn.""Staff ID"");"										
} //LS7.1-12										
END;										
										
PROCEDURE SetPosTransDiscEntryBuffer@1100409048(VAR pPosTransPerDiscTmp@1100409000 : TEMPORARY Record 99008943);										
BEGIN										
//SetPosTransDiscEntryBuffer										
DiscLedgerMgt.SavePosTransDiscBuffer(pPosTransPerDiscTmp);										
END;										
										
PROCEDURE ClearPosTransDiscEntryBuffer@1100409049();										
BEGIN										
//ClearPosTransDiscEntryBuffer										
DiscLedgerMgt.DelerePosTransDiscBuffer;										
END;										
										
PROCEDURE InsertPosTransDiscEntryBuffer@1100409051(VAR pPosTransLine@1100409001 : Record 99008981);										
VAR										
PosTransPerDiscTmp@1100409002 : TEMPORARY Record 99008943;										
PosTransPerDisc@1100409000 : Record 99008943;										
BEGIN										
//InsertPosTransDiscEntryBuffer										
DiscLedgerMgt.GetPosTransDiscBuffer(PosTransPerDiscTmp);										
										
PosTransPerDiscTmp.RESET;										
IF PosTransPerDiscTmp.FIND('-') THEN										
REPEAT										
PosTransPerDisc.INIT;										
PosTransPerDisc := PosTransPerDiscTmp;										
"PosTransPerDisc.""Line No."" := pPosTransLine.""Line No."";"										
"PosTransPerDisc.""Entry Status"" := pPosTransLine.""Entry Status"";"										
IF NOT PosTransPerDisc.INSERT THEN										
PosTransPerDisc.MODIFY;										
UNTIL PosTransPerDiscTmp.NEXT = 0;										
END;										
										
PROCEDURE GetMemberLimitation@1100409050(pLimitationCode@1100409005 : Code[10];VAR pLimitationValue@1100409004 : Decimal;VAR pLimita	tio	nTy	pe	@11	"00409003 : 'None,Discount Amount,No. of Times Triggered') : Boolean;"					
VAR										
ErrorText@1100409000 : Text[1024];										
BEGIN										
//GetMemberLimitation										
"EXIT(POSMemberMgt.GetLimitationValue(pLimitationCode,pLimitationValue,pLimitationType,ErrorText));"										
END;										
										
PROCEDURE InitTrackingInstanceID@1100409052(VAR pPOSTrans@1100409000 : Record 99008980);										
BEGIN										
//InitTrackingInstanceID										
POSMemberMgt.InitTrackingInstanceID(pPOSTrans);										
END;										
										
PROCEDURE IncTrackingInstanceID@1100409057();										
BEGIN										
//IncTrackingInstanceID										
POSMemberMgt.IncTrackingInstanceID;										
END;										
										
PROCEDURE GetCurrTrackingInstanceID@1100409054() : Integer;										
BEGIN										
//GetCurrTrackingInstanceID										
EXIT(POSMemberMgt.GetCurrTrackingInstanceID);										
END;										
										
PROCEDURE GetMembershipCard@1100409058(pCardNo@1100409000 : Text;VAR pMembershipCardTemp@1100409001 : TEMPORARY Record 99009003;VAR	pEr	ror	Te	xt@	1100409004 : Text) : Boolean;					
VAR										
ProcessError@1100409003 : Boolean;										
ErrorText@1100409002 : Text[1024];										
lText001@1100409005 : TextConst 'ENU=Unable to load member card %1;ESP=No fue posible cargar la tarjeta de miembro %1';										
BEGIN										
//GetMembershipCard										
"POSSESSION.SetValue('TS_ERROR','');"										
pErrorText := '';										
										
IF GetMemberShipCardInfo(pMembershipCardTemp) THEN										
"IF pMembershipCardTemp.""Card No."" = pCardNo THEN"										
EXIT(TRUE);										
										
POSMemberMgt.ClearMemberInfo;										
"IF NOT POSMemberMgt.GetMembershipCard(pCardNo,ProcessError,ErrorText) THEN BEGIN"										
IF ProcessError THEN										
"POSSESSION.SetValue('TS_ERROR',LSHelper.Trim(ErrorText,250));"										
"pErrorText := LSHelper.Trim(ErrorText,250);"										
EXIT(FALSE);										
END;										
										
IF NOT GetMemberShipCardInfo(pMembershipCardTemp) THEN BEGIN										
"pErrorText := STRSUBSTNO(lText001,pCardNo);"										
EXIT(FALSE);										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE GetCurrMemberContact@1100409064(VAR pMemberContact@1100409000 : TEMPORARY Record 99009002) : Boolean;										
BEGIN										
//GetMemberContactInfo										
EXIT(POSMemberMgt.GetMemberContactInfo(pMemberContact));										
END;										
										
PROCEDURE MemberPointRedemptionCheck@1100409059(pMemberCardNo@1200070001 : Text;pAmountInCurrency@1200070002 : Decimal;pMgrKey@12000	700	6	:	Boo	lean;VAR pReturnTxt@1200000000 : Text[100];PointsUsed@1100409000 : Decimal) : Boolean;					
VAR										
ReturnError@1200000002 : Integer;										
ErrorTxt1@1200000005 : TextConst 'ENU=Payment exceeds Member Points asset of:;ESP=El pago excede el activo de Puntos de Miembro de	:';									
PointStatus@1200000006 : Decimal;										
BEGIN										
//MemberPointRedemptionCheck										
ReturnError := 0;										
										
"IF NOT GetMemberPointStatus(pMemberCardNo,PointStatus,ReturnError,pReturnTxt) THEN BEGIN"										
IF (ReturnError = 3) AND pMgrKey THEN BEGIN										
PointStatus := pAmountInCurrency;										
EXIT(TRUE);										
END;										
EXIT(FALSE);										
END;										
										
IF PointStatus < (pAmountInCurrency + PointsUsed) THEN BEGIN										
pReturnTxt := ErrorTxt1 + FORMAT(PointStatus);										
EXIT(FALSE);										
END;										
										
pReturnTxt := '';										
EXIT(TRUE);										
END;										
										
PROCEDURE GetMemberPointStatus@1100409060(pMemberCardNo@1200070001 : Text;VAR pPointStatus@1200070006 : Decimal;VAR pReturnError@120	7	0	2	: I	nteger;VAR pReturnTxt@1200000000 : Text[100]) : Boolean;					
VAR										
ErrorTxt1@1200000004 : TextConst 'ENU=No Member Card has been entered.;ESP=No se ha insertado Tarjeta de Miembro.';										
ErrorTxt2@1100409002 : TextConst 'ENU=Member Card not found.;ESP=Tarjeta miembro no encontrada.';										
MemberCard@1200000007 : TEMPORARY Record 99009003;										
MemberAccountTEMP_l@1100409004 : TEMPORARY Record 99009001;										
ProcessError@1100409001 : Boolean;										
ErrorText@1100409000 : Text[1024];										
BEGIN										
//GetMemberPointStatus										
"//Error 0 = Ok, Error 1 = No Card No., Error 2 = Card Not Found, Error 3 = Connection error"										
pReturnError := 0;										
//PointStatus := 0; //LS7.1-01 variable deleted too										
pPointStatus := 0; //LS7.1-01										
										
IF pMemberCardNo = '' THEN BEGIN										
pReturnTxt := ErrorTxt1;										
pReturnError := 1;										
EXIT(FALSE);										
END;										
										
IF GetMemberShipCardInfo(MemberCard) THEN										
"IF MemberCard.""Card No."" = pMemberCardNo THEN BEGIN"										
"//pPointStatus := MemberCard.""Point Balance""; //LS7.1-04"										
//LS7.1-04 -										
//Member Info already loaded.										
IF GetMemberAccountInfo(MemberAccountTEMP_l) THEN										
"pPointStatus := MemberAccountTEMP_l.Balance + MemberAccountTEMP_l.""Unprocessed Points"";"										
//LS7.1-04 +										
EXIT(TRUE);										
END;										
										
{ //LS7.1-04										
POSMemberMgt.ClearMemberInfo;										
"IF NOT POSMemberMgt.GetMembershipCard(pMemberCardNo,ProcessError,ErrorText) THEN BEGIN"										
} //LS7.1-04										
"IF NOT POSMemberMgt.LoadMemberInfo(pMemberCardNo,ProcessError,ErrorText) THEN BEGIN"										
IF ProcessError THEN BEGIN										
IF STRLEN(ErrorText) > 100 THEN										
"pReturnTxt := COPYSTR(ErrorText,1,100)"										
ELSE										
pReturnTxt := ErrorText;										
										
pReturnError := 3;										
END										
ELSE BEGIN										
pReturnError := 2;										
pReturnTxt := ErrorTxt2										
END;										
EXIT(FALSE);										
END;										
										
{ //LS7.1-04										
IF NOT GetMemberShipCardInfo(MemberCard) THEN BEGIN										
pReturnError := 2;										
pReturnTxt := ErrorTxt2;										
EXIT(FALSE);										
END;										
} //LS7.1-04										
										
"//pPointStatus := MemberCard.""Point Balance""; //LS7.1-04"										
//LS7.1-04 -										
IF GetMemberAccountInfo(MemberAccountTEMP_l) THEN										
"pPointStatus := MemberAccountTEMP_l.Balance + MemberAccountTEMP_l.""Unprocessed Points"";"										
//LS7.1-04 +										
EXIT(TRUE);										
END;										
										
PROCEDURE GetMemberPointBalance@1100409061() : Decimal;										
BEGIN										
//GetMemberPointBalance										
EXIT(POSMemberMgt.GetMemberBalance);										
END;										
										
PROCEDURE SetTransBenefitBuffer@1100409068(VAR pTransDiscBenefitTmp@1100409001 : TEMPORARY Record 99001674);										
BEGIN										
//SetTransBenefitBuffer										
DiscLedgerMgt.SaveTransBenefitBuffer(pTransDiscBenefitTmp);										
END;										
										
PROCEDURE ClearTransBenefitBuffer@1100409067();										
BEGIN										
//ClearTransBenefitBuffer										
DiscLedgerMgt.ClearBenefitProcessFlag;										
DiscLedgerMgt.DelereTransBenefitBuffer;										
END;										
										
PROCEDURE GetTransBenefitBuffer@1100409062(VAR pTransDiscBenefitTmp@1100409003 : TEMPORARY Record 99001674);										
BEGIN										
//GetTransBenefitBuffer										
DiscLedgerMgt.GetTransBenefitBuffer(pTransDiscBenefitTmp);										
END;										
										
PROCEDURE SetPaymentState@1100409070(pPaymentState@1100409000 : Boolean);										
BEGIN										
//SetPaymentState										
PaymentState := pPaymentState;										
END;										
										
PROCEDURE VoidBenefitLines@1100409079(VAR pPosTrans@1100409002 : Record 99008980);										
VAR										
PosTransLine@1100409001 : Record 99008981;										
PosTransLine2@1100409000 : Record 99008981;										
BEGIN										
//VoidBenefitLines										
ClearTransBenefitBuffer;										
										
PosTransLine.RESET;										
"PosTransLine.SETCURRENTKEY(""Receipt No."",""Entry Type"",""Entry Status"");"										
"PosTransLine.SETRANGE(""Receipt No."",pPosTrans.""Receipt No."");"										
"PosTransLine.SETRANGE(""Entry Type"",PosTransLine.""Entry Type""::Item);"										
"PosTransLine.SETRANGE(""Entry Status"",PosTransLine.""Entry Status""::"" "");"										
"PosTransLine.SETRANGE(""Benefit Item"",TRUE);"										
IF PosTransLine.FIND('-') THEN										
REPEAT										
"IF PosTransLine2.GET(PosTransLine.""Receipt No."",PosTransLine.""Line No."") THEN"										
PosTransLine2.VoidLine;										
UNTIL PosTransLine.NEXT = 0;										
END;										
										
PROCEDURE IsInPaymentState@1100409071() : Boolean;										
BEGIN										
//IsInPaymentState										
EXIT(PaymentState);										
END;										
										
PROCEDURE LoadOfferTables@1100409069(pStartup@1100409004 : Boolean);										
VAR										
PeriodicDiscount@1100409000 : Record 99001453;										
PeriodicDiscountLine@1100409001 : Record 99001454;										
Offer@1100409002 : Record 99001502;										
OfferLine@1100409003 : Record 99001503;										
BEGIN										
//LoadOfferTables										
{//LS7.1-02										
IF NOT pStartup THEN										
"IF PosFuncProfile.""Offer Load Interval In Min."" <> 0 THEN"										
"IF LastOfferLoadTime  + (PosFuncProfile.""Offer Load Interval In Min.""  * 60000) > CURRENTDATETIME THEN"										
EXIT;										
TmpPeriodicDiscountLine.RESET;										
TmpPeriodicDiscountLine.DELETEALL;										
TmpOfferLine.RESET;										
TmpOfferLine.DELETEALL;										
TmpPreDiscAmountToTrigger.RESET;										
TmpPreDiscAmountToTrigger.DELETEALL;										
PeriodicDiscount.SETCURRENTKEY(Status);										
"PeriodicDiscount.SETRANGE(Status,PeriodicDiscount.Status::Enabled);"										
IF PeriodicDiscount.FINDFIRST THEN REPEAT										
"IF PeriodActive(PeriodicDiscount.""Validation Period ID"") THEN BEGIN"										
"IF PeriodicDiscount.""Amount to Trigger"" <> 0 THEN BEGIN"										
TmpPreDiscAmountToTrigger.INIT;										
"TmpPreDiscAmountToTrigger.""No."" := PeriodicDiscount.""No."";"										
IF TmpPreDiscAmountToTrigger.INSERT THEN;										
END;										
"PeriodicDiscountLine.SETRANGE(""Offer No."",PeriodicDiscount.""No."");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpPeriodicDiscountLine := PeriodicDiscountLine;										
"TmpPeriodicDiscountLine.""Header Type"" := PeriodicDiscount.Type;"										
TmpPeriodicDiscountLine.INSERT;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
END;										
UNTIL PeriodicDiscount.NEXT = 0;										
										
Offer.SETCURRENTKEY(Status);										
"Offer.SETRANGE(Status,Offer.Status::Enabled);"										
IF Offer.FINDSET THEN REPEAT										
"IF PeriodActive(Offer.""Validation Period ID"") THEN BEGIN"										
"OfferLine.SETRANGE(""Offer No."",Offer.""No."");"										
IF OfferLine.FINDSET THEN REPEAT										
TmpOfferLine := OfferLine;										
TmpOfferLine.INSERT;										
UNTIL OfferLine.NEXT = 0;										
END;										
UNTIL Offer.NEXT = 0;										
										
LastOfferLoadTime := CURRENTDATETIME;										
}//LS7.1-02										
										
//LS7.1-02 -										
"IF PosFuncProfile.""Pre Load Offers"" =  PosFuncProfile.""Pre Load Offers""::"" "" THEN"										
EXIT;										
										
"IF PosFuncProfile.""Pre Load Offers"" =  PosFuncProfile.""Pre Load Offers""::""At Start"" THEN"										
LoadOfferTablesAtStart(pStartup)										
ELSE										
LoadOfferTablesByDemand(pStartup);										
//LS7.1-02 +										
END;										
										
PROCEDURE PeriodActive@1100409073(ValidationPeriodID@1100409000 : Code[10]) : Boolean;										
VAR										
ValidationPeriod@1100409001 : Record 99001481;										
BEGIN										
IF NOT ValidationPeriod.GET(ValidationPeriodID) THEN										
EXIT(TRUE);										
										
"IF (ValidationPeriod.""Starting Date"" <> 0D) AND (ValidationPeriod.""Starting Date"" > TODAY) THEN"										
EXIT(FALSE);										
										
"IF (ValidationPeriod.""Ending Date"" <> 0D) AND (ValidationPeriod.""Ending Date"" < TODAY) THEN"										
EXIT(FALSE);										
										
EXIT(TRUE);										
END;										
										
PROCEDURE GetActivePerDisc4Item@1100409077(VAR TmpPeriodicDiscRec@1100409000 : TEMPORARY Record 99001453;ItemNo@1100409001 : Code[20	]);									
VAR										
Item@1100409002 : Record 27;										
PeriodicDiscount@1100409004 : Record 99001453;										
ItemSpecialGroupLink@1100409003 : Record 10000736;										
BEGIN										
{//LS7.1-02										
TmpPeriodicDiscRec.RESET;										
TmpPeriodicDiscRec.DELETEALL;										
IF NOT Item.GET(ItemNo) THEN										
EXIT;										
										
TmpPreDiscAmountToTrigger.RESET;										
IF TmpPreDiscAmountToTrigger.FINDSET THEN										
REPEAT										
"IF PeriodicDiscount.GET(TmpPreDiscAmountToTrigger.""No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPreDiscAmountToTrigger.NEXT = 0;										
										
TmpPeriodicDiscountLine.RESET;										
"TmpPeriodicDiscountLine.SETCURRENTKEY(Type,""No."");"										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::Item);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemNo);"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Product Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Product Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Item Category"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Item Category Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"ItemSpecialGroupLink.SETRANGE(""Item No."",ItemNo);"										
IF ItemSpecialGroupLink.FINDSET THEN REPEAT										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Special Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemSpecialGroupLink.""Special Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
UNTIL ItemSpecialGroupLink.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::All);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
TmpPeriodicDiscountLine.RESET;										
}//LS7.1-02										
										
//LS7.1-02 -										
"IF PosFuncProfile.""Pre Load Offers"" =  PosFuncProfile.""Pre Load Offers""::""At Start"" THEN"										
"GetDisc4ItemAtStart(TmpPeriodicDiscRec,ItemNo)"										
ELSE										
"GetDisc4ItemByDemand(TmpPeriodicDiscRec,ItemNo)"										
//LS7.1-02 +										
END;										
										
PROCEDURE GetActiveItemPointOfferLines@1100409074(CurrLine@1100409000 : Record 99008981;VAR TmpItemPointOfferLine@1100409001 : TEMPO	RAR	Y R	ec	ord	99001454;PromptAtScan@1100409005 : Boolean) : Boolean;					
VAR										
Item@1100409003 : Record 27;										
ItemSpecialGroupLink@1100409004 : Record 10000736;										
PeriodicDiscountLine@1100409002 : Record 99001454;										
TmpPerDiscount@1100409012 : TEMPORARY Record 99001453;										
TmpPerDiscount2@1100409008 : TEMPORARY Record 99001453;										
PeriodicDiscount@1100409009 : Record 99001453;										
RecRef@1100409010 : RecordRef;										
FieldRef@1100409011 : FieldRef;										
UseQuery@1100409006 : Boolean;										
QueryMgt@1100409007 : Codeunit 99008911;										
PromptAtScanLine@1100409013 : Boolean;										
BEGIN										
//GetActiveItemPointOfferLines										
"IF CurrLine.""Entry Type"" <> CurrLine.""Entry Type""::Item THEN"										
EXIT(FALSE);										
										
"IF CurrLine.""Entry Status"" <> CurrLine.""Entry Status""::"" "" THEN"										
EXIT(FALSE);										
										
{//LS7.1-02										
TmpPeriodicDiscountLine.RESET;										
"TmpPeriodicDiscountLine.SETRANGE(""Header Type"",TmpPeriodicDiscountLine.""Header Type""::""Item Point"");"										
IF PromptAtScan THEN BEGIN										
"TmpPeriodicDiscountLine.SETRANGE(""Prompt at Scan"",TRUE);"										
IF NOT TmpPeriodicDiscountLine.FINDFIRST THEN										
EXIT(FALSE);										
END;										
										
UseQuery := QueryMgt.QueryAllowed; //LS7.1-02										
										
TmpItemPointOfferLine.RESET;										
TmpItemPointOfferLine.DELETEALL;										
"TmpPeriodicDiscountLine.SETRANGE(""Prompt at Scan"");"										
										
Item.GET(CurrLine.Number);										
"TmpPeriodicDiscountLine.SETCURRENTKEY(Type,""No."");"										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::Item);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""No."");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
//LS7.1-02 -										
IF UseQuery THEN BEGIN										
"IF PeriodicDiscountLine.GET(TmpPeriodicDiscountLine.""Offer No."",TmpPeriodicDiscountLine.""Line No."") THEN BEGIN"										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END;										
END ELSE BEGIN										
//LS7.1-02 +										
TmpItemPointOfferLine := TmpPeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END; //LS7.1-02										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Product Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Product Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
//LS7.1-02 -										
IF UseQuery THEN BEGIN										
"IF PeriodicDiscountLine.GET(TmpPeriodicDiscountLine.""Offer No."",TmpPeriodicDiscountLine.""Line No."") THEN BEGIN"										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END;										
END ELSE BEGIN										
//LS7.1-02 +										
TmpItemPointOfferLine := TmpPeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END; //LS7.1-02										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Item Category"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Item Category Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
//LS7.1-02 -										
IF UseQuery THEN BEGIN										
"IF PeriodicDiscountLine.GET(TmpPeriodicDiscountLine.""Offer No."",TmpPeriodicDiscountLine.""Line No."") THEN BEGIN"										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END;										
END ELSE BEGIN										
//LS7.1-02 +										
TmpItemPointOfferLine := TmpPeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END; //LS7.1-02										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"ItemSpecialGroupLink.SETRANGE(""Item No."",Item.""No."");"										
IF ItemSpecialGroupLink.FINDSET THEN REPEAT										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Special Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemSpecialGroupLink.""Special Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
//LS7.1-02 -										
IF UseQuery THEN BEGIN										
"IF PeriodicDiscountLine.GET(TmpPeriodicDiscountLine.""Offer No."",TmpPeriodicDiscountLine.""Line No."") THEN BEGIN"										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END;										
END ELSE BEGIN										
//LS7.1-02 +										
TmpItemPointOfferLine := TmpPeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END; //LS7.1-02										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
UNTIL ItemSpecialGroupLink.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::All);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
//LS7.1-02 -										
IF UseQuery THEN BEGIN										
"IF PeriodicDiscountLine.GET(TmpPeriodicDiscountLine.""Offer No."",TmpPeriodicDiscountLine.""Line No."") THEN BEGIN"										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END;										
END ELSE BEGIN										
//LS7.1-02 +										
TmpItemPointOfferLine := TmpPeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
END; //LS7.1-02										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
TmpPeriodicDiscountLine.RESET;										
TmpItemPointOfferLine.RESET;										
}//LS7.1-02										
										
//LS7.1-02 -										
Item.GET(CurrLine.Number);										
PromptAtScanLine := FALSE;										
"IF PosFuncProfile.""Pre Load Offers"" > 0 THEN BEGIN"										
TmpPerDiscount2.RESET;										
TmpPerDiscount2.DELETEALL;										
"GetActivePerDisc4Item(TmpPerDiscount2,CurrLine.Number);"										
RecRef.GETTABLE(TmpPerDiscount2);										
END ELSE										
RecRef.GETTABLE(PeriodicDiscount);										
										
RecRef.CURRENTKEYINDEX(2);										
FieldRef := RecRef.FIELD(3);										
FieldRef.SETRANGE(TmpPerDiscount2.Status::Enabled);										
FieldRef := RecRef.FIELD(4);										
"FieldRef.SETRANGE(TmpPerDiscount2.Type::""Item Point"");"										
										
"PeriodicDiscountLine.SETCURRENTKEY(""Offer No."",Type,""No."",""Variant Code"",""Unit of Measure"",""Prod. Group Category"");"										
IF RecRef.FIND('-') THEN										
REPEAT										
RecRef.SETTABLE(TmpPerDiscount);										
										
"IF PeriodActive2(TmpPerDiscount.""Validation Period ID"") THEN BEGIN"										
"PeriodicDiscountLine.SETRANGE(""Offer No."",TmpPerDiscount.""No."");"										
										
"PeriodicDiscountLine.SETRANGE(Type,PeriodicDiscountLine.Type::Item);"										
"PeriodicDiscountLine.SETRANGE(""No."",Item.""No."");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
"IF TmpItemPointOfferLine.""Prompt at Scan"" THEN"										
PromptAtScanLine := TRUE;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
										
"PeriodicDiscountLine.SETRANGE(Type,PeriodicDiscountLine.Type::""Product Group"");"										
"PeriodicDiscountLine.SETRANGE(""No."",Item.""Product Group Code"");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
"IF TmpItemPointOfferLine.""Prompt at Scan"" THEN"										
PromptAtScanLine := TRUE;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
										
"PeriodicDiscountLine.SETRANGE(Type,PeriodicDiscountLine.Type::""Item Category"");"										
"PeriodicDiscountLine.SETRANGE(""No."",Item.""Item Category Code"");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
"IF TmpItemPointOfferLine.""Prompt at Scan"" THEN"										
PromptAtScanLine := TRUE;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
										
"ItemSpecialGroupLink.SETRANGE(""Item No."",Item.""No."");"										
IF ItemSpecialGroupLink.FINDSET THEN REPEAT										
"PeriodicDiscountLine.SETRANGE(Type,PeriodicDiscountLine.Type::""Special Group"");"										
"PeriodicDiscountLine.SETRANGE(""No."",ItemSpecialGroupLink.""Special Group Code"");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
"IF TmpItemPointOfferLine.""Prompt at Scan"" THEN"										
PromptAtScanLine := TRUE;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
UNTIL ItemSpecialGroupLink.NEXT = 0;										
										
"PeriodicDiscountLine.SETRANGE(Type,PeriodicDiscountLine.Type::All);"										
"PeriodicDiscountLine.SETRANGE(""No."");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpItemPointOfferLine := PeriodicDiscountLine;										
TmpItemPointOfferLine.INSERT;										
"IF TmpItemPointOfferLine.""Prompt at Scan"" THEN"										
PromptAtScanLine := TRUE;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
END;										
UNTIL RecRef.NEXT = 0;										
										
IF (PromptAtScan) AND (NOT PromptAtScanLine) THEN										
EXIT(FALSE);										
										
TmpItemPointOfferLine.RESET;										
//LS7.1-02 +										
										
EXIT(TmpItemPointOfferLine.FINDFIRST);										
END;										
										
PROCEDURE PointsUsedInTransaction@1100409081(Transaction@1100409000 : Record 99008980;ExcludeLineNo@1100409001 : Integer) : Decimal;										
VAR										
MembershipCard@1100409007 : Record 99009003;										
MemberClub@1100409003 : Record 99009000;										
TransLine@1100409004 : Record 99008981;										
TransDiscLine@1100409005 : Record 99008943;										
PointsUsed@1100409006 : Decimal;										
BEGIN										
PointsUsed := 0;										
IF NOT GetMemberShipCardInfo(MembershipCard) THEN										
EXIT(0);										
"MemberClub.GET(MembershipCard.""Club Code"");"										
										
"TransLine.SETRANGE(""Receipt No."",Transaction.""Receipt No."");"										
"TransLine.SETRANGE(""Entry Type"",TransLine.""Entry Type""::Payment);"										
"TransLine.SETRANGE(Number,MemberClub.""Member Point Tender Type"");"										
IF TransLine.FINDSET THEN REPEAT										
"PointsUsed := PointsUsed + TransLine.""Amount In Currency"";"										
UNTIL TransLine.NEXT = 0;										
										
"TransDiscLine.SETRANGE(""Receipt No."",Transaction.""Receipt No."");"										
"TransDiscLine.SETRANGE(""Periodic Disc. Type"",TransDiscLine.""Periodic Disc. Type""::""Item Point"");"										
"TransDiscLine.SETFILTER(""Entry Status"",'<>%1',TransDiscLine.""Entry Status""::Voided);"										
IF ExcludeLineNo <> 0 THEN										
"TransDiscLine.SETFILTER(""Line No."",'<>%1',ExcludeLineNo);"										
										
IF TransDiscLine.FINDSET THEN REPEAT										
PointsUsed := PointsUsed - TransDiscLine.Points;										
UNTIL TransDiscLine.NEXT = 0;										
										
EXIT(PointsUsed);										
END;										
										
PROCEDURE PrepareInvLookup@1100409103(VAR pCurrLine@1100409007 : Record 99008981;pSerialLotLookup@1100409002 : Boolean;pLocationProf	ile	@11	0	409	000 : Code[30];VAR pFilter@1100409001 : Code[20]) : Boolean;					
VAR										
TSUtil@1200070000 : Codeunit 99008909;										
ErrorCode@1200070001 : Integer;										
TransServerLookup@1100409005 : Boolean;										
ItemTrack@1100409006 : Codeunit 10001415;										
Helper@1100409004 : Codeunit 10000705;										
PosIsOnLine@1100409008 : Boolean;										
BEGIN										
//PrepareInvLookup										
"PosIsOnLine := PosTerminal.""Terminal Connection"" = PosTerminal.""Terminal Connection""::OnLine;"										
										
IF pSerialLotLookup THEN BEGIN										
"IF (PosIsOnLine) OR (NOT PosFuncProfile.""TS Inv. Lookup"") THEN"										
TransServerLookup := FALSE										
ELSE										
TransServerLookup := TRUE;										
END ELSE BEGIN										
"IF PosFuncProfile.""TS Inv. Lookup"" THEN"										
TransServerLookup := TRUE										
ELSE										
TransServerLookup := FALSE;										
END;										
										
"IF pSerialLotLookup THEN BEGIN  //Updating Inventory Lookup not needed, done before calling the form when Serial/Lot lookup."										
"pCurrLine.""Receipt No."" := 'SL';"										
"pCurrLine.""Store No."" := POSSESSION.StoreNo;"										
END ELSE BEGIN										
IF TransServerLookup THEN BEGIN										
"//IF NOT TSUtil.GetItemInventoryLookupTable(pCurrLine.Number,pCurrLine.""Variant Code"",'',ErrorCode) THEN //LS7.1-10"										
"IF NOT TSUtil.GetItemInventoryLookupTable(pCurrLine.Number,pCurrLine.""Variant Code"",'',pLocationProfile,ErrorCode) THEN //LS7."	1-Jan	0								
										
EXIT(FALSE);										
"pCurrLine.""Store No."" := POSSESSION.StoreNo;"										
END ELSE BEGIN										
"pCurrLine.""Store No."" := POSSESSION.StoreNo;"										
END;										
										
IF ItemTrack.IsItemSNTracking(pCurrLine.Number) OR ItemTrack.IsItemLotTracking(pCurrLine.Number) THEN BEGIN										
"pCurrLine.""Receipt No."" := 'SL';"										
END;										
END;										
										
pFilter := '';										
IF TransServerLookup THEN										
"pFilter := Helper.CatStr(pFilter,';','[TRANS]');"										
IF PosIsOnLine THEN										
"pFilter := Helper.CatStr(pFilter,';','[ONLINE]');"										
										
EXIT(TRUE);										
END;										
										
PROCEDURE ClearQRCode@1100409066() : Text[30];										
BEGIN										
POSScanDataUtils.ClearQRCode;										
END;										
										
PROCEDURE LoadQRTextData@1100409084(pQRCode@1100409000 : Text);										
BEGIN										
POSScanDataUtils.LoadTextData(pQRCode);										
END;										
										
PROCEDURE QueueMobileLoyaltyQRCode@1100409088(VAR pErrorMessage@1100409000 : Text[50]) : Boolean;										
BEGIN										
EXIT(POSScanDataUtils.QueueMobileLoyaltyQRCode(pErrorMessage));										
END;										
										
PROCEDURE QRCardNo@1100409085() : Text[30];										
BEGIN										
EXIT(POSScanDataUtils.QRCardNo);										
END;										
										
PROCEDURE GetCouponsFromQR@1100409086(VAR pTmpMobileOfferQRCode@1100409000 : TEMPORARY Record 99009061);										
BEGIN										
POSScanDataUtils.GetCouponsFromQR(pTmpMobileOfferQRCode);										
END;										
										
PROCEDURE ItemInQR@1100409087(pItemNo@1100409001 : Code[20];VAR pOfferNo@1100409000 : Code[20]) : Boolean;										
BEGIN										
"EXIT(POSScanDataUtils.ItemInQR(pItemNo,pOfferNo));"										
END;										
										
PROCEDURE CheckValidEmailAddresses@1100409023(VAR Recipients@1000 : Text) : Boolean;										
VAR										
TmpRecipients@1002 : Text;										
BEGIN										
TmpRecipients := Recipients;										
"WHILE STRPOS(TmpRecipients,';') > 1 DO BEGIN"										
"IF NOT CheckValidEmailAddress(COPYSTR(TmpRecipients,1,STRPOS(TmpRecipients,';') - 1)) THEN"										
EXIT(FALSE);										
"TmpRecipients := COPYSTR(TmpRecipients,STRPOS(TmpRecipients,';') + 1);"										
END;										
IF NOT CheckValidEmailAddress(TmpRecipients) THEN										
EXIT(FALSE);										
EXIT(TRUE);										
END;										
										
LOCAL PROCEDURE CheckValidEmailAddress@1100409005(EmailAddress@1000 : Text) : Boolean;										
VAR										
i@1001 : Integer;										
NoOfAtSigns@1002 : Integer;										
BEGIN										
IF (EmailAddress[1] = '@') OR (EmailAddress[STRLEN(EmailAddress)] = '@') THEN										
EXIT(FALSE);										
										
FOR i := 1 TO STRLEN(EmailAddress) DO BEGIN										
IF EmailAddress[i] = '@' THEN										
NoOfAtSigns := NoOfAtSigns + 1;										
IF NOT (										
((EmailAddress[i] >= 'a') AND (EmailAddress[i] <= 'z')) OR										
((EmailAddress[i] >= 'A') AND (EmailAddress[i] <= 'Z')) OR										
((EmailAddress[i] >= '0') AND (EmailAddress[i] <= '9')) OR										
"((NoOfAtSigns = 0) AND (EmailAddress[i] IN ['!','#','$','%','&','''',"										
"'*','+','-','/','=','?',"										
"'^','_','`','.','{','|',"										
"'}','~'])) OR"										
"((NoOfAtSigns > 0) AND (EmailAddress[i] IN ['@','.','-','[',']'])))"										
THEN										
EXIT(FALSE);										
END;										
										
IF NoOfAtSigns <> 1 THEN										
EXIT(FALSE);										
EXIT(TRUE);										
END;										
										
PROCEDURE LoadOfferTablesAtStart@1100409026(pStartup@1100409004 : Boolean);										
VAR										
PeriodicDiscount@1100409000 : Record 99001453;										
PeriodicDiscountLine@1100409001 : Record 99001454;										
Offer@1100409002 : Record 99001502;										
OfferLine@1100409003 : Record 99001503;										
PeriodicDiscParm@1100409008 : Record 99001453;										
PeriodicDiscLineParm@1100409007 : Record 99001454;										
UseQuery@1100409006 : Boolean;										
QueryMgt@1100409005 : Codeunit 99008911;										
BEGIN										
//LoadOfferTablesAtStart										
//LS7.1-02 New										
										
IF NOT pStartup THEN										
"IF PosFuncProfile.""Offer Load Interval In Min."" <> 0 THEN"										
"IF LastOfferLoadTime  + (PosFuncProfile.""Offer Load Interval In Min.""  * 60000) > CURRENTDATETIME THEN"										
EXIT;										
										
TmpPeriodicDiscountLine.RESET;										
TmpPeriodicDiscountLine.DELETEALL;										
TmpOfferLine.RESET;										
TmpOfferLine.DELETEALL;										
TmpPreDiscAmountToTrigger.RESET;										
TmpPreDiscAmountToTrigger.DELETEALL;										
ValidationPeriodBuffer.RESET;										
ValidationPeriodBuffer.DELETEALL;										
										
UseQuery := QueryMgt.QueryAllowed;										
IF UseQuery THEN BEGIN										
QueryMgt.PeriodicDiscOpen(PeriodicDiscParm);										
WHILE QueryMgt.PeriodicDiscRead(PeriodicDiscount) DO BEGIN										
"IF PeriodicDiscount.""Amount to Trigger"" <> 0 THEN BEGIN"										
TmpPreDiscAmountToTrigger.INIT;										
"TmpPreDiscAmountToTrigger.""No."" := PeriodicDiscount.""No."";"										
IF TmpPreDiscAmountToTrigger.INSERT THEN;										
END;										
"PeriodicDiscLineParm.""Offer No."" := PeriodicDiscount.""No."";"										
QueryMgt.PeriodicDiscLineOpen(PeriodicDiscLineParm);										
WHILE QueryMgt.PeriodicDiscLineRead(PeriodicDiscountLine) DO BEGIN										
TmpPeriodicDiscountLine := PeriodicDiscountLine;										
"TmpPeriodicDiscountLine.""Header Type"" := PeriodicDiscount.Type;"										
TmpPeriodicDiscountLine.INSERT;										
END;										
QueryMgt.PeriodicDiscLineClose;										
END;										
QueryMgt.PeriodicDiscClose;										
END ELSE BEGIN										
PeriodicDiscount.SETCURRENTKEY(Status);										
"PeriodicDiscount.SETRANGE(Status,PeriodicDiscount.Status::Enabled);"										
IF PeriodicDiscount.FIND('-') THEN REPEAT										
"IF PeriodActive2(PeriodicDiscount.""Validation Period ID"") THEN BEGIN"										
"IF PeriodicDiscount.""Amount to Trigger"" <> 0 THEN BEGIN"										
TmpPreDiscAmountToTrigger.INIT;										
"TmpPreDiscAmountToTrigger.""No."" := PeriodicDiscount.""No."";"										
IF TmpPreDiscAmountToTrigger.INSERT THEN;										
END;										
"PeriodicDiscountLine.SETRANGE(""Offer No."",PeriodicDiscount.""No."");"										
IF PeriodicDiscountLine.FINDSET THEN REPEAT										
TmpPeriodicDiscountLine := PeriodicDiscountLine;										
"TmpPeriodicDiscountLine.""Header Type"" := PeriodicDiscount.Type;"										
TmpPeriodicDiscountLine.INSERT;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
END;										
UNTIL PeriodicDiscount.NEXT = 0;										
END;										
										
Offer.SETCURRENTKEY(Status);										
"Offer.SETRANGE(Status,Offer.Status::Enabled);"										
IF Offer.FINDSET THEN REPEAT										
"IF PeriodActive2(Offer.""Validation Period ID"") THEN BEGIN"										
"OfferLine.SETRANGE(""Offer No."",Offer.""No."");"										
IF OfferLine.FINDSET THEN REPEAT										
TmpOfferLine := OfferLine;										
TmpOfferLine.INSERT;										
UNTIL OfferLine.NEXT = 0;										
END;										
UNTIL Offer.NEXT = 0;										
										
LastOfferLoadTime := CURRENTDATETIME;										
END;										
										
PROCEDURE LoadOfferTablesByDemand@1100409028(pStartup@1100409004 : Boolean);										
VAR										
PeriodicDiscount@1100409000 : Record 99001453;										
PeriodicDiscountLine@1100409001 : Record 99001454;										
Offer@1100409002 : Record 99001502;										
OfferLine@1100409003 : Record 99001503;										
PeriodicDiscParm@1100409007 : Record 99001453;										
UseQuery@1100409006 : Boolean;										
QueryMgt@1100409005 : Codeunit 99008911;										
BEGIN										
//LoadOfferTablesByDemand										
//LS7.1-02 New										
										
IF NOT pStartup THEN										
"IF PosFuncProfile.""Offer Load Interval In Min."" <> 0 THEN"										
"IF LastOfferLoadTime  + (PosFuncProfile.""Offer Load Interval In Min.""  * 60000) > CURRENTDATETIME THEN"										
EXIT;										
										
TmpPeriodicDiscountLine.RESET;										
TmpPeriodicDiscountLine.DELETEALL;										
TmpOfferLine.RESET;										
TmpOfferLine.DELETEALL;										
TmpPreDiscAmountToTrigger.RESET;										
TmpPreDiscAmountToTrigger.DELETEALL;										
PreLoadDiscTmp.RESET;										
PreLoadDiscTmp.DELETEALL;										
PreLoadDiscLineTmp.RESET;										
PreLoadDiscLineTmp.DELETEALL;										
ValidationPeriodBuffer.RESET;										
ValidationPeriodBuffer.DELETEALL;										
										
UseQuery := QueryMgt.QueryAllowed;										
IF UseQuery THEN BEGIN										
QueryMgt.PeriodicDiscOpen(PeriodicDiscParm);										
WHILE QueryMgt.PeriodicDiscRead(PeriodicDiscount) DO BEGIN										
"IF PeriodicDiscount.""Amount to Trigger"" <> 0 THEN BEGIN"										
TmpPreDiscAmountToTrigger.INIT;										
"TmpPreDiscAmountToTrigger.""No."" := PeriodicDiscount.""No."";"										
IF TmpPreDiscAmountToTrigger.INSERT THEN;										
END;										
"IF NOT PreLoadDiscTmp.GET(PeriodicDiscount.""No."") THEN BEGIN"										
PreLoadDiscTmp.INIT;										
PreLoadDiscTmp := PeriodicDiscount;										
PreLoadDiscTmp.INSERT;										
END;										
END;										
QueryMgt.PeriodicDiscClose;										
END ELSE BEGIN										
PeriodicDiscount.SETCURRENTKEY(Status);										
"PeriodicDiscount.SETRANGE(Status,PeriodicDiscount.Status::Enabled);"										
IF PeriodicDiscount.FIND('-') THEN REPEAT										
"IF PeriodActive2(PeriodicDiscount.""Validation Period ID"") THEN BEGIN"										
"IF PeriodicDiscount.""Amount to Trigger"" <> 0 THEN BEGIN"										
"IF NOT TmpPreDiscAmountToTrigger.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPreDiscAmountToTrigger.INIT;										
"TmpPreDiscAmountToTrigger.""No."" := PeriodicDiscount.""No."";"										
TmpPreDiscAmountToTrigger.INSERT;										
END;										
END;										
"IF NOT PreLoadDiscTmp.GET(PeriodicDiscount.""No."") THEN BEGIN"										
PreLoadDiscTmp.INIT;										
PreLoadDiscTmp := PeriodicDiscount;										
PreLoadDiscTmp.INSERT;										
END;										
END;										
UNTIL PeriodicDiscount.NEXT = 0;										
END;										
										
Offer.SETCURRENTKEY(Status);										
"Offer.SETRANGE(Status,Offer.Status::Enabled);"										
IF Offer.FINDSET THEN REPEAT										
"IF PeriodActive2(Offer.""Validation Period ID"") THEN BEGIN"										
"OfferLine.SETRANGE(""Offer No."",Offer.""No."");"										
IF OfferLine.FINDSET THEN REPEAT										
TmpOfferLine := OfferLine;										
TmpOfferLine.INSERT;										
UNTIL OfferLine.NEXT = 0;										
END;										
UNTIL Offer.NEXT = 0;										
										
LastOfferLoadTime := CURRENTDATETIME;										
END;										
										
PROCEDURE PeriodActive2@1100409076(pValidationPeriodID@1100409000 : Code[10]) : Boolean;										
BEGIN										
//PeriodActive2										
//LS7.1-02 New										
										
IF ValidationPeriodBuffer.GET(pValidationPeriodID) THEN										
"EXIT(ValidationPeriodBuffer.""Time within Bounds"")"										
ELSE BEGIN										
IF PeriodActive(pValidationPeriodID) THEN BEGIN										
ValidationPeriodBuffer.INIT;										
ValidationPeriodBuffer.ID := pValidationPeriodID;										
"ValidationPeriodBuffer.""Time within Bounds"" := TRUE;"										
ValidationPeriodBuffer.INSERT;										
END ELSE BEGIN										
ValidationPeriodBuffer.INIT;										
ValidationPeriodBuffer.ID := pValidationPeriodID;										
"ValidationPeriodBuffer.""Time within Bounds"" := FALSE;"										
ValidationPeriodBuffer.INSERT;										
END;										
"EXIT(ValidationPeriodBuffer.""Time within Bounds"");"										
END;										
END;										
										
PROCEDURE GetDisc4ItemAtStart@1100409083(VAR TmpPeriodicDiscRec@1100409000 : TEMPORARY Record 99001453;ItemNo@1100409001 : Code[20])	;									
VAR										
Item@1100409002 : Record 27;										
PeriodicDiscount@1100409004 : Record 99001453;										
ItemSpecialGroupLink@1100409003 : Record 10000736;										
BEGIN										
//GetDisc4ItemAtStart										
//LS7.1-02 New										
										
TmpPeriodicDiscRec.RESET;										
TmpPeriodicDiscRec.DELETEALL;										
IF NOT Item.GET(ItemNo) THEN										
EXIT;										
										
TmpPreDiscAmountToTrigger.RESET;										
IF TmpPreDiscAmountToTrigger.FINDSET THEN										
REPEAT										
"IF PeriodicDiscount.GET(TmpPreDiscAmountToTrigger.""No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPreDiscAmountToTrigger.NEXT = 0;										
										
TmpPeriodicDiscountLine.RESET;										
"TmpPeriodicDiscountLine.SETCURRENTKEY(Type,""No."");"										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::Item);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemNo);"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Product Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Product Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Item Category"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Item Category Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"ItemSpecialGroupLink.SETRANGE(""Item No."",ItemNo);"										
IF ItemSpecialGroupLink.FINDSET THEN REPEAT										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Special Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemSpecialGroupLink.""Special Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
UNTIL ItemSpecialGroupLink.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::All);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
TmpPeriodicDiscRec := PeriodicDiscount;										
IF TmpPeriodicDiscRec.INSERT THEN;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
TmpPeriodicDiscountLine.RESET;										
END;										
										
PROCEDURE GetDisc4ItemByDemand@1100409075(VAR TmpPeriodicDiscRec@1100409000 : TEMPORARY Record 99001453;ItemNo@1100409001 : Code[20]	);									
VAR										
Item@1100409002 : Record 27;										
PeriodicDiscount@1100409004 : Record 99001453;										
ItemSpecialGroupLink@1100409003 : Record 10000736;										
PeriodicDiscountLine@1100409006 : Record 99001454;										
PeriodicDiscLineParm@1100409007 : Record 99001454;										
LastLineNo@1100409005 : Integer;										
BEGIN										
//GetDisc4ItemAtDemand										
//LS7.1-02 New										
										
TmpPeriodicDiscRec.RESET;										
TmpPeriodicDiscRec.DELETEALL;										
IF NOT Item.GET(ItemNo) THEN										
EXIT;										
										
TmpPreDiscAmountToTrigger.RESET;										
IF TmpPreDiscAmountToTrigger.FINDSET THEN										
REPEAT										
"IF PeriodicDiscount.GET(TmpPreDiscAmountToTrigger.""No."") THEN BEGIN"										
"IF NOT TmpPeriodicDiscRec.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPeriodicDiscRec.INIT;										
TmpPeriodicDiscRec := PeriodicDiscount;										
TmpPeriodicDiscRec.INSERT;										
END;										
END;										
UNTIL TmpPreDiscAmountToTrigger.NEXT = 0;										
										
PreLoadDiscLineTmp.RESET;										
IF PreLoadDiscLineTmp.FINDLAST THEN										
"LastLineNo := PreLoadDiscLineTmp.""Line No."""										
ELSE										
LastLineNo := 0;										
										
PeriodicDiscLineParm.Type := PreLoadDiscLineTmp.Type::Item;										
"PeriodicDiscLineParm.""No."" := ItemNo;"										
"PreLoadDicLines(PeriodicDiscLineParm,LastLineNo);"										
										
"PeriodicDiscLineParm.Type := PreLoadDiscLineTmp.Type::""Product Group"";"										
"PeriodicDiscLineParm.""No."" := Item.""Product Group Code"";"										
"PreLoadDicLines(PeriodicDiscLineParm,LastLineNo);"										
										
"PeriodicDiscLineParm.Type := PreLoadDiscLineTmp.Type::""Item Category"";"										
"PeriodicDiscLineParm.""No."" := Item.""Item Category Code"";"										
"PreLoadDicLines(PeriodicDiscLineParm,LastLineNo);"										
										
"ItemSpecialGroupLink.SETRANGE(""Item No."",ItemNo);"										
IF ItemSpecialGroupLink.FINDSET THEN										
REPEAT										
"PeriodicDiscLineParm.Type := PreLoadDiscLineTmp.Type::""Special Group"";"										
"PeriodicDiscLineParm.""No."" := ItemSpecialGroupLink.""Special Group Code"";"										
"PreLoadDicLines(PeriodicDiscLineParm,LastLineNo);"										
UNTIL ItemSpecialGroupLink.NEXT = 0;										
										
PeriodicDiscLineParm.Type := PreLoadDiscLineTmp.Type::All;										
"PeriodicDiscLineParm.""No."" := '';"										
"PreLoadDicLines(PeriodicDiscLineParm,LastLineNo);"										
										
TmpPeriodicDiscountLine.RESET;										
"TmpPeriodicDiscountLine.SETCURRENTKEY(Type,""No."");"										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::Item);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemNo);"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
"IF NOT TmpPeriodicDiscRec.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPeriodicDiscRec.INIT;										
TmpPeriodicDiscRec := PeriodicDiscount;										
TmpPeriodicDiscRec.INSERT;										
END;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Product Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Product Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
"IF NOT TmpPeriodicDiscRec.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPeriodicDiscRec.INIT;										
TmpPeriodicDiscRec := PeriodicDiscount;										
TmpPeriodicDiscRec.INSERT;										
END;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Item Category"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",Item.""Item Category Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
"IF NOT TmpPeriodicDiscRec.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPeriodicDiscRec.INIT;										
TmpPeriodicDiscRec := PeriodicDiscount;										
TmpPeriodicDiscRec.INSERT;										
END;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
"ItemSpecialGroupLink.SETRANGE(""Item No."",ItemNo);"										
IF ItemSpecialGroupLink.FINDSET THEN REPEAT										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::""Special Group"");"										
"TmpPeriodicDiscountLine.SETRANGE(""No."",ItemSpecialGroupLink.""Special Group Code"");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
"IF NOT TmpPeriodicDiscRec.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPeriodicDiscRec.INIT;										
TmpPeriodicDiscRec := PeriodicDiscount;										
TmpPeriodicDiscRec.INSERT;										
END;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
UNTIL ItemSpecialGroupLink.NEXT = 0;										
										
"TmpPeriodicDiscountLine.SETRANGE(Type,TmpPeriodicDiscountLine.Type::All);"										
"TmpPeriodicDiscountLine.SETRANGE(""No."");"										
IF TmpPeriodicDiscountLine.FINDSET THEN REPEAT										
"IF PeriodicDiscount.GET(TmpPeriodicDiscountLine.""Offer No."") THEN BEGIN"										
"IF NOT TmpPeriodicDiscRec.GET(PeriodicDiscount.""No."") THEN BEGIN"										
TmpPeriodicDiscRec.INIT;										
TmpPeriodicDiscRec := PeriodicDiscount;										
TmpPeriodicDiscRec.INSERT;										
END;										
END;										
UNTIL TmpPeriodicDiscountLine.NEXT = 0;										
										
TmpPeriodicDiscountLine.RESET;										
END;										
										
PROCEDURE PreLoadDicLines@1100409078(VAR pPeriodicDiscLineParm@1100409001 : Record 99001454;VAR pLastLineNo@1100409006 : Integer);										
VAR										
PeriodicDiscountLine@1100409002 : Record 99001454;										
PeriodicDiscLineParm@1100409004 : Record 99001454;										
UseQuery@1100409003 : Boolean;										
QueryMgt@1100409000 : Codeunit 99008911;										
BEGIN										
//PreLoadDicLines										
//LS7.1-02 New										
										
PreLoadDiscLineTmp.RESET;										
"PreLoadDiscLineTmp.SETCURRENTKEY(Type,""No."");"										
"PreLoadDiscLineTmp.SETRANGE(Type,pPeriodicDiscLineParm.Type);"										
"PreLoadDiscLineTmp.SETRANGE(""No."",pPeriodicDiscLineParm.""No."");"										
IF NOT PreLoadDiscLineTmp.FIND('-') THEN BEGIN										
UseQuery := QueryMgt.QueryAllowed;										
PreLoadDiscTmp.RESET;										
IF PreLoadDiscTmp.FIND('-') THEN										
REPEAT										
IF UseQuery THEN BEGIN										
"PeriodicDiscLineParm.""Offer No."" := PreLoadDiscTmp.""No."";"										
PeriodicDiscLineParm.Type := pPeriodicDiscLineParm.Type;										
"PeriodicDiscLineParm.""No."" := pPeriodicDiscLineParm.""No."";"										
QueryMgt.PeriodicDiscLineOpen(PeriodicDiscLineParm);										
WHILE QueryMgt.PeriodicDiscLineRead(PeriodicDiscountLine) DO BEGIN										
TmpPeriodicDiscountLine := PeriodicDiscountLine;										
"TmpPeriodicDiscountLine.""Header Type"" := PreLoadDiscTmp.Type;"										
TmpPeriodicDiscountLine.INSERT;										
END;										
QueryMgt.PeriodicDiscLineClose;										
END ELSE BEGIN										
"PeriodicDiscountLine.SETRANGE(""Offer No."",PreLoadDiscTmp.""No."");"										
"PeriodicDiscountLine.SETRANGE(Type,pPeriodicDiscLineParm.Type);"										
"PeriodicDiscountLine.SETRANGE(""No."",pPeriodicDiscLineParm.""No."");"										
IF pPeriodicDiscLineParm.Type = pPeriodicDiscLineParm.Type::All THEN										
"PeriodicDiscountLine.SETRANGE(""No."");"										
IF PeriodicDiscountLine.FIND('-') THEN										
REPEAT										
TmpPeriodicDiscountLine := PeriodicDiscountLine;										
"TmpPeriodicDiscountLine.""Header Type"" := PreLoadDiscTmp.Type;"										
TmpPeriodicDiscountLine.INSERT;										
UNTIL PeriodicDiscountLine.NEXT = 0;										
END;										
UNTIL PreLoadDiscTmp.NEXT = 0;										
										
pLastLineNo := pLastLineNo + 1;										
PreLoadDiscLineTmp.INIT;										
"PreLoadDiscLineTmp.""Line No."" := pLastLineNo;"										
PreLoadDiscLineTmp.Type := pPeriodicDiscLineParm.Type;										
"PreLoadDiscLineTmp.""No."" := pPeriodicDiscLineParm.""No."";"										
PreLoadDiscLineTmp.INSERT;										
END;										
END;										
										
PROCEDURE ClearOfferBuffer@1100409040();										
BEGIN										
//ClearOfferBuffer										
//LS7.1-02 New										
										
POSOfferMgt.ClearOfferBuffer;										
END;										
										
PROCEDURE AddPosTransLineOffers@1100409063(VAR pPosTransLine@1100409001 : Record 99008981);										
BEGIN										
//AddPosTransLineOffers										
//LS7.1-02 New										
										
POSOfferMgt.AddPosTransLineOffers(pPosTransLine);										
END;										
										
PROCEDURE GetPosTransLineOffers@1100409065(VAR pPosTransLine@1100409001 : Record 99008981;VAR pOfferCalcBuffer@1100409000 : TEMPORAR	Y R	eco	rd	99	001561) : Boolean;					
BEGIN										
//GetPosTransLineOffers										
//LS7.1-02 New										
										
"EXIT(POSOfferMgt.GetPosTransLineOffers(pPosTransLine,pOfferCalcBuffer));"										
END;										
										
PROCEDURE ClearSkipPosTransLinerBuffer@1100409039();										
BEGIN										
//ClearSkipPosTransLinerBuffer										
//LS7.1-02 New										
										
POSOfferMgt.ClearSkipPosTransLineBuffer;										
END;										
										
PROCEDURE AddSkipPosTransLine@1100409082(VAR pPosTransLine@1100409001 : Record 99008981);										
BEGIN										
//AddSkipPosTransLines										
//LS7.1-02 New										
										
POSOfferMgt.AddSkipPosTransLine(pPosTransLine);										
END;										
										
PROCEDURE SkipPosTransLine@1100409090(VAR pPosTransLine@1100409001 : Record 99008981) : Boolean;										
BEGIN										
//SkipPosTransLine										
//LS7.1-02 New										
										
EXIT(POSOfferMgt.SkipPosTransLine(pPosTransLine));										
END;										
										
PROCEDURE QueueHospLoyalty@1100409092(VAR pErrorMessage@1100409000 : Text) : Boolean;										
BEGIN										
//LS7.10.01-01 New in Verison										
EXIT(POSScanDataUtils.QueueHospLoyalty(pErrorMessage));										
END;										
										
PROCEDURE GetHospLoyalty@1100409093(VAR pHospLoyalty@1100409000 : TEMPORARY Record 99009065) : Boolean;										
BEGIN										
//LS7.10.01-01 New in Verison										
EXIT(POSScanDataUtils.GetHospLoyalty(pHospLoyalty));										
END;										
										
BEGIN										
{										
LS7.1-01 KG  #23155#              DISRESET Command did also reset Total discount										
"LS7.1-02 StK #25699# 27.09.2013 - Make offer pre load configurable, start using queries."										
"LS7.1-03 GEG #24625# 07.10.2013 - Table Description added as var to InsertTmpTrans,reuse.."										
LS7.1-04 GH  #25689# 15.10.2013 - Flow field Point Balance removed from Membership Card table.										
LS7.1-05 GEG #26178# 21.10.2013 - Deal Entry fix										
"LS7.1-06 GEG #25795# 01.10.2013 - CopyItemsFromPostedTrans - rewrite with temp tables because of locking, add to inserttmptrans if"	fo	r i	ns	ert						
LS7.1-07 GL  #26226# 11.11.2013 - Act on Return values in TS Utility funcitons.										
LS7.1-08 GH  #27146# 27.11.2013 - Change Member Card Number to Text 100 in tables and Text in variables.										
LS7.1-09 StG #27599# 06.01.2014 - Do not remove leading 0 from data entries with number series										
LS7.1-10 ITG #26283# 18.12.2013 - Inventory Lookup on POS filtered by Location Profile and WebService adjustments										
LS7.1-11 GEG #24625# 16.01.2014 - InsertTableInUseonPOS returns false if already in use										
LS7.1-12 GEG #24625# 23.01.2014 - ChangeStaff - update in KDS										
LS7.1-13 GH  #26588# 17.01.2014 - fix 100% discount calculation										
LS7.1-14 AM  #26415# 30.01.2014 - DDispFunc and DDispActive removed.										
LS7.1-15 StK #22681# 30.01.2014 - Stop Overwriting Manual Price Changes.										
LS7.1-16 KG  #27966# 31.01.2014 - POS does not ask if to allow customer to post over credit limit if POS user has Manager privilag	es									
"LS7.1-17 GEG #24625# 05.02.2014 - GuestInfo changes in CopyMarkedLines, POS Tr. Line Displ. Station Routing table added"										
"LS7.1-18 GEG #24625# 13.02.2014 - Functions regarding old kitchen monitor and print deleted, SplitLine deleted"										
LS7.1-19 GEG #24625# 02.03.2014 - Additions to split functions for new KDS printing										
LS7.1-20 GH  #NAV-616# 27.03.2014 - Use web services when accessing member information										
LS7.1-21 GH  #NAV-718# 08.04.2014 - Add Member Management Setup and Member Point Setup										
"LS7.1-22 ThJ #NAV-731# 10.04.2014 - Change Text Constant ""Text051"" to not show Over Credit amount for Customer"										
										
LS7.10.01-01 KG  #NAV-837# 11.06.2014 - Hospitalty Loyalty. Scan XML Order from Mobile										
}										
END.										
}										
}										
										
